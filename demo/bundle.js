/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "220b2d2354d820ddbda3";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted
/******/ 			)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./index.js")(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ExtendableClip = __webpack_require__(/*! ../Clip/ExtendableClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar AudioContextHandler = __webpack_require__(/*! ./AudioContextHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js\");\n\nvar AudioNode = __webpack_require__(/*! ./helpers/AudioNode */ \"../node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioClip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(AudioClip, _ExtendableClip);\n\n  function AudioClip(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, AudioClip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioClip).call(this, attrs, props));\n    _this.audioNode = new AudioNode();\n\n    _this.audioNode.output.connect(helper.getAudioContext().destination);\n\n    var contextHanlder = new AudioContextHandler(_this.props.audioSources, _this.audioNode);\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: true\n    });\n    _this.audioClip = true;\n    return _this;\n  }\n\n  _createClass(AudioClip, [{\n    key: \"onProgress\",\n    value: function onProgress(fraction, ms, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      _get(_getPrototypeOf(AudioClip.prototype), \"onProgress\", this).call(this, fraction, ms, this.id, forceReset);\n    }\n  }, {\n    key: \"_onGetContextOnce\",\n    value: function _onGetContextOnce(parentClipContext) {\n      /*\n      context.master {gain, pan, highpass, lowpass}\n      */\n      // as highpass is the first node of master in row\n      this.parentClipContext = parentClipContext;\n      this.audioNode.connect(parentClipContext.masterNode);\n    }\n  }, {\n    key: \"lastWish\",\n    value: function lastWish() {\n      this.audioNode.output.disconnect(this.parentClipContext.masterNode);\n      this.audioNode.output.connect(helper.getAudioContext().destination);\n    }\n  }]);\n\n  return AudioClip;\n}(ExtendableClip);\n\nmodule.exports = AudioClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _base64ToArrayBuffer(base64) {\n  var binary_string = window.atob(base64);\n  var len = binary_string.length;\n  var bytes = new Uint8Array(len);\n\n  for (var i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n\n  return bytes.buffer;\n}\n\nvar datamcidRegex = /\\[data(-mcid=\"+\\w+\")+\\]/g;\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioNode = __webpack_require__(/*! ./helpers/AudioNode */ \"../node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\");\n\nvar PubSub =\n/*#__PURE__*/\nfunction () {\n  function PubSub() {\n    _classCallCheck(this, PubSub);\n\n    this.subscribers = [];\n  }\n\n  _createClass(PubSub, [{\n    key: \"sub\",\n    value: function sub(id, method) {\n      this.subscribers.push(method);\n    }\n  }, {\n    key: \"pub\",\n    value: function pub(argument) {\n      for (var i = 0; i < this.subscribers.length; i++) {\n        this.subscribers[i](argument);\n      }\n    }\n  }]);\n\n  return PubSub;\n}();\n/**\n * Specs:\n * AudioContext Handler keeps all the audio sources.\n * The audio sources are passed in the following format:\n * - src (the source of the sound)\n * - base64 (boolean, defaults to false. If the sound is base64 it's been treated\n *      in a different way)\n * - id (must be unique)\n * - classes (an array of belonging classes)\n *\n * The SoundContextHanlder creates a media element of the following format:\n * media: {\n *  src\n *  id\n *  classes\n *  base64\n *  buffer\n *  nodes: {\n *      stereo\n *      highpass\n *      lowpass\n *      gain\n *      audioNode\n *  }\n * }\n *\n * Finally the SoundContextHandler has its own nodes (the master) which look like this:\n * master: {\n *      stereo\n *      highpass\n *      lowpass\n *      gain\n * }\n **/\n\n\nvar AudioContextHandler =\n/*#__PURE__*/\nfunction () {\n  function AudioContextHandler() {\n    var _this = this;\n\n    var audioSources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var masterNode = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, AudioContextHandler);\n\n    // variables to be used for checking context rediness\n    this.totalSources = audioSources.length; // initialisation of the final audio resources colleciton\n\n    this.audioSources = {};\n    this.elementsByMCID = {}; // iterate on audioSource to create the audioSources collection\n\n    var _loop = function _loop(i) {\n      var audioSource = audioSources[i];\n      var audioResource = {\n        mcid: audioSource.mcid || helper.getAnId(),\n        id: audioSource.id,\n        src: audioSource.src,\n        classes: audioSource.classes || [],\n        base64: audioSource.base64 || false,\n        pubSub: new PubSub(),\n        soundLoaded: false\n      };\n      _this.audioSources[audioResource.id] = audioResource;\n      _this.elementsByMCID[audioResource.mcid] = audioResource;\n\n      if (audioSource.base64 === true) {\n        helper.getAudioContext().decodeAudioData(_base64ToArrayBuffer(audioSource.src), function (buffer) {\n          _this._setBuffer(audioResource, buffer, masterNode);\n        });\n      } else {\n        var request = new XMLHttpRequest();\n        request.open('GET', audioResource.src, true);\n        request.responseType = 'arraybuffer'; // Decode asynchronously\n\n        _this.soundLoaded = false;\n\n        request.onload = function () {\n          helper.getAudioContext().decodeAudioData(request.response, function (buffer) {\n            _this._setBuffer(audioResource, buffer, masterNode);\n          }, _this.onError);\n        };\n\n        request.send();\n      }\n    };\n\n    for (var i = 0; i < audioSources.length; i++) {\n      _loop(i);\n    }\n\n    this.context = {\n      document: document,\n      window: window,\n      rootElement: document.body,\n      unmount: function unmount() {},\n      masterNode: masterNode,\n      audioContext: helper.getAudioContext(),\n      getElements: this.getElements.bind(this),\n      getMCID: this.getMCID.bind(this),\n      setMCID: this.setMCID.bind(this),\n      getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n      getElementByMCID: this.getElementByMCID.bind(this)\n    };\n  }\n\n  _createClass(AudioContextHandler, [{\n    key: \"_setBuffer\",\n    value: function _setBuffer(audioResource, buffer, masterNode) {\n      audioResource.soundLoaded = true;\n      audioResource.buffer = buffer;\n      audioResource.effectsAudioNode = new AudioNode();\n      audioResource.effectsAudioNode.connect(masterNode);\n      audioResource.pubSub.pub();\n    }\n  }, {\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n        return this.elementsByMCID[mcid];\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(selector) {\n      if (selector.charAt(0) === \"~\") {\n        selector = selector.substr(1);\n\n        if (selector.charAt(0) === \"#\") {\n          if (Object.prototype.hasOwnProperty.call(this.audioSources, selector.substr(1))) {\n            return [this.audioSources[selector.substr(1)]];\n          } else {\n            return [];\n          }\n        } else if (selector.charAt(0) === \".\") {\n          var className = selector.substr(1);\n          var toReturn = [];\n\n          for (var source in this.audioSources) {\n            if (source.classes.indexOf(className) >= 0) {\n              toReturn.push(source);\n            }\n          }\n\n          return toReturn;\n        }\n      } else if (datamcidRegex.exec(selector)) {\n        var mcid = selector.split('\"')[1];\n        return this.elementsByMCID[mcid];\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"getMCID\",\n    value: function getMCID(element) {\n      return element.mcid;\n    }\n  }, {\n    key: \"setMCID\",\n    value: function setMCID(element, mcid) {\n      element.mcid = mcid;\n    }\n  }, {\n    key: \"getElementSelectorByMCID\",\n    value: function getElementSelectorByMCID(mcid) {\n      return \"[data-mcid=\\\"\".concat(mcid, \"\\\"]\");\n    }\n  }]);\n\n  return AudioContextHandler;\n}();\n\nmodule.exports = AudioContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioContextHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MediaPlayIncident = __webpack_require__(/*! ../../BaseClasses/MediaPlayIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/**\n * expects on its props:\n * - selector\n * - duration\n * - startFrom (optional)\n **/\n\nvar AudioPlayback =\n/*#__PURE__*/\nfunction (_MediaPlayIncident) {\n  _inherits(AudioPlayback, _MediaPlayIncident);\n\n  function AudioPlayback() {\n    _classCallCheck(this, AudioPlayback);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AudioPlayback).apply(this, arguments));\n  }\n\n  _createClass(AudioPlayback, [{\n    key: \"play\",\n    value: function play(millisecond) {\n      var _this = this;\n\n      if (this.element.soundLoaded === false) {\n        this.setBlock('loading sound');\n        this.element.pubSub.sub(this.id, function () {\n          _this.unblock();\n        });\n        return false;\n      }\n\n      var startFrom = 0;\n\n      if (Object.prototype.hasOwnProperty.call(this.props, 'startFrom')) {\n        startFrom = this.props.startFrom;\n      }\n\n      this.audioNode = helper.getAudioContext().createBufferSource();\n      this.audioNode.buffer = this.element.buffer;\n      this.audioNode.connect(this.element.effectsAudioNode.input);\n      this.audioNode.start(0, (millisecond + startFrom) / 1000);\n      return true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.audioNode.stop();\n    }\n  }]);\n\n  return AudioPlayback;\n}(MediaPlayIncident);\n\nmodule.exports = AudioPlayback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9BdWRpby9JbmNpZGVudHMvUGxheWJhY2suanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9BdWRpby9JbmNpZGVudHMvUGxheWJhY2suanM/NDQ2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBNZWRpYVBsYXlJbmNpZGVudCA9IHJlcXVpcmUoJy4uLy4uL0Jhc2VDbGFzc2VzL01lZGlhUGxheUluY2lkZW50Jyk7XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuLyoqXG4gKiBleHBlY3RzIG9uIGl0cyBwcm9wczpcbiAqIC0gc2VsZWN0b3JcbiAqIC0gZHVyYXRpb25cbiAqIC0gc3RhcnRGcm9tIChvcHRpb25hbClcbiAqKi9cblxudmFyIEF1ZGlvUGxheWJhY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9NZWRpYVBsYXlJbmNpZGVudCkge1xuICBfaW5oZXJpdHMoQXVkaW9QbGF5YmFjaywgX01lZGlhUGxheUluY2lkZW50KTtcblxuICBmdW5jdGlvbiBBdWRpb1BsYXliYWNrKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBdWRpb1BsYXliYWNrKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXVkaW9QbGF5YmFjaykuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQXVkaW9QbGF5YmFjaywgW3tcbiAgICBrZXk6IFwicGxheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KG1pbGxpc2Vjb25kKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5lbGVtZW50LnNvdW5kTG9hZGVkID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLnNldEJsb2NrKCdsb2FkaW5nIHNvdW5kJyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5wdWJTdWIuc3ViKHRoaXMuaWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy51bmJsb2NrKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEZyb20gPSAwO1xuXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMucHJvcHMsICdzdGFydEZyb20nKSkge1xuICAgICAgICBzdGFydEZyb20gPSB0aGlzLnByb3BzLnN0YXJ0RnJvbTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hdWRpb05vZGUgPSBoZWxwZXIuZ2V0QXVkaW9Db250ZXh0KCkuY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgICB0aGlzLmF1ZGlvTm9kZS5idWZmZXIgPSB0aGlzLmVsZW1lbnQuYnVmZmVyO1xuICAgICAgdGhpcy5hdWRpb05vZGUuY29ubmVjdCh0aGlzLmVsZW1lbnQuZWZmZWN0c0F1ZGlvTm9kZS5pbnB1dCk7XG4gICAgICB0aGlzLmF1ZGlvTm9kZS5zdGFydCgwLCAobWlsbGlzZWNvbmQgKyBzdGFydEZyb20pIC8gMTAwMCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdGhpcy5hdWRpb05vZGUuc3RvcCgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdWRpb1BsYXliYWNrO1xufShNZWRpYVBsYXlJbmNpZGVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXVkaW9QbGF5YmFjazsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioNode =\n/*#__PURE__*/\nfunction () {\n  function AudioNode() {\n    _classCallCheck(this, AudioNode);\n\n    // audio context initialisation\n    var audioContext = helper.getAudioContext();\n    this.output = audioContext.createGain();\n    this.gainNode = audioContext.createGain();\n    this.pannerNode = audioContext.createStereoPanner();\n    this.highpassNode = audioContext.createBiquadFilter();\n    this.lowpassNode = audioContext.createBiquadFilter();\n    this.lowpassNode.connect(this.highpassNode);\n    this.highpassNode.connect(this.pannerNode);\n    this.pannerNode.connect(this.gainNode);\n    this.gainNode.connect(this.output);\n    this.input = this.lowpassNode;\n  }\n\n  _createClass(AudioNode, [{\n    key: \"connect\",\n    value: function connect(master) {\n      this.output.connect(master.input);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(master) {\n      this.output.disconnect(master.input);\n    }\n  }]);\n\n  return AudioNode;\n}();\n\nmodule.exports = AudioNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9BdWRpby9oZWxwZXJzL0F1ZGlvTm9kZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0F1ZGlvL2hlbHBlcnMvQXVkaW9Ob2RlLmpzP2YyM2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL19jb3JlVXRpbHMvSGVscGVyJyk7XG5cbnZhciBoZWxwZXIgPSBuZXcgSGVscGVyKCk7XG5cbnZhciBBdWRpb05vZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBdWRpb05vZGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF1ZGlvTm9kZSk7XG5cbiAgICAvLyBhdWRpbyBjb250ZXh0IGluaXRpYWxpc2F0aW9uXG4gICAgdmFyIGF1ZGlvQ29udGV4dCA9IGhlbHBlci5nZXRBdWRpb0NvbnRleHQoKTtcbiAgICB0aGlzLm91dHB1dCA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgdGhpcy5nYWluTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgdGhpcy5wYW5uZXJOb2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZVN0ZXJlb1Bhbm5lcigpO1xuICAgIHRoaXMuaGlnaHBhc3NOb2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xuICAgIHRoaXMubG93cGFzc05vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlQmlxdWFkRmlsdGVyKCk7XG4gICAgdGhpcy5sb3dwYXNzTm9kZS5jb25uZWN0KHRoaXMuaGlnaHBhc3NOb2RlKTtcbiAgICB0aGlzLmhpZ2hwYXNzTm9kZS5jb25uZWN0KHRoaXMucGFubmVyTm9kZSk7XG4gICAgdGhpcy5wYW5uZXJOb2RlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG4gICAgdGhpcy5nYWluTm9kZS5jb25uZWN0KHRoaXMub3V0cHV0KTtcbiAgICB0aGlzLmlucHV0ID0gdGhpcy5sb3dwYXNzTm9kZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBdWRpb05vZGUsIFt7XG4gICAga2V5OiBcImNvbm5lY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdChtYXN0ZXIpIHtcbiAgICAgIHRoaXMub3V0cHV0LmNvbm5lY3QobWFzdGVyLmlucHV0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzY29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0KG1hc3Rlcikge1xuICAgICAgdGhpcy5vdXRwdXQuZGlzY29ubmVjdChtYXN0ZXIuaW5wdXQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdWRpb05vZGU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXVkaW9Ob2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Audio/helpers/AudioNode.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Audio/main.js":
/*!********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Audio/main.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AudioClip = __webpack_require__(/*! ./AudioClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\");\n\nvar AudioPlayback = __webpack_require__(/*! ./Incidents/Playback */ \"../node_modules/@kissmybutton/motorcortex/dist/Audio/Incidents/Playback.js\");\n\nmodule.exports = {\n  npm_name: \"@kissmybutton/motorcortex-soundsystem\",\n  incidents: [{\n    exportable: AudioPlayback,\n    name: \"AudioPlayback\"\n  }],\n  Clip: AudioClip,\n  audio: true\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9BdWRpby9tYWluLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQXVkaW8vbWFpbi5qcz8xZjcxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgQXVkaW9DbGlwID0gcmVxdWlyZSgnLi9BdWRpb0NsaXAnKTtcblxudmFyIEF1ZGlvUGxheWJhY2sgPSByZXF1aXJlKFwiLi9JbmNpZGVudHMvUGxheWJhY2tcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBucG1fbmFtZTogXCJAa2lzc215YnV0dG9uL21vdG9yY29ydGV4LXNvdW5kc3lzdGVtXCIsXG4gIGluY2lkZW50czogW3tcbiAgICBleHBvcnRhYmxlOiBBdWRpb1BsYXliYWNrLFxuICAgIG5hbWU6IFwiQXVkaW9QbGF5YmFja1wiXG4gIH1dLFxuICBDbGlwOiBBdWRpb0NsaXAsXG4gIGF1ZGlvOiB0cnVlXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Audio/main.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Node = __webpack_require__(/*! ../Tree/Node */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar handleResize = __webpack_require__(/*! ./decorators/handleResize */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js\");\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n\nvar Group = _decorate(null, function (_initialize, _Node) {\n  var Group =\n  /*#__PURE__*/\n  function (_Node2) {\n    _inherits(Group, _Node2);\n\n    function Group(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, Group);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Group).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.mc_plugin_npm_name = 'motor-cortex-js';\n      _this.plugin_channel_class = Channel;\n      _this.hasIncidents = true;\n\n      _this.onGroupInitialise();\n\n      _this.calculatedDuration = 0;\n      return _this;\n    }\n\n    return Group;\n  }(_Node);\n\n  return {\n    F: Group,\n    d: [{\n      kind: \"method\",\n      key: \"onGroupInitialise\",\n      value: function onGroupInitialise() {// called when group gets initialised\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddIncident\",\n      value: function handleAddIncident(target, payload) {\n        if (this.id === target) {\n          var incidentFromDescription = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromDescription */ \"../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js\");\n\n          var theIncident = incidentFromDescription(payload.incident, payload.contextData, payload.audio); // in the case that an audio clip tries to process an non-audio incident or\n          // a non-audio incident tries to process an audio incident the result from incidentFromDescription is null\n          // in such a case there should be no candidate return, so this.bypass()\n\n          if (theIncident === null) {\n            return this.bypass();\n          } else {\n            return theIncident;\n          }\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleMoveIncident\",\n      value: function handleMoveIncident(target, payload) {\n        if (this.id === target) {\n          var res = this.getLeafById(payload.incidentId, true);\n\n          if (res === null) {\n            return this.bypass();\n          }\n\n          return res;\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleRemoveIncident\",\n      value: function handleRemoveIncident(target, payload) {\n        if (this.id === target) {\n          var res = this.getLeafById(payload.incidentId, true);\n\n          if (res === null) {\n            return this.bypass();\n          }\n\n          return res;\n        } else {\n          return this.bypass();\n        }\n      }\n    }, {\n      kind: \"method\",\n      decorators: [handleResize],\n      key: \"handleResize\",\n      value: function handleResize() {}\n    }, {\n      kind: \"method\",\n      key: \"removeChild\",\n      value: function removeChild(id) {\n        this.children[id].leaf.lastWish();\n\n        _get(_getPrototypeOf(Group.prototype), \"removeChild\", this).call(this, id);\n      }\n      /**\n       * Returns an object that has the key of the npm plugin name the Channel of which manages the specific Incident\n       * With the same logic all Incidents that belong to this Group as categorised by plugin / channel on the same object\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {\n        var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var parentMillisecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        // initially it only puts itself onthe incidentsByPlugin array, exactly as the plain Incidents do\n        var incidentsByPlugin = {};\n        incidentsByPlugin['motor-cortex-js'] = [{\n          millisecond: adjustMillisecond,\n          parentMillisecond: parentMillisecond,\n          incident: this,\n          id: this.id\n        }]; // proceed to gather the contained incidents as well\n\n        for (var childId in this.children) {\n          var child = this.children[childId];\n          var incidentsToAdd = child.leaf.getIncidentsByChannel(adjustMillisecond + child.position, adjustMillisecond);\n\n          for (var key in incidentsToAdd) {\n            if (Object.prototype.hasOwnProperty.call(incidentsByPlugin, key)) {\n              incidentsByPlugin[key] = incidentsByPlugin[key].concat(incidentsToAdd[key]);\n            } else {\n              incidentsByPlugin[key] = incidentsToAdd[key];\n            }\n          }\n        }\n\n        return incidentsByPlugin;\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var childId in this.children) {\n          this.children[childId].leaf.lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n}, Node);\n\nmodule.exports = Group;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar MediaChannel = __webpack_require__(/*! ../Channels/Media/AudioPlaybackChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n/*\ndna:\n- originalId\n- context\n*/\n\n\nvar MediaPlay = _decorate(null, function (_initialize) {\n  var MediaPlay = function MediaPlay() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dna = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, MediaPlay);\n\n    _initialize(this);\n\n    // super(props);\n    this.attrs = attrs;\n    this.props = props;\n    this.dna = dna;\n    this.context = dna.context;\n    this.mcid = dna.mcid;\n    this.id = props.id || helper.getAnId();\n    this.modelId = props.modelId; // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n    // is set to true so we prevent multiple executions of the onGetContext method\n\n    this.gotContext = false;\n    /*\n    these are the default values that define channeling for the default Incidents. These values get ovewriden through\n    the loadPlugin method of MC with the values found on the main.js file of the plugin\n    */\n\n    this.plugin_channel_class = MediaChannel;\n    this.mc_plugin_npm_name = \"motor-cortex-js-media-playback\";\n\n    if (Object.prototype.hasOwnProperty.call(props, \"plugin_channel_class\")) {\n      this.plugin_channel_class = props.plugin_channel_class;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(props, \"mc_plugin_npm_name\")) {\n      this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n    }\n\n    this.hasIncidents = false;\n    /**\n     * @member {boolean} - if autoGenerated is set to true, it means that this Incident has been auto-generated by its parent on initialisation.\n     * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them\n     * on specific points on their timeline.\n     */\n\n    this.autoGenerated = false;\n    this.onInitialise(attrs, props);\n  };\n\n  return {\n    F: MediaPlay,\n    d: [{\n      kind: \"get\",\n      key: \"selector\",\n      value: function selector() {\n        return this.props.selector;\n      }\n    }, {\n      kind: \"get\",\n      key: \"element\",\n      value: function element() {\n        return this.context.getElementByMCID(this.mcid);\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        // if the Incident belongs to a fragmented context there absolutely\n        // no reason to run the getContext method of it\n        try {\n          if (this.context.fragment === true) {\n            return;\n          }\n\n          if (!this.gotContext) {\n            this.onGetContext();\n            this.gotContext = true;\n          }\n        } catch (e) {\n          console.log(e);\n          console.log(this.mcid); // console.log(this.context);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {}\n    }, {\n      kind: \"method\",\n      key: \"onInitialise\",\n      value: function onInitialise() {\n        helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n      }\n      /**\n       * Method called on progress of the timed incident.\n       * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n       * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds) {} // eslint-disable-line no-unused-vars\n\n      /**\n       * starts the execution of the media from the specified millisecond\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"play\",\n      value: function play(millisecond) {\n        return true;\n      }\n      /**\n       * stops the execution of the media\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"stop\",\n      value: function stop() {}\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n});\n\nmodule.exports = MediaPlay;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n/* @handleResize is missing from Incident. The reason is that when the\nExtendableClip asks for the under-resize candidates via the \"checkResize\" pipe\nmessage the message will never be handled by an Incident directly but rather via\nits corresponding ElementSplitter\n*/\n\n\nvar setBlock = __webpack_require__(/*! ./decorators/block */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\");\n\nvar unblock = __webpack_require__(/*! ./decorators/unblock */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\");\n/*\ndna:\n- originalId\n- context\n*/\n\n\nvar MonoIncident = _decorate(null, function (_initialize) {\n  var MonoIncident = function MonoIncident() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dna = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, MonoIncident);\n\n    _initialize(this);\n\n    // super(props);\n    this.attrs = attrs;\n    this.props = props;\n    this.dna = dna;\n    this.context = dna.context;\n    this.mcid = dna.mcid;\n    this.id = props.id || helper.getAnId();\n    this.modelId = props.modelId; // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n    // is set to true so we prevent multiple executions of the onGetContext method\n\n    this.gotContext = false;\n    /*\n    these are the default values that define channeling for the default Incidents. These values get ovewriden through\n    the loadPlugin method of MC with the values found on the main.js file of the plugin\n    */\n\n    this.plugin_channel_class = Channel;\n    this.mc_plugin_npm_name = \"motor-cortex-js\";\n\n    if (Object.prototype.hasOwnProperty.call(props, \"plugin_channel_class\")) {\n      this.plugin_channel_class = props.plugin_channel_class;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(props, \"mc_plugin_npm_name\")) {\n      this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n    }\n\n    this.hasIncidents = false;\n    /*\n    initialValues is an object holding the autmatically computed initial values of the animatedAttrs\n    (if any). The initialValues are calculated by the AttributesChannel (only Incidents belonging to\n    an AttributesChannel have initialValues).\n    The keys set of this object is identical to the object attrs.animatedAttrs\n    The only thing the generic AttributesChannel can't calculate is the initial value of an animated attr\n    of a specific element when there are no other Incidents entered on its lanes yet. These values are\n    the \"scratchValues\" and they are strongly dependend on the nature of the lib. E.g. for a CSS animation\n    what we are looking for can be found on the computedStyle.\n    */\n\n    this.initialValues = {};\n    /**\n     * @member {boolean} - if autoGenerated is set to true, it means that this MonoIncident has been auto-generated by its parent on initialisation.\n     * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them\n     * on specific points on their timeline.\n     */\n\n    this.autoGenerated = false;\n    this.onInitialise(attrs, props);\n  };\n\n  return {\n    F: MonoIncident,\n    d: [{\n      kind: \"get\",\n      key: \"selector\",\n      value: function selector() {\n        return this.props.selector;\n      }\n      /* shortcuts for attrs.attrs and attrs.animatedAttrs */\n\n    }, {\n      kind: \"get\",\n      key: \"animAttributes\",\n      value: function animAttributes() {\n        return this.attrs.animatedAttrs;\n      }\n      /**\n      This method shoudl be overwritten by the Incidents of the plugins. The method returns\n      the initial value that the element of it has as the library calculates / defines them. The\n      returned value represents the very initial value of the element's attribute before\n      any Incident that alters it gets added.\n       @returns {mixed} - the initial value of the element's attribute just when the HTML & CSS\n      of the Clip gets rendered\n      */\n\n    }, {\n      kind: \"method\",\n      key: \"getScratchValue\",\n      value: function getScratchValue() {\n        return 0;\n      }\n    }, {\n      kind: \"get\",\n      key: \"element\",\n      value: function element() {\n        if (this.contex === null) {\n          return [];\n        }\n\n        if (this.context.getElementByMCID) {\n          return this.context.getElementByMCID(this.mcid);\n        }\n\n        return this.context.getElements(this.selector)[0];\n      }\n    }, {\n      kind: \"get\",\n      key: \"attributeKey\",\n      value: function attributeKey() {\n        return Object.keys(this.attrs.animatedAttrs)[0];\n      }\n    }, {\n      kind: \"get\",\n      key: \"targetValue\",\n      value: function targetValue() {\n        return this.animAttributes[this.attributeKey];\n      }\n    }, {\n      kind: \"method\",\n      key: \"getElementAttribute\",\n      value: function getElementAttribute(attr) {\n        return this.element.getAttribute(attr);\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"setInitialValue\",\n      value: function setInitialValue(value) {\n        this.initialValues[this.attributeKey] = value;\n      }\n    }, {\n      kind: \"get\",\n      key: \"initialValue\",\n      value: function initialValue() {\n        var attr = this.attributeKey;\n        return this.initialValues[attr];\n      }\n    }, {\n      kind: \"method\",\n      key: \"getInitialValue\",\n      value: function getInitialValue() {\n        var attr = this.attributeKey;\n        return this.initialValues[attr];\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        // if the MonoIncident belongs to a fragmented context there absolutely\n        // no reason to run the getContext method of it\n        try {\n          if (this.context.fragment === true) {\n            return;\n          }\n\n          if (!this.gotContext) {\n            this.onGetContext();\n            this.gotContext = true;\n          }\n        } catch (e) {\n          console.log(e);\n          console.log(this.mcid); // console.log(this.context);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {}\n    }, {\n      kind: \"method\",\n      key: \"onInitialise\",\n      value: function onInitialise() {\n        helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n      }\n      /**\n       * Method called on progress of the timed incident.\n       * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n       * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds) {// eslint-disable-line no-unused-vars\n      }\n    }, {\n      kind: \"method\",\n      decorators: [setBlock],\n      key: \"setBlock\",\n      value: function setBlock() {}\n    }, {\n      kind: \"method\",\n      decorators: [unblock],\n      key: \"unblock\",\n      value: function unblock() {}\n    }]\n  };\n});\n\nmodule.exports = MonoIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction block(pld) {\n  pld.descriptor.value = function (description) {\n    this.blockID = helper.getAnId();\n    this.DescriptiveIncident.putMessageOnPipe('setBlock', {\n      id: this.blockID,\n      description: description,\n      incidentId: this.DescriptiveIncident.id,\n      realIncidentId: this.id\n    }, 'rootClip', {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n  };\n}\n\nmodule.exports = block;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9CYXNlQ2xhc3Nlcy9kZWNvcmF0b3JzL2Jsb2NrLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQmFzZUNsYXNzZXMvZGVjb3JhdG9ycy9ibG9jay5qcz9jOGMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIF9UUkVFQ09OU1QgPSByZXF1aXJlKCcuLi8uLi9UcmVlL19DT05TVCcpO1xuXG5mdW5jdGlvbiBibG9jayhwbGQpIHtcbiAgcGxkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICB0aGlzLmJsb2NrSUQgPSBoZWxwZXIuZ2V0QW5JZCgpO1xuICAgIHRoaXMuRGVzY3JpcHRpdmVJbmNpZGVudC5wdXRNZXNzYWdlT25QaXBlKCdzZXRCbG9jaycsIHtcbiAgICAgIGlkOiB0aGlzLmJsb2NrSUQsXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBpbmNpZGVudElkOiB0aGlzLkRlc2NyaXB0aXZlSW5jaWRlbnQuaWQsXG4gICAgICByZWFsSW5jaWRlbnRJZDogdGhpcy5pZFxuICAgIH0sICdyb290Q2xpcCcsIHtcbiAgICAgIHNlbGZFeGVjdXRlOiB0cnVlLFxuICAgICAgZGlyZWN0aW9uOiBfVFJFRUNPTlNULl9ESVJFQ1RJT05TLl9VUFxuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJsb2NrOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/block.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction handleResize(pld) {\n  pld.descriptor.value = function (target, payload) {\n    // eslint-disable-line no-unused-vars\n    if (this.id === target) {\n      return this;\n    } else {\n      return this.bypass();\n    }\n  };\n}\n\nmodule.exports = handleResize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9CYXNlQ2xhc3Nlcy9kZWNvcmF0b3JzL2hhbmRsZVJlc2l6ZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Jhc2VDbGFzc2VzL2RlY29yYXRvcnMvaGFuZGxlUmVzaXplLmpzP2QzYjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGhhbmRsZVJlc2l6ZShwbGQpIHtcbiAgcGxkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXlsb2FkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGlmICh0aGlzLmlkID09PSB0YXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5ieXBhc3MoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFuZGxlUmVzaXplOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/handleResize.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction unblock(pld) {\n  pld.descriptor.value = function (description) {\n    this.DescriptiveIncident.putMessageOnPipe('unBlock', {\n      id: this.blockID\n    }, 'rootClip', {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n  };\n}\n\nmodule.exports = unblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9CYXNlQ2xhc3Nlcy9kZWNvcmF0b3JzL3VuYmxvY2suanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9CYXNlQ2xhc3Nlcy9kZWNvcmF0b3JzL3VuYmxvY2suanM/YTkxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL19jb3JlVXRpbHMvSGVscGVyJyk7XG5cbnZhciBoZWxwZXIgPSBuZXcgSGVscGVyKCk7XG5cbnZhciBfVFJFRUNPTlNUID0gcmVxdWlyZSgnLi4vLi4vVHJlZS9fQ09OU1QnKTtcblxuZnVuY3Rpb24gdW5ibG9jayhwbGQpIHtcbiAgcGxkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICB0aGlzLkRlc2NyaXB0aXZlSW5jaWRlbnQucHV0TWVzc2FnZU9uUGlwZSgndW5CbG9jaycsIHtcbiAgICAgIGlkOiB0aGlzLmJsb2NrSURcbiAgICB9LCAncm9vdENsaXAnLCB7XG4gICAgICBzZWxmRXhlY3V0ZTogdHJ1ZSxcbiAgICAgIGRpcmVjdGlvbjogX1RSRUVDT05TVC5fRElSRUNUSU9OUy5fVVBcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmJsb2NrOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/decorators/unblock.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Channel = __webpack_require__(/*! ../Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar lanesHandler = __webpack_require__(/*! ./LanesHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js\");\n\nvar AttributeChannel =\n/*#__PURE__*/\nfunction (_Channel) {\n  _inherits(AttributeChannel, _Channel);\n\n  function AttributeChannel(props) {\n    var _this;\n\n    _classCallCheck(this, AttributeChannel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AttributeChannel).call(this, props));\n    /*\n    comboAttributes are attributes of type object, holding a number of other attributes.\n    E.g. CSS \"transform\" attribute is a combo that holds a number of other attributes such as:\n    translateX, translateY, etc. The lanes handler keeps just one lane for the combo attrs\n    in an object format keeping the value of each attribute at any given point.\n    Combo attributes are passed on the constructor of the Channel in the format:\n    props.comboAttributes: {\n        transition: ['translateX', 'translateY', ...],\n        <something_else>: ['<attrName1>', '<attrName2>', ...]\n    }\n    */\n\n    _this.comboAttributes = {};\n    /**\n     * For incidents that do not have animatedAttrs there should be only one lane per element.\n     * The attributes Channel will use a default (fake), fixed attribute for this cases so it always ends\n     * up with just one lane per element: <element_id>_<this.fixedAttributeName>\n     */\n\n    _this.fixedAttributeName = \"_\";\n\n    if (props.comboAttributes != null) {\n      _this.comboAttributes = props.comboAttributes;\n    }\n\n    _this.LanesHandler = new lanesHandler({\n      comboAttributes: _this.comboAttributes,\n      runTimeInfo: _this.runTimeInfo\n    }); // this.type = \"attributes\";\n\n    return _this;\n  }\n\n  _createClass(AttributeChannel, [{\n    key: \"setComboAttributes\",\n    value: function setComboAttributes(comboAttributes) {\n      this.comboAttributes = comboAttributes;\n      this.LanesHandler = new lanesHandler({\n        comboAttributes: this.comboAttributes\n      });\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      this.LanesHandler._resize(durationFraction);\n    }\n    /* *******************************************************\n     DECISION METHODS\n     ********************************************************/\n\n    /**\n     * All of the incidents coming to this method are element-attribute incidents meaning that they only\n     * target just one element and also they include just a single attribute on the incident.attrs.animatedAttrs\n     * object\n     *\n     * @param {array} incidents - A collection of Incidents in the form:\n     * {\n     *  millisecond\n     *  incident\n     *  id\n     * }\n     * @param {string} type - can be either \"all-or-nothing\" (default) or \"keep-passing\". If type = \"all-or-nothing\"\n     *  the addition passes only if all incidents pass. If type = \"keep-passing\" the method will still return true\n     *  but will also include an errors array on its return and also will only include the success callbacks on\n     *  the execute key of its return\n     * @returns either:\n     *   {\n     *       result:true,\n     *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n     *   }\n     *   or\n     *   {\n     *       result: false,\n     *       errors\n     *   }\n     */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      var _this2 = this;\n\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"all-or-nothing\";\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      /* an array where we keep all affected lanes so we can slip on them at the end.\n      The format for each affected lane we keep is:\n      {\n          mcid: mcid,\n          attribute: attribute\n      }\n      */\n\n      var affectedLanes = []; // while the LanesHandlerSanbox adds lane items it makes decisions of which permanent changes should be made to\n      // the permanent and pre-existing objects it handles, such as changes on the initial values of existing animations.\n      // Because of the fact the LanesSandboxHandler is only there for testing we don't want to execute these changes\n      // during checks but still we need to know them on success. For this, the onSuccessActions array holds all executable\n      // functions retured by various LanesHandlerSanbox functions so it can execute them on success.\n\n      var onSuccessActions = [];\n      var conflicts = [];\n\n      var _loop = function _loop(i) {\n        var incidentConflicts = false; // a boolean that keeps the information whether the incident conflicts or not\n\n        var laneItem = incidents[i];\n        var incident = laneItem.incident;\n        var mcid = incident.mcid;\n        var attribute = incident.attribute || _this2.fixedAttributeName;\n        LanesHandlerSandbox.laneExists(mcid, attribute); // create the lane if it doesn't exist already\n\n        affectedLanes.push({\n          mcid: mcid,\n          attribute: attribute\n        }); // **** if the lane did exist before the new addition check for conflicts\n\n        var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(laneItem, mcid, attribute); // helper.log(overlappingAnim)\n\n        if (overlappingAnims.length > 0) {\n          incidentConflicts = true;\n          conflicts.push({\n            type: 'unauthorised, overlapping incidents on the same element',\n            meta: {\n              element_mcid: mcid,\n              attribute: attribute,\n              incident: laneItem,\n              overlappingAnims: overlappingAnims\n            }\n          });\n        }\n\n        if (!incidentConflicts) {\n          onSuccessActions.push(function () {\n            LanesHandlerSandbox.addElementToLane(mcid, attribute, laneItem.millisecond, incident);\n\n            incident._onGetContextOnce();\n          });\n        }\n      };\n\n      for (var i = 0; i < incidents.length; i++) {\n        _loop(i);\n      } // end for each incident\n      // if we have conflicts and the type = \"all-or-nothing\"\n\n\n      if (conflicts.length > 0 && type === \"all-or-nothing\") {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        // as soon as we want all passing additions to get applied the Lanes Handler will create a callback that will be passed to the result.\n        // This callback will apply all passing additions.\n        // success message\n        var that = this;\n\n        var exec = function exec() {\n          for (var i = 0; i < onSuccessActions.length; i++) {\n            onSuccessActions[i]();\n          }\n\n          that.LanesHandler.applySandboxChanges(LanesHandlerSandbox);\n        };\n\n        return {\n          result: true,\n          errors: conflicts,\n          execute: exec\n        };\n      }\n    }\n    /**\n     * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n     * that apply the change\n     * @param {array} incidents - the list of the lane items to edit in an array format [object, object, ...]\n     * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n     * @returns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidents, millisecondsDelta) {\n      // console.log(incidents);\n      var affectedIncidentIds = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        affectedIncidentIds.push(incidents[i].id);\n      }\n\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      var conflicts = [];\n      var affectedLanes = []; // for each of the affectedAnimations\n\n      for (var _i = 0; _i < incidents.length; _i++) {\n        var incident = incidents[_i].incident;\n        var incidentId = incident.id;\n        var mcid = incidents[_i].incident.mcid;\n        var attribute = incidents[_i].incident.attribute || this.fixedAttributeName;\n        var lane = LanesHandlerSandbox.getLane(mcid, attribute);\n        var laneAttrs = {\n          mcid: mcid,\n          attribute: attribute // check for conflicts and edit lane items millisecond\n\n        };\n\n        for (var k = 0; k < lane.length; k++) {\n          if (lane[k].id === incidentId) {\n            affectedLanes.push(laneAttrs);\n            var affectedAnim = lane[k];\n            var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n            testLaneElement.millisecond += millisecondsDelta;\n            testLaneElement.incident = LanesHandlerSandbox.incidentsById._get(testLaneElement.id);\n            var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, mcid, attribute, affectedIncidentIds);\n\n            if (overlappingAnims.length > 0) {\n              conflicts.push({\n                type: 'anauthorised, overlapping animations on the same element',\n                meta: {\n                  element_mcid: mcid,\n                  attribute: attribute,\n                  newAnimation: testLaneElement,\n                  overlappingAnims: overlappingAnims\n                }\n              });\n            }\n\n            break;\n          } // end of if we found the specific animation on the lane's sequence\n\n        } // end of each lane's item\n\n      } // end for each affected animation's id\n\n\n      if (conflicts.length > 0) {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        var that = this;\n\n        var exec = function exec() {\n          that.LanesHandler.updateLane(affectedIncidentIds, millisecondsDelta);\n        };\n\n        return {\n          result: true,\n          execute: exec\n        };\n      }\n    }\n    /**\n     * @param {array} incidents - [{id, start, end, startDelta}]\n     * @param {boolean} fullChannelResize - if set to true then the full html channel is resizing. This is a special case as in\n     *  that case no checks should be actually perfomed nor the projected candidate should be applied directly\n     **/\n\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      var fullChannelResize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var excludeIdsFromCheck = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        excludeIdsFromCheck.push(incidents[i].id);\n      }\n\n      var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n      var conflicts = [];\n      var affectedLanes = []; // for each of the incidents passed\n\n      for (var _i2 = 0; _i2 < incidents.length; _i2++) {\n        // get the ContextAwareIncident\n        var incident = this.LanesHandler.incidentsById._get(incidents[_i2].id);\n\n        var mcid = incident.mcid;\n        var attribute = incident.attribute || this.fixedAttributeName;\n        var lane = LanesHandlerSandbox.getLane(mcid, attribute);\n        var laneAttrs = {\n          mcid: mcid,\n          attribute: attribute\n        };\n        var testDuration = incidents[_i2].end - incidents[_i2].start; // check for conflicts and edit lane items millisecond\n\n        for (var k = 0; k < lane.length; k++) {\n          if (lane[k].id === incidents[_i2].id) {\n            affectedLanes.push(laneAttrs);\n\n            if (fullChannelResize === false) {\n              var affectedAnim = lane[k];\n              var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n              testLaneElement.millisecond += incidents[_i2].startDelta;\n              testLaneElement.incident = LanesHandlerSandbox.incidentsById._get(testLaneElement.id);\n              var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, laneAttrs.mcid, laneAttrs.attribute, excludeIdsFromCheck, testDuration);\n\n              if (overlappingAnims.length > 0) {\n                conflicts.push({\n                  type: 'anauthorised overlapping animations on the same element',\n                  meta: {\n                    element_mcid: laneAttrs.mcid,\n                    attribute: laneAttrs.attribute,\n                    newAnimation: testLaneElement,\n                    overlappingAnims: overlappingAnims\n                  }\n                });\n              }\n            }\n\n            break;\n          } // end of if we found the specific animation on the lane's sequence\n\n        } // end of each lane's item\n\n      } // end for each affected animation's id\n\n\n      if (conflicts.length > 0) {\n        return {\n          result: false,\n          errors: conflicts\n        };\n      } else {\n        var that = this;\n\n        var exec = function exec() {\n          // updateLanes (only this time animation by animation as the milliseconds delta is not standard for all)\n          // as soon as there are no conflicts the Lanes Handler applies the changes before sending over the\n          // success message\n          for (var _i3 = 0; _i3 < incidents.length; _i3++) {\n            that.LanesHandler.updateLane([incidents[_i3].id], incidents[_i3].startDelta);\n          }\n        };\n\n        return {\n          execute: exec,\n          result: true\n        };\n      }\n    }\n    /**\n     *\n     */\n\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(removedAnimations) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // eslint-disable-line no-unused-vars\n      var removedAnimationIds = [];\n\n      for (var i = 0; i < removedAnimations.length; i++) {\n        removedAnimationIds.push(removedAnimations[i].id);\n      }\n\n      var that = this;\n\n      var exec = function exec() {\n        that.LanesHandler.deleteAnimations(removedAnimationIds);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     * Slips to just one lane forwards\n     * @param {array} lane - the lane to slip into\n     * @param {object} laneData - an object with keys: attribute & mcid\n     * @param {int} currentMillisecond - the millisecond the slip starts from\n     * @param {int} millisecond - the target millisecond of the slip\n     * @param {string} contextId - the contextId of the Incidents to slip\n     */\n\n  }, {\n    key: \"slipIntoLaneForwards\",\n    value: function slipIntoLaneForwards(lane, laneData, currentMillisecond, millisecond, contextId) {\n      var forceReset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      // console.log(lane, currentMillisecond, millisecond);\n      var that = this;\n\n      var participatingAnims = _filter(lane, function (laneItem) {\n        return laneItem.millisecond + that.incidentsById._get(laneItem.id).duration >= currentMillisecond && laneItem.millisecond + that.incidentsById._get(laneItem.id).duration <= millisecond || // it ends after currentMillisecond and before target millisecond\n        that.incidentsById._get(laneItem.id).duration + laneItem.millisecond >= millisecond && laneItem.millisecond <= millisecond; // or it ends after the target millisecond but also starts before it\n      });\n\n      if (participatingAnims.length == 0) {\n        if (forceReset === true) {\n          var firstIncident = this.incidentsById._get(lane[0].id);\n\n          firstIncident.onProgress(0, 0, contextId);\n        }\n\n        return true;\n      }\n\n      participatingAnims = _sortBy(participatingAnims, [function (laneItem) {\n        return laneItem.millisecond;\n      }]); // We only care about the last (in chronological order) Incident, as this\n      // will define the final value\n\n      var lastIndex = participatingAnims.length - 1;\n\n      var participatingAnim = this.incidentsById._get(participatingAnims[lastIndex].id);\n\n      var startMillisecond = participatingAnims[lastIndex].millisecond; // if the animation ends before the target millisecond\n\n      if (participatingAnim.duration + startMillisecond <= millisecond) {\n        // and it's the last one on the row\n        participatingAnim.onProgress(1, participatingAnim.duration, contextId);\n      } else {\n        // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n        // and store this info somewhere\n        var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n        participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond, contextId);\n      }\n    }\n    /**\n     * Slips to just one lane backwards\n     * @param {array} lane - the lane to slip into\n     * @param {object} laneData - an object with keys: attribute & mcid\n     * @param {int} currentMillisecond - the millisecond the slip starts from\n     * @param {int} millisecond - the target millisecond of the slip\n     * @param {string} contextId - the contextId of the Incidents to slip\n     */\n\n  }, {\n    key: \"slipToLaneBackwards\",\n    value: function slipToLaneBackwards(lane, laneData, currentMillisecond, millisecond, contextId) {\n      var forceReset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      // we take all Animations that are either currently running or\n      // they end after the destination point\n      // helper.log('<------');\n      var that = this;\n\n      var participatingAnims = _filter(lane, function (laneItem) {\n        var laneItemEnd = that.incidentsById._get(laneItem.id).duration + laneItem.millisecond;\n        return laneItemEnd <= millisecond && laneItemEnd >= currentMillisecond || // they end in the hot area\n        laneItem.millisecond >= currentMillisecond && laneItem.millisecond <= millisecond || // they start in the hot area\n        laneItem.millisecond < currentMillisecond && laneItemEnd > millisecond; // they overlap the hot area\n      });\n\n      if (participatingAnims.length == 0) {\n        if (participatingAnims.length == 0) {\n          if (forceReset === true) {\n            var firstIncident = this.incidentsById._get(lane[lane.length - 1].id);\n\n            firstIncident.onProgress(1, firstIncident.duration, contextId);\n          }\n\n          return true;\n        }\n\n        return true;\n      }\n\n      participatingAnims = _sortBy(participatingAnims, [function (laneItem) {\n        return laneItem.millisecond;\n      }]); // We only care about the first (in chronological order) Incident, as this\n      // will define the final value of the backwards move\n\n      var lastIndex = 0;\n\n      var participatingAnim = this.incidentsById._get(participatingAnims[lastIndex].id);\n\n      var startMillisecond = participatingAnims[lastIndex].millisecond; // if the animation starts after the target millisecond\n\n      if (startMillisecond >= millisecond) {\n        participatingAnim.onProgress(0, 0, contextId);\n      } else {\n        // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n        // and store this info somewhere\n        var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n        participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond, contextId);\n      }\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {sring} contextId - the context id to \"move\"\n     @param {boolean} forceReset - set to true if status recalc is needed after edit\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      // step 1: iterate through all lanes\n      var laneKeys = this.lanes._keys();\n\n      for (var i = 0; i < laneKeys.length; i++) {\n        var laneid = laneKeys[i];\n\n        var lane = this.lanes._get(laneid);\n\n        var laneData = helper.getMCIDandAttrOutOfLaneKey(laneid);\n\n        if (from <= to) {\n          this.slipIntoLaneForwards(lane, laneData, from, to, contextId, forceReset);\n        } else if (from > to) {\n          this.slipToLaneBackwards(lane, laneData, from, to, contextId, forceReset);\n        }\n      }\n    }\n  }, {\n    key: \"lanes\",\n    get: function get() {\n      return this.LanesHandler.lanes;\n    }\n  }, {\n    key: \"incidentsById\",\n    get: function get() {\n      return this.LanesHandler.incidentsById;\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return \"attributes\";\n    }\n  }]);\n\n  return AttributeChannel;\n}(Channel);\n\nmodule.exports = AttributeChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar _findIndex = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.findindex/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper({\n  logLevel: 4\n});\n\nvar Collection = __webpack_require__(/*! ./helpers/Collection */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js\");\n\nvar SandboxLanes = __webpack_require__(/*! ./helpers/SandboxLanes */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js\");\n\nvar SandboxCollection = __webpack_require__(/*! ./helpers/SandboxCollection */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxIncidentsById = __webpack_require__(/*! ./helpers/SandboxIncidentsById */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js\");\n\nvar setInitialValueForCombo = __webpack_require__(/*! ./helpers/ComboAttrsCascading */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js\");\n\nvar LanesHandler =\n/*#__PURE__*/\nfunction () {\n  function LanesHandler() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LanesHandler);\n\n    /*\n     * Keeps the lanes of the Channel in the form:\n     * {\n     *  <motorcortex-id>_<attribute>: [\n     *      {\n     *          id: the id of the Incident\n     *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n     *      }\n     *  ]\n     * }\n     /** @type {{}}\n     */\n    this.lanes = new Collection({});\n\n    if (props.lanes) {\n      this.lanes = props.lanes;\n    }\n\n    this.comboAttributes = {};\n\n    if (props.comboAttributes != null) {\n      this.comboAttributes = props.comboAttributes;\n    }\n\n    this.runTimeInfo = props.runTimeInfo;\n    /*\n    Keeps an indexing of the lanes each Animation belongs to. The form is the following:\n    belongingLaneKeysByAnimationId: {\n        <animation_id>: [laneKey1, laneKey2, ...],\n        <animation_id>: [laneKey2, laneKey3, ...],\n        ...\n    }\n     */\n\n    this.belongingLaneKeysByAnimationId = new Collection({});\n\n    if (props.belongingLaneKeysByAnimationId) {\n      this.belongingLaneKeysByAnimationId = props.belongingLaneKeysByAnimationId;\n    }\n    /*\n    keeps all Incidents (that appear on the lanes) mapped on a key - value pair\n    object on which the keys are the ids and the values the corresponding Incidents.\n    The Incidents of this object are ContextAwareIncidents\n    */\n\n\n    this.incidentsById = new Collection({});\n\n    if (props.incidentsById) {\n      this.incidentsById = props.incidentsById;\n    }\n  }\n  /**\n   * This method resizes all the lanes of the Lanes Handler by the durationFraction provided.\n   * No checks are performed.\n   * This method is been invoked in cases where a full Clip gets resized, so no conflict checks need to\n   * run.\n   * @param {float} durationFration: the fraction between the new duration and the current\n   */\n\n\n  _createClass(LanesHandler, [{\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      var keys = this.lanes._keys();\n\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n\n        var theLane = this.lanes._get(key);\n\n        for (var _i = 0; _i < theLane.length; _i++) {\n          theLane[_i].millisecond = theLane[_i].millisecond * durationFraction;\n        }\n      }\n    }\n    /**\n     * it creates a new LanesHandler that acts as a sanbox for testing changes\n     */\n\n  }, {\n    key: \"createTestLanesSanbox\",\n    value: function createTestLanesSanbox() {\n      var props = {\n        lanes: new SandboxLanes(this.lanes._export()),\n        belongingLaneKeysByAnimationId: new SandboxCollection(this.belongingLaneKeysByAnimationId._export()),\n        incidentsById: new SandboxIncidentsById(this.incidentsById._export())\n      };\n\n      if (this.comboAttributes) {\n        props.comboAttributes = this.comboAttributes;\n      }\n\n      return new LanesHandler(props);\n    }\n  }, {\n    key: \"getLanesCopy\",\n    value: function getLanesCopy(lane) {\n      var laneToReturn = [];\n\n      for (var i = 0; i < lane.length; i++) {\n        laneToReturn.push({\n          id: lane[i].id,\n          millisecond: lane[i].millisecond * 1\n        });\n      }\n\n      return laneToReturn;\n    }\n  }, {\n    key: \"getLaneElementsClone\",\n    value: function getLaneElementsClone(laneElement) {\n      return {\n        id: laneElement.id,\n        millisecond: laneElement.millisecond * 1\n      };\n    }\n  }, {\n    key: \"applySandboxChanges\",\n    value: function applySandboxChanges(SanboxObject) {\n      this.lanes = new Collection(SanboxObject.lanes._export());\n      this.belongingLaneKeysByAnimationId = new Collection(SanboxObject.belongingLaneKeysByAnimationId._export());\n      this.incidentsById = new Collection(SanboxObject.incidentsById._export());\n    }\n  }, {\n    key: \"getLane\",\n    value: function getLane(mcid, attr) {\n      return this.lanes._get(helper.getLaneKey(mcid, attr));\n    }\n    /**\n     * return true if lane exists or false otherwise\n     * @param {String} mcid\n     * @param {String} attr\n     * @param {boolean} ifNotCreateIt - if is set to true and the lane doesn't exist it creates it but still returning false\n     */\n\n  }, {\n    key: \"laneExists\",\n    value: function laneExists(mcid, attr) {\n      var ifNotCreateIt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var laneKey = helper.getLaneKey(mcid, attr);\n\n      if (!this.lanes._hasOwnProperty(laneKey)) {\n        if (ifNotCreateIt) {\n          this.lanes._set(laneKey, []);\n        }\n\n        return false;\n      } else {\n        return true;\n      }\n    }\n    /**\n     * @param {Object} newAnim - an object of the form of a lane item (with keys \"millisecond\" and \"incident\"\n     * @param {string} mcid\n     * @param {String} attr\n     * @param {array} excludeIdsFromCheck - optional. If exists it excludes all the ids of this array from check. This\n     *  parameter has been added for the edit checks where an animation might overlap another animation that participates on\n     *  the move, something that should not happen as the edited animations pre-existed without conflicts and the move of all\n     *  of them together guarantees that there is going to be no conflict between them even after the edit\n     * @param {int} testDuration - optional. This parameter is used when the channel needs to addcheck overlaps after duration\n     *  edits, so the testDuration is passed (we don't want to polute the original animation object as it refers to the real one)\n     * @retuns {array} - a list of all overlapping animations of the lane\n     */\n\n  }, {\n    key: \"getOverlappingAnims\",\n    value: function getOverlappingAnims(newAnim, mcid, attr) {\n      var excludeIdsFromCheck = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      var testDuration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var that = this;\n\n      var overlappingAnims = _filter(this.lanes._get(helper.getLaneKey(mcid, attr)), function (existingAnim) {\n        var durationToUseOnChecks = newAnim.incident.duration;\n\n        if (testDuration != null) {\n          durationToUseOnChecks = testDuration;\n        }\n\n        return existingAnim.id != newAnim.incident.id && excludeIdsFromCheck.indexOf(existingAnim.id) < 0 && ( // existing anim starts within the new anim's extend\n        existingAnim.millisecond >= newAnim.millisecond && existingAnim.millisecond < durationToUseOnChecks + newAnim.millisecond || // or ends within the new anim's extend\n        existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration > newAnim.millisecond && existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration <= durationToUseOnChecks + newAnim.millisecond // or it starts before and ends after the new anim's extend\n        || existingAnim.millisecond < newAnim.millisecond && existingAnim.millisecond + that.incidentsById._get(existingAnim.id).duration > durationToUseOnChecks + newAnim.millisecond);\n      });\n\n      return overlappingAnims;\n    }\n    /**\n     * it justs adds the lane item to the lane and adjusts the initial values of the Anims in sequence\n     * No checks are performed, just execution.\n     * @param {String} mcid\n     * @param {String} attr\n     * @param {int} millisecond\n     * @param {Object} incident\n     */\n\n  }, {\n    key: \"addElementToLane\",\n    value: function addElementToLane(mcid, attr, millisecond, incident) {\n      var _this = this;\n\n      var laneKey = helper.getLaneKey(mcid, attr);\n\n      this.incidentsById._set(incident.id, incident);\n\n      var laneElement = {\n        millisecond: millisecond,\n        id: incident.id\n      };\n      this.laneExists(mcid, attr, true);\n\n      var theLane = this.lanes._get(laneKey);\n\n      theLane.push(laneElement);\n      theLane = _sortBy(theLane, ['millisecond']);\n\n      this.lanes._set(laneKey, theLane); // indexing stuff\n\n\n      if (!this.belongingLaneKeysByAnimationId._hasOwnProperty(incident.id)) {\n        this.belongingLaneKeysByAnimationId._set(incident.id, []);\n      }\n\n      this.belongingLaneKeysByAnimationId._get(incident.id).push(laneKey); // indexing\n\n\n      var newAnimsIndex = _findIndex(theLane, function (item) {\n        return item.id === incident.id;\n      }); // helper.log(newAnimsIndex);\n      // step 1: set the intial values of the new Animation\n\n\n      if (newAnimsIndex === 0) {\n        // if the newly entered animation is the first of the lane\n        if (theLane.length > 1) {\n          // and it has other animations too\n          incident.setInitialValue(this.incidentsById._get(theLane[1].id).initialValue);\n        } else {\n          // else take it directly from the dom\n          var callback = function callback() {};\n\n          if (Object.prototype.hasOwnProperty.call(this.comboAttributes, attr)) {\n            callback = function callback(value) {\n              setInitialValueForCombo(theLane, _this.incidentsById, value, 0);\n            };\n          }\n\n          incident.setInitialValue(incident.calcInitialValue(callback));\n        }\n      } else {\n        incident.setInitialValue(this.incidentsById._get(theLane[newAnimsIndex - 1].id).animatedAttributeValue);\n      }\n      /* if the attribute of the lane is a compo attribute */\n\n\n      if (Object.prototype.hasOwnProperty.call(this.comboAttributes, attr)) {\n        var incidentInitialValues = incident.initialValue;\n        setInitialValueForCombo(theLane, this.incidentsById, incidentInitialValues, newAnimsIndex);\n      }\n\n      var onSuccessAction = function onSuccessAction() {}; // step 2: set the inital values of the following Animation (if any)\n\n\n      var that = this;\n\n      if (newAnimsIndex + 1 < theLane.length) {\n        onSuccessAction = function onSuccessAction() {\n          that.incidentsById._get(theLane[newAnimsIndex + 1].id).setInitialValue(incident.animatedAttributeValue);\n\n          if (that.incidentsById._get(theLane[newAnimsIndex + 1].id).gotContext) {\n            that.incidentsById._get(theLane[newAnimsIndex + 1].id).lastWish();\n\n            that.incidentsById._get(theLane[newAnimsIndex + 1].id).onGetContext();\n          }\n        };\n      }\n\n      onSuccessAction();\n    }\n    /**\n     * it justs updates the lane\n     * No checks are performed, just execution\n     * @param {array} affectedAnimationsIds\n     * @param {int} millisecondDelta\n     */\n\n  }, {\n    key: \"updateLane\",\n    value: function updateLane(affectedAnimationsIds, millisecondsDelta) {\n      var _this2 = this;\n\n      // first we group the affected animations by lanes\n      var affectedLanes = {};\n      var that = this;\n\n      for (var i = 0; i < affectedAnimationsIds.length; i++) {\n        var belongingLanes = this.belongingLaneKeysByAnimationId._get(affectedAnimationsIds[i]);\n\n        for (var j = 0; j < belongingLanes.length; j++) {\n          var laneKey = belongingLanes[j];\n\n          if (!Object.prototype.hasOwnProperty.call(affectedLanes, laneKey)) {\n            affectedLanes[laneKey] = {\n              animations: [],\n              lane: that.lanes._get(laneKey),\n              laneData: helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j])\n            };\n          }\n\n          affectedLanes[laneKey].animations.push(affectedAnimationsIds[i]);\n        }\n      } // for each of the affected lanes\n\n\n      for (var _laneKey in affectedLanes) {\n        var affectedLane = affectedLanes[_laneKey];\n        var lane = affectedLane.lane;\n        var laneData = affectedLane.laneData;\n\n        var laneBeforeEdit = _sortBy(this.getLanesCopy(lane), ['millisecond']);\n\n        var isComboAttr = Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute); // edit lane items millisecond\n\n        for (var k = 0; k < lane.length; k++) {\n          if (affectedLane.animations.indexOf(lane[k].id) >= 0) {\n            lane[k].millisecond += millisecondsDelta;\n          }\n        } // end for searching for the animations within the lane\n\n\n        var sortedLane = _sortBy(lane, ['millisecond']);\n\n        this.lanes._set(_laneKey, sortedLane);\n\n        lane = sortedLane;\n\n        var _loop = function _loop(_i2) {\n          var animationToCheck = affectedLane.animations[_i2];\n\n          var animationIndexBeforeEdit = _findIndex(laneBeforeEdit, function (item) {\n            return item.id === animationToCheck;\n          });\n\n          var animationIndexAfterEdit = _findIndex(lane, function (item) {\n            return item.id === animationToCheck;\n          });\n\n          var animation = _this2.incidentsById._get(lane[animationIndexAfterEdit].id);\n\n          if (animationIndexBeforeEdit !== animationIndexAfterEdit || animationIndexAfterEdit > 1) {\n            if (animationIndexBeforeEdit + 1 < lane.length) {\n              // if the animation was not the last animation on the lane before the edit\n              // we should take care of the initial values of the animation's previous successor\n              if (animationIndexBeforeEdit === 0) {\n                // if the edited animation was the first one before the edit\n                // pass its initial values to its previous successor as its new initial values\n                if (isComboAttr) {\n                  setInitialValueForCombo(lane, _this2.incidentsById, animation.initialValue, 0);\n                } else {\n                  _this2.incidentsById._get(laneBeforeEdit[1].id).setInitialValue(animation.initialValue);\n\n                  _this2.incidentsById._get(laneBeforeEdit[1].id).onGetContext();\n                }\n              } else {\n                // else if the edited animation was not the first one before the edit\n                // meaning its previous successor is not the first one on the lane after the edit\n                // just grab the target value of the new previous animation of the animation's previous successor and set it as initial value\n                if (isComboAttr) {\n                  var indexToAffect = animationIndexAfterEdit > animationIndexBeforeEdit ? animationIndexBeforeEdit : animationIndexAfterEdit;\n                  setInitialValueForCombo(lane, _this2.incidentsById, _this2.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit - 1].id).animatedAttributeValue, indexToAffect);\n                } else {\n                  _this2.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit + 1].id).setInitialValue(_this2.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit - 1].id).animatedAttributeValue);\n\n                  _this2.incidentsById._get(laneBeforeEdit[animationIndexBeforeEdit + 1].id).onGetContext();\n                }\n              }\n            } // for the edited animation itself now:\n\n\n            if (animationIndexAfterEdit === 0) {\n              // is it the first one (after edit)?\n              // get the initial values of the previously 0 indexed animation of the lane\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this2.incidentsById, _this2.incidentsById._get(laneBeforeEdit[0].id).initialValue, animationIndexAfterEdit);\n              } else {\n                animation.setInitialValue(_this2.incidentsById._get(laneBeforeEdit[0].id).initialValue);\n                animation.onGetContext();\n              }\n            } else {\n              // else if it is not the first one after editd\n              // just grab the target value of the previous animation on the updated lane and set it as its initial value\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this2.incidentsById, _this2.incidentsById._get(lane[animationIndexAfterEdit - 1].id).animatedAttributeValue, animationIndexAfterEdit);\n              } else {\n                animation.setInitialValue(_this2.incidentsById._get(lane[animationIndexAfterEdit - 1].id).animatedAttributeValue);\n                animation.onGetContext();\n              }\n            } // for its new next animation (if it has one)\n\n\n            if (animationIndexAfterEdit + 1 < lane.length) {\n              // set its initial value to equal the target value of the edited animation\n              if (isComboAttr) {\n                setInitialValueForCombo(lane, _this2.incidentsById, animation.animatedAttributeValue, animationIndexAfterEdit + 1);\n              } else {\n                _this2.incidentsById._get(lane[animationIndexAfterEdit + 1].id).setInitialValue(animation.animatedAttributeValue);\n\n                _this2.incidentsById._get(lane[animationIndexAfterEdit + 1].id).onGetContext();\n              }\n            }\n          }\n        };\n\n        for (var _i2 = 0; _i2 < affectedLane.animations.length; _i2++) {\n          _loop(_i2);\n        }\n      } // end for each of the belonging lanes of the animation\n\n    }\n    /**\n     * removes the list of animations as provided\n     * @param {array} removedAnimations - an array with the removed animations' ids\n     */\n\n  }, {\n    key: \"deleteAnimations\",\n    value: function deleteAnimations(removedAnimations) {\n      var affectedLanes = {};\n\n      for (var i = 0; i < removedAnimations.length; i++) {\n        var id = removedAnimations[i]; // for each lane the affected Animation appears in\n\n        var belongingLanes = this.belongingLaneKeysByAnimationId._get(id);\n\n        for (var j = 0; j < belongingLanes.length; j++) {\n          var lane = this.lanes._get(belongingLanes[j]);\n\n          var animationIndexBeforeEdit = -1;\n\n          for (var k = 0; k < lane.length; k++) {\n            if (lane[k].id === id) {\n              animationIndexBeforeEdit = k;\n              break;\n            }\n          } // helper.log(animationIndexBeforeEdit);\n\n\n          var animationToDelete = Object.assign({}, lane[animationIndexBeforeEdit]);\n\n          var animationObjectToDelete = this.incidentsById._get(animationToDelete.id);\n\n          var laneData = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]); // gets the lane without the removed animation\n\n          var newLane = [];\n\n          for (var _k = 0; _k < lane.length; _k++) {\n            if (lane[_k].id != id) {\n              newLane.push(lane[_k]);\n            }\n          }\n\n          this.lanes._set(belongingLanes[j], newLane);\n\n          lane = this.lanes._get(belongingLanes[j]);\n\n          if (lane.length === 0) {\n            // in case there are no more animations on the lane any more we reset\n            // the lane by running the progress(0,0), so that the affected elements\n            // will get back to their original attribute value\n            animationObjectToDelete.onProgress(0, 0);\n\n            this.lanes._delete(belongingLanes[j]);\n\n            if (Object.prototype.hasOwnProperty.call(affectedLanes, belongingLanes[j])) {\n              delete affectedLanes[belongingLanes[j]];\n            }\n          } else {\n            affectedLanes[belongingLanes[j]] = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]);\n\n            if (animationIndexBeforeEdit < lane.length && this.incidentsById._get(animationToDelete.id).initialValue !== false) {\n              if (Object.prototype.hasOwnProperty.call(this.comboAttributes, laneData.attribute)) {\n                setInitialValueForCombo(lane, this.incidentsById, this.incidentsById._get(animationToDelete.id).initialValue, animationIndexBeforeEdit);\n              } else {\n                this.incidentsById._get(lane[animationIndexBeforeEdit].id).setInitialValue(this.incidentsById._get(animationToDelete.id).initialValue);\n\n                this.incidentsById._get(lane[animationIndexBeforeEdit].id).onGetContext();\n              }\n            }\n          }\n        }\n\n        this.belongingLaneKeysByAnimationId._delete(removedAnimations[i]);\n      }\n\n      return affectedLanes;\n    }\n  }]);\n\n  return LanesHandler;\n}();\n\nmodule.exports = LanesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/LanesHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Collection =\n/*#__PURE__*/\nfunction () {\n  function Collection() {\n    var initialArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, Collection);\n\n    this.realArray = [];\n\n    if (initialArray != null) {\n      this.realArray = initialArray;\n    }\n  }\n\n  _createClass(Collection, [{\n    key: \"_hasOwnProperty\",\n    value: function _hasOwnProperty(key) {\n      return Object.prototype.hasOwnProperty.call(this.realArray, key);\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(key) {\n      return this.realArray[key];\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(key, value) {\n      this.realArray[key] = value;\n    }\n  }, {\n    key: \"_keys\",\n    value: function _keys() {\n      return Object.keys(this.realArray);\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(key) {\n      return delete this.realArray[key];\n    }\n    /**\n     * exports a Collection object\n     */\n\n  }, {\n    key: \"_export\",\n    value: function _export() {\n      return this.realArray;\n    }\n  }]);\n\n  return Collection;\n}();\n\nmodule.exports = Collection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9Db2xsZWN0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2hhbm5lbHMvQXR0cmlidXRlL2hlbHBlcnMvQ29sbGVjdGlvbi5qcz85NGM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBDb2xsZWN0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29sbGVjdGlvbigpIHtcbiAgICB2YXIgaW5pdGlhbEFycmF5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbGxlY3Rpb24pO1xuXG4gICAgdGhpcy5yZWFsQXJyYXkgPSBbXTtcblxuICAgIGlmIChpbml0aWFsQXJyYXkgIT0gbnVsbCkge1xuICAgICAgdGhpcy5yZWFsQXJyYXkgPSBpbml0aWFsQXJyYXk7XG4gICAgfVxuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbGxlY3Rpb24sIFt7XG4gICAga2V5OiBcIl9oYXNPd25Qcm9wZXJ0eVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFzT3duUHJvcGVydHkoa2V5KSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMucmVhbEFycmF5LCBrZXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFsQXJyYXlba2V5XTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3NldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXMucmVhbEFycmF5W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2tleXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2tleXMoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5yZWFsQXJyYXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZGVsZXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgICByZXR1cm4gZGVsZXRlIHRoaXMucmVhbEFycmF5W2tleV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGV4cG9ydHMgYSBDb2xsZWN0aW9uIG9iamVjdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2V4cG9ydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXhwb3J0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVhbEFycmF5O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb2xsZWN0aW9uO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbGxlY3Rpb247Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/Collection.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\nlane:\n     * [\n     *      {\n     *          id: the id of the Incident\n     *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n     *      }\n     *  ]\n*/\nfunction updateFinalValues(initialValues, originalFinalValues, finalValues) {\n  // console.log(initialValues, originalFinalValues);\n  var change = false;\n\n  for (var key in initialValues.value) {\n    if (!Object.prototype.hasOwnProperty.call(originalFinalValues, key)) {\n      change = true;\n      finalValues.value[key] = initialValues.value[key];\n    }\n  }\n\n  return change;\n}\n/**\n * This function takes as input the index of the affected incident on the lane,\n * the lane and it re-calculates the\n * initial and final values of all the following incidents in the lane.\n * The function is used only in cases of combo attributes\n **/\n\n\nfunction setInitialValue(lane, incidentsById, newInitialValues, affectedIndex) {\n  var affectedItem = lane[affectedIndex];\n\n  var affectedIncident = incidentsById._get(affectedItem.id);\n\n  affectedIncident.setInitialValue(newInitialValues);\n  var change = updateFinalValues(affectedIncident.initialValue, affectedIncident.originalAnimatedAttributeValue, affectedIncident.animatedAttributeValue); // if the final values have changed according to the new initial values and there is\n  // a following incident on the lane\n\n  if (change && affectedIndex < lane.length - 1) {\n    affectedIncident.lastWish();\n    affectedIncident.onGetContext();\n    setInitialValue(lane, incidentsById, affectedIncident.animatedAttributeValue, affectedIndex + 1);\n  }\n}\n\nmodule.exports = setInitialValue;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9Db21ib0F0dHJzQ2FzY2FkaW5nLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2hhbm5lbHMvQXR0cmlidXRlL2hlbHBlcnMvQ29tYm9BdHRyc0Nhc2NhZGluZy5qcz82NjI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxubGFuZTpcbiAgICAgKiBbXG4gICAgICogICAgICB7XG4gICAgICogICAgICAgICAgaWQ6IHRoZSBpZCBvZiB0aGUgSW5jaWRlbnRcbiAgICAgKiAgICAgICAgICBtaWxsaXNlY29uZDogdGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBjaGFubmVsIHRoaXMgQW5pbWF0aW9uICh0aGF0IGFmZmVjdHMgdGhlIHNlbGVjdG9yL2F0dHJpYnV0ZSBwYWlyKSBydW5zXG4gICAgICogICAgICB9XG4gICAgICogIF1cbiovXG5mdW5jdGlvbiB1cGRhdGVGaW5hbFZhbHVlcyhpbml0aWFsVmFsdWVzLCBvcmlnaW5hbEZpbmFsVmFsdWVzLCBmaW5hbFZhbHVlcykge1xuICAvLyBjb25zb2xlLmxvZyhpbml0aWFsVmFsdWVzLCBvcmlnaW5hbEZpbmFsVmFsdWVzKTtcbiAgdmFyIGNoYW5nZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGtleSBpbiBpbml0aWFsVmFsdWVzLnZhbHVlKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3JpZ2luYWxGaW5hbFZhbHVlcywga2V5KSkge1xuICAgICAgY2hhbmdlID0gdHJ1ZTtcbiAgICAgIGZpbmFsVmFsdWVzLnZhbHVlW2tleV0gPSBpbml0aWFsVmFsdWVzLnZhbHVlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNoYW5nZTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB0YWtlcyBhcyBpbnB1dCB0aGUgaW5kZXggb2YgdGhlIGFmZmVjdGVkIGluY2lkZW50IG9uIHRoZSBsYW5lLFxuICogdGhlIGxhbmUgYW5kIGl0IHJlLWNhbGN1bGF0ZXMgdGhlXG4gKiBpbml0aWFsIGFuZCBmaW5hbCB2YWx1ZXMgb2YgYWxsIHRoZSBmb2xsb3dpbmcgaW5jaWRlbnRzIGluIHRoZSBsYW5lLlxuICogVGhlIGZ1bmN0aW9uIGlzIHVzZWQgb25seSBpbiBjYXNlcyBvZiBjb21ibyBhdHRyaWJ1dGVzXG4gKiovXG5cblxuZnVuY3Rpb24gc2V0SW5pdGlhbFZhbHVlKGxhbmUsIGluY2lkZW50c0J5SWQsIG5ld0luaXRpYWxWYWx1ZXMsIGFmZmVjdGVkSW5kZXgpIHtcbiAgdmFyIGFmZmVjdGVkSXRlbSA9IGxhbmVbYWZmZWN0ZWRJbmRleF07XG5cbiAgdmFyIGFmZmVjdGVkSW5jaWRlbnQgPSBpbmNpZGVudHNCeUlkLl9nZXQoYWZmZWN0ZWRJdGVtLmlkKTtcblxuICBhZmZlY3RlZEluY2lkZW50LnNldEluaXRpYWxWYWx1ZShuZXdJbml0aWFsVmFsdWVzKTtcbiAgdmFyIGNoYW5nZSA9IHVwZGF0ZUZpbmFsVmFsdWVzKGFmZmVjdGVkSW5jaWRlbnQuaW5pdGlhbFZhbHVlLCBhZmZlY3RlZEluY2lkZW50Lm9yaWdpbmFsQW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSwgYWZmZWN0ZWRJbmNpZGVudC5hbmltYXRlZEF0dHJpYnV0ZVZhbHVlKTsgLy8gaWYgdGhlIGZpbmFsIHZhbHVlcyBoYXZlIGNoYW5nZWQgYWNjb3JkaW5nIHRvIHRoZSBuZXcgaW5pdGlhbCB2YWx1ZXMgYW5kIHRoZXJlIGlzXG4gIC8vIGEgZm9sbG93aW5nIGluY2lkZW50IG9uIHRoZSBsYW5lXG5cbiAgaWYgKGNoYW5nZSAmJiBhZmZlY3RlZEluZGV4IDwgbGFuZS5sZW5ndGggLSAxKSB7XG4gICAgYWZmZWN0ZWRJbmNpZGVudC5sYXN0V2lzaCgpO1xuICAgIGFmZmVjdGVkSW5jaWRlbnQub25HZXRDb250ZXh0KCk7XG4gICAgc2V0SW5pdGlhbFZhbHVlKGxhbmUsIGluY2lkZW50c0J5SWQsIGFmZmVjdGVkSW5jaWRlbnQuYW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSwgYWZmZWN0ZWRJbmRleCArIDEpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0SW5pdGlhbFZhbHVlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/ComboAttrsCascading.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * The goal of this class is to get an original array, provide all the functionality\n * of the Collection class but by keeping the originalArray clean as it was provided.\n */\nvar SandboxCollection =\n/*#__PURE__*/\nfunction () {\n  function SandboxCollection(originalArray) {\n    _classCallCheck(this, SandboxCollection);\n\n    this.originalArray = originalArray;\n    this.extraArray = {};\n    this.addedKeys = [];\n    this.removedKeys = [];\n  }\n\n  _createClass(SandboxCollection, [{\n    key: \"_hasOwnProperty\",\n    value: function _hasOwnProperty(key) {\n      return Object.prototype.hasOwnProperty.call(this.originalArray, key) || Object.prototype.hasOwnProperty.call(this.extraArray, key);\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        this.extraArray[key] = Object.assign({}, this.originalArray[key]);\n        return this.extraArray[key];\n      }\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(key, value) {\n      this.extraArray[key] = value;\n\n      if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        this.addedKeys.push(key);\n      }\n\n      var indexOnRemovedKeys = this.removedKeys.indexOf(key);\n\n      if (indexOnRemovedKeys > -1) {\n        this.removedKeys.splice(indexOnRemovedKeys, 1);\n      }\n    }\n  }, {\n    key: \"_keys\",\n    value: function _keys() {\n      var allKeys = Object.keys(this.originalArray).concat(this.addedKeys);\n\n      for (var i = 0; i < this.removedKeys.length; i++) {\n        var indexOnArray = this.removedKeys.indexOf(this.removedKeys[i]);\n        allKeys.splice(indexOnArray, 1);\n      }\n\n      return allKeys;\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(key) {\n      var indexOnAddedKeys = this.addedKeys.indexOf(key);\n\n      if (indexOnAddedKeys > -1) {\n        this.addedKeys.splice(indexOnAddedKeys);\n        return delete this.extraArray[key];\n      } else {\n        return this.removedKeys.push(key);\n      }\n    }\n  }, {\n    key: \"_export\",\n    value: function _export() {\n      for (var key in this.extraArray) {\n        this.originalArray[key] = this.extraArray[key];\n      }\n\n      for (var i = 0; i < this.removedKeys.length; i++) {\n        delete this.originalArray[this.removedKeys[i]];\n      }\n\n      return this.originalArray;\n    }\n  }]);\n\n  return SandboxCollection;\n}();\n\nmodule.exports = SandboxCollection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94Q29sbGVjdGlvbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hDb2xsZWN0aW9uLmpzPzZlOTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyoqXG4gKiBUaGUgZ29hbCBvZiB0aGlzIGNsYXNzIGlzIHRvIGdldCBhbiBvcmlnaW5hbCBhcnJheSwgcHJvdmlkZSBhbGwgdGhlIGZ1bmN0aW9uYWxpdHlcbiAqIG9mIHRoZSBDb2xsZWN0aW9uIGNsYXNzIGJ1dCBieSBrZWVwaW5nIHRoZSBvcmlnaW5hbEFycmF5IGNsZWFuIGFzIGl0IHdhcyBwcm92aWRlZC5cbiAqL1xudmFyIFNhbmRib3hDb2xsZWN0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2FuZGJveENvbGxlY3Rpb24ob3JpZ2luYWxBcnJheSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTYW5kYm94Q29sbGVjdGlvbik7XG5cbiAgICB0aGlzLm9yaWdpbmFsQXJyYXkgPSBvcmlnaW5hbEFycmF5O1xuICAgIHRoaXMuZXh0cmFBcnJheSA9IHt9O1xuICAgIHRoaXMuYWRkZWRLZXlzID0gW107XG4gICAgdGhpcy5yZW1vdmVkS2V5cyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNhbmRib3hDb2xsZWN0aW9uLCBbe1xuICAgIGtleTogXCJfaGFzT3duUHJvcGVydHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhc093blByb3BlcnR5KGtleSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9yaWdpbmFsQXJyYXksIGtleSkgfHwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZXh0cmFBcnJheSwga2V5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0KGtleSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmV4dHJhQXJyYXksIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgfSBlbHNlIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMub3JpZ2luYWxBcnJheSwga2V5KSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5leHRyYUFycmF5W2tleV0gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9yaWdpbmFsQXJyYXlba2V5XSk7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3NldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuZXh0cmFBcnJheVtrZXldID0gdmFsdWU7XG5cbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMub3JpZ2luYWxBcnJheSwga2V5KSkge1xuICAgICAgICB0aGlzLmFkZGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleE9uUmVtb3ZlZEtleXMgPSB0aGlzLnJlbW92ZWRLZXlzLmluZGV4T2Yoa2V5KTtcblxuICAgICAgaWYgKGluZGV4T25SZW1vdmVkS2V5cyA+IC0xKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlZEtleXMuc3BsaWNlKGluZGV4T25SZW1vdmVkS2V5cywgMSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9rZXlzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9rZXlzKCkge1xuICAgICAgdmFyIGFsbEtleXMgPSBPYmplY3Qua2V5cyh0aGlzLm9yaWdpbmFsQXJyYXkpLmNvbmNhdCh0aGlzLmFkZGVkS2V5cyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZW1vdmVkS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaW5kZXhPbkFycmF5ID0gdGhpcy5yZW1vdmVkS2V5cy5pbmRleE9mKHRoaXMucmVtb3ZlZEtleXNbaV0pO1xuICAgICAgICBhbGxLZXlzLnNwbGljZShpbmRleE9uQXJyYXksIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWxsS2V5cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2RlbGV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGtleSkge1xuICAgICAgdmFyIGluZGV4T25BZGRlZEtleXMgPSB0aGlzLmFkZGVkS2V5cy5pbmRleE9mKGtleSk7XG5cbiAgICAgIGlmIChpbmRleE9uQWRkZWRLZXlzID4gLTEpIHtcbiAgICAgICAgdGhpcy5hZGRlZEtleXMuc3BsaWNlKGluZGV4T25BZGRlZEtleXMpO1xuICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlZEtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZXhwb3J0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9leHBvcnQoKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5leHRyYUFycmF5KSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWxBcnJheVtrZXldID0gdGhpcy5leHRyYUFycmF5W2tleV07XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZW1vdmVkS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBkZWxldGUgdGhpcy5vcmlnaW5hbEFycmF5W3RoaXMucmVtb3ZlZEtleXNbaV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbEFycmF5O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTYW5kYm94Q29sbGVjdGlvbjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTYW5kYm94Q29sbGVjdGlvbjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar SandboxCollection = __webpack_require__(/*! ./SandboxCollection */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxIncidentsById =\n/*#__PURE__*/\nfunction (_SandboxCollection) {\n  _inherits(SandboxIncidentsById, _SandboxCollection);\n\n  function SandboxIncidentsById() {\n    _classCallCheck(this, SandboxIncidentsById);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SandboxIncidentsById).apply(this, arguments));\n  }\n\n  _createClass(SandboxIncidentsById, [{\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        return this.originalArray[key];\n      }\n    }\n  }]);\n\n  return SandboxIncidentsById;\n}(SandboxCollection);\n\nmodule.exports = SandboxIncidentsById;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94SW5jaWRlbnRzQnlJZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0NoYW5uZWxzL0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hJbmNpZGVudHNCeUlkLmpzPzQ4YzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgU2FuZGJveENvbGxlY3Rpb24gPSByZXF1aXJlKCcuL1NhbmRib3hDb2xsZWN0aW9uJyk7XG5cbnZhciBTYW5kYm94SW5jaWRlbnRzQnlJZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1NhbmRib3hDb2xsZWN0aW9uKSB7XG4gIF9pbmhlcml0cyhTYW5kYm94SW5jaWRlbnRzQnlJZCwgX1NhbmRib3hDb2xsZWN0aW9uKTtcblxuICBmdW5jdGlvbiBTYW5kYm94SW5jaWRlbnRzQnlJZCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2FuZGJveEluY2lkZW50c0J5SWQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTYW5kYm94SW5jaWRlbnRzQnlJZCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2FuZGJveEluY2lkZW50c0J5SWQsIFt7XG4gICAga2V5OiBcIl9nZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldChrZXkpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5leHRyYUFycmF5LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm9yaWdpbmFsQXJyYXksIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsQXJyYXlba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2FuZGJveEluY2lkZW50c0J5SWQ7XG59KFNhbmRib3hDb2xsZWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTYW5kYm94SW5jaWRlbnRzQnlJZDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxIncidentsById.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar SandboxCollection = __webpack_require__(/*! ./SandboxCollection */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxLanes =\n/*#__PURE__*/\nfunction (_SandboxCollection) {\n  _inherits(SandboxLanes, _SandboxCollection);\n\n  function SandboxLanes() {\n    _classCallCheck(this, SandboxLanes);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SandboxLanes).apply(this, arguments));\n  }\n\n  _createClass(SandboxLanes, [{\n    key: \"_get\",\n    value: function _get(key) {\n      if (Object.prototype.hasOwnProperty.call(this.extraArray, key)) {\n        return this.extraArray[key];\n      } else if (!Object.prototype.hasOwnProperty.call(this.originalArray, key)) {\n        return undefined;\n      } else {\n        this.extraArray[key] = [];\n\n        for (var i = 0; i < this.originalArray[key].length; i++) {\n          this.extraArray[key].push({\n            id: this.originalArray[key][i].id,\n            // incident: this.originalArray[key][i].incident,\n            millisecond: this.originalArray[key][i].millisecond * 1\n          });\n        }\n\n        return this.extraArray[key];\n      }\n    }\n  }]);\n\n  return SandboxLanes;\n}(SandboxCollection);\n\nmodule.exports = SandboxLanes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94TGFuZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DaGFubmVscy9BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94TGFuZXMuanM/YjZiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBTYW5kYm94Q29sbGVjdGlvbiA9IHJlcXVpcmUoJy4vU2FuZGJveENvbGxlY3Rpb24nKTtcblxudmFyIFNhbmRib3hMYW5lcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1NhbmRib3hDb2xsZWN0aW9uKSB7XG4gIF9pbmhlcml0cyhTYW5kYm94TGFuZXMsIF9TYW5kYm94Q29sbGVjdGlvbik7XG5cbiAgZnVuY3Rpb24gU2FuZGJveExhbmVzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTYW5kYm94TGFuZXMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTYW5kYm94TGFuZXMpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNhbmRib3hMYW5lcywgW3tcbiAgICBrZXk6IFwiX2dldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0KGtleSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmV4dHJhQXJyYXksIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgfSBlbHNlIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMub3JpZ2luYWxBcnJheSwga2V5KSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5leHRyYUFycmF5W2tleV0gPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub3JpZ2luYWxBcnJheVtrZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5leHRyYUFycmF5W2tleV0ucHVzaCh7XG4gICAgICAgICAgICBpZDogdGhpcy5vcmlnaW5hbEFycmF5W2tleV1baV0uaWQsXG4gICAgICAgICAgICAvLyBpbmNpZGVudDogdGhpcy5vcmlnaW5hbEFycmF5W2tleV1baV0uaW5jaWRlbnQsXG4gICAgICAgICAgICBtaWxsaXNlY29uZDogdGhpcy5vcmlnaW5hbEFycmF5W2tleV1baV0ubWlsbGlzZWNvbmQgKiAxXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5leHRyYUFycmF5W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNhbmRib3hMYW5lcztcbn0oU2FuZGJveENvbGxlY3Rpb24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNhbmRib3hMYW5lczsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/helpers/SandboxLanes.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel =\n/*#__PURE__*/\nfunction () {\n  function Channel(props) {\n    _classCallCheck(this, Channel);\n\n    this.runTimeInfo = props.runTimeInfo;\n    this.context = props.context;\n    this.onInitialise();\n    this.getIncidentById = props.getIncidentById; // this.type = \"plain\";\n  }\n\n  _createClass(Channel, [{\n    key: \"onInitialise\",\n    value: function onInitialise() {}\n  }, {\n    key: \"_resize\",\n    value: function _resize() {\n      helper.log('Please overwite the _resize method of the Channel');\n    }\n    /**\n     * @param {array} incidents - A collection of Incidents in the form:\n     * {\n     *  millisecond\n     *  incident\n     *  id\n     * }\n     * @returns either:\n     *   {\n     *       result:true,\n     *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n     *   }\n     *   or\n     *   {\n     *       result: false,\n     *       errors\n     *   }\n     */\n\n  }, {\n    key: \"addIncidents\",\n    value: function addIncidents(incidents) {\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkAddition(incidents);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n     * that apply the change\n     * @param {array} incidents - the list of the incidents to edit in an array format [object, object, ...]\n     * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n     * @returns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"editIncidents\",\n    value: function editIncidents(incidents, millisecondsDelta) {\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkEdit(incidents, millisecondsDelta);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * Method to remove incidents\n     * @param {array} incidents - the ids of the incidents to remove in an array format\n     * @param {object} props\n     * @retuns {object} -\n     * either:\n     {\n        result: true,\n        execute: // array of functions to be executed in order to apply the edit\n     }\n     or\n     {\n         result: false,\n         errors: // an array including all the errors / conflicts found on edit\n     }\n    */\n\n  }, {\n    key: \"removeIncidents\",\n    value: function removeIncidents(incidents) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // first check the Incidents addition directly using the checkAddition method of the class\n      var result = this.checkDelete(incidents, props);\n\n      if (result.result === false) {\n        return {\n          result: false,\n          errors: result.errors\n        };\n      } else {\n        return {\n          result: true,\n          execute: result.execute\n        };\n      }\n    }\n    /**\n     * On this method the user defines the specific rules that apply on the plugin itself and on the Incidents of the plugin itself\n     * The method should either return {result: true} or {result: false, errors:[{error-object}]}, where error-object has the structure:\n     *  {\n            incident: // reference to the Incident object that has bee discarded\n            error: // text\n        }\n    * @param {array} incidents - a colleciton of all incidents to be added on the form:\n    *\n        {\n            id\n            millisecond\n            incident\n        }\n    * @returns {object} -\n    * either:\n        {\n            result:true,\n            execute: // a function that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidentsArray, millisecondsDelta) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentIds) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      // eslint-disable-line no-unused-vars\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {} // eslint-disable-line no-unused-vars\n\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return \"plain\";\n    }\n  }]);\n\n  return Channel;\n}();\n\nmodule.exports = Channel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Channel = __webpack_require__(/*! ../Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index.js */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index.js */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar ClipChannel =\n/*#__PURE__*/\nfunction (_Channel) {\n  _inherits(ClipChannel, _Channel);\n\n  function ClipChannel() {\n    _classCallCheck(this, ClipChannel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClipChannel).apply(this, arguments));\n  }\n\n  _createClass(ClipChannel, [{\n    key: \"onInitialise\",\n\n    /*\n    this.incidents is a collection of {incident, id, millisecond} objects always kept in order\n        from lower to higher millisecond\n    this.incidetnsById is an index of the incidents kept by id (this.incidents[incident-id] = Incident)\n    */\n    value: function onInitialise() {\n      this.incidents = [];\n      this.incidentsById = {};\n    }\n  }, {\n    key: \"_incidentById\",\n    value: function _incidentById(id) {\n      return this.incidentsById[id];\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      for (var i = 0; i < this.incidents.length; i++) {\n        this.incidents[i].millisecond = this.incidents[i].millisecond * durationFraction;\n      }\n    }\n    /**\n    * @param {array} incidents - a colleciton of all incidents to be added on the form:\n    *\n        {\n            id\n            millisecond\n            incident\n        }\n    * @returns {object} -\n    * either:\n        {\n            result:true,\n            execute: // a function that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidents) {\n      var errors = [];\n      var candidateIncidentsById = {};\n      var incidentsToConcat = [];\n\n      for (var i = 0; i < incidents.length; i++) {\n        candidateIncidentsById[incidents[i].id] = incidents[i].incident;\n        incidentsToConcat.push({\n          id: incidents[i].id,\n          millisecond: incidents[i].millisecond\n        });\n\n        if (Object.prototype.hasOwnProperty.call(this.incidentsById, incidents[i].id)) {\n          helper.error(\"Incident with the id \".concat(incidents[i].id, \" already exists. Addition is rejected.\"));\n          errors.push({\n            type: 'Already existing id',\n            meta: {\n              id: incidents[i].id\n            }\n          });\n        }\n      }\n\n      if (errors.length > 0) {\n        return {\n          result: false,\n          errors: errors\n        };\n      }\n\n      var that = this;\n\n      var exec = function exec() {\n        that.incidentsById = Object.assign(that.incidentsById, candidateIncidentsById);\n        that.incidents = that.incidents.concat(incidentsToConcat);\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n\n        for (var _i = 0; _i < incidents.length; _i++) {\n          that._incidentById(incidents[_i].id)._onGetContextOnce(that.context);\n        }\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n    @param {array} incidentsArray - A collection of the Incidetns to get edited in the form:\n    {\n        id\n        millisecond\n        incident\n    }\n    @param {int} millisecondsDelta- the delta of the star point of the provided incidents\n    */\n\n  }, {\n    key: \"checkEdit\",\n    value: function checkEdit(incidentsArray, millisecondsDelta) {\n      var that = this;\n\n      var exec = function exec() {\n        for (var i = 0; i < incidentsArray.length; i++) {\n          for (var j = 0; j < that.incidents.length; j++) {\n            if (that.incidents[j].id === incidentsArray[i].id) {\n              that.incidents[j].millisecond += millisecondsDelta;\n              break;\n            }\n          }\n        }\n\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentsArray) {\n      var that = this;\n      var incidentIds = [];\n\n      for (var i = 0; i < incidentsArray.length; i++) {\n        incidentIds.push(incidentsArray[i].id);\n      }\n\n      var exec = function exec() {\n        var newIncidents = _filter(that.incidents, function (incident) {\n          return incidentIds.indexOf(incident.id) === -1;\n        });\n\n        that.incidents = newIncidents;\n\n        for (var _i2 = 0; _i2 < incidentIds.length; _i2++) {\n          delete that.incidentsById[incidentIds[_i2]];\n        }\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     * @param {array} incidents - [{id, start, end, startDelta}]\n     */\n\n  }, {\n    key: \"checkResizedIncidents\",\n    value: function checkResizedIncidents(incidents) {\n      var that = this;\n\n      var exec = function exec() {\n        for (var i = 0; i < incidents.length; i++) {\n          for (var j = 0; j < that.incidents.length; j++) {\n            if (that.incidents[j].id === incidents[i].id) {\n              that.incidents[j].millisecond += incidents[i].startDelta;\n              break;\n            }\n          }\n        }\n\n        that.incidents = _sortBy(that.incidents, [function (laneItem) {\n          return laneItem.millisecond;\n        }]);\n      };\n\n      return {\n        result: true,\n        execute: exec\n      };\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {string} contextId - the context id to move\n     @param {boolean} forceReset - set to true when we want full flash\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (forceReset === true) {\n        // incidents: [{id, millisecond}, {}, {}...]\n        for (var i = 0; i < this.incidents.length; i++) {\n          var laneItem = this.incidents[i];\n\n          var incident = this._incidentById(laneItem.id);\n\n          if (to < laneItem.millisecond) {\n            incident.onProgress(0, 0, contextId, true);\n          } else if (to > laneItem.millisecond + incident.duration) {\n            incident.onProgress(1, incident.duration, contextId, true);\n          } else {\n            incident.onProgress((to - laneItem.millisecond) / incident.duration, to - laneItem.millisecond, contextId, true);\n          }\n        }\n      } else {\n        var that = this;\n\n        var participatingItems = _filter(this.incidents, function (laneItem) {\n          return laneItem.millisecond + that._incidentById(laneItem.id).duration >= from && laneItem.millisecond + that._incidentById(laneItem.id).duration <= to || // it ends after from and before to millisecond\n          that._incidentById(laneItem.id).duration + laneItem.millisecond >= to && laneItem.millisecond <= to; // or it ends after the target millisecond but also starts before it\n        });\n\n        for (var _i3 = 0; _i3 < participatingItems.length; _i3++) {\n          var _laneItem = participatingItems[_i3];\n\n          var contextAwareClipIncident = this._incidentById(_laneItem.id); // onProgress(fraction, milliseconds, contextId, forceReset = false) {\n\n\n          var overcameEnd = (to - _laneItem.millisecond) / contextAwareClipIncident.duration >= 1;\n          var fraction = overcameEnd ? 1 : (to - _laneItem.millisecond) / contextAwareClipIncident.duration;\n          var millisecond = overcameEnd ? contextAwareClipIncident.duration : to - _laneItem.millisecond;\n          contextAwareClipIncident.onProgress(fraction, millisecond, contextId, false);\n        }\n      }\n\n      this.runTimeInfo.currentMillisecond = to;\n    }\n  }]);\n\n  return ClipChannel;\n}(Channel);\n\nmodule.exports = ClipChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ClipsChannel = __webpack_require__(/*! ../Clip/ClipsChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index.js */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar dataSeparator = \"|||\";\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar AudioPlaybackChannel =\n/*#__PURE__*/\nfunction (_ClipsChannel) {\n  _inherits(AudioPlaybackChannel, _ClipsChannel);\n\n  function AudioPlaybackChannel(props) {\n    var _this;\n\n    _classCallCheck(this, AudioPlaybackChannel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioPlaybackChannel).call(this, props)); // keeps the list of the ids of MediaIncidents that are currently been played\n    // in the form `${id}|||$[contextId}`\n\n    _this.playingIncidentsIds = []; // when the Channel's Clip enters the transitional state the Channel ignores\n    // moveTos. When the transition ends though, no matter the currentMillisecond\n    // its Clip was it should recalc which sources to play as if we were going from\n    // 0 to the the target millisecond because of the different way the Playback operates\n    // (it has no onProgress). For this, it's very important to store the information\n    // that it entered the transitional state so on the next playing state moveTo\n    // to force as from ms 0.\n\n    _this.transitioned = false;\n    props.subscribe(helper.getAnId(), _this._stateChange.bind(_assertThisInitialized(_this)), 0, 1, true);\n    return _this;\n  }\n\n  _createClass(AudioPlaybackChannel, [{\n    key: \"_stateChange\",\n    value: function _stateChange(ms, state) {\n      if (state === \"paused\" || state === \"idle\" || state === \"blocked\") {\n        this._stopPlayingIncidents();\n\n        this.transitioned = true;\n      }\n    }\n  }, {\n    key: \"_stopPlayingIncidents\",\n    value: function _stopPlayingIncidents() {\n      for (var i = 0; i < this.playingIncidentsIds.length; i++) {\n        var incidentInfo = this.playingIncidentsIds[i].split(dataSeparator);\n\n        this._incidentById(incidentInfo[0]).stop(incidentInfo[1]);\n      }\n\n      this.playingIncidentsIds = [];\n    }\n    /**\n     @param {int} from - the millisecond to start from\n     @param {int} to - the millisecond to go to\n     @param {string} contextId - the context id to move\n     @param {boolean} forceReset - set to true when we want full flash\n     */\n\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(from, to, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (this.runTimeInfo.state === 'transitional' || forceReset === true) {\n        this.transitioned = true;\n\n        this._stopPlayingIncidents();\n\n        return;\n      } else {\n        if (this.transitioned === true) {\n          from = 0;\n          this.transitioned = false;\n        }\n      }\n\n      var that = this;\n\n      var startingAnims = _filter(this.incidents, function (laneItem) {\n        return laneItem.millisecond >= from && laneItem.millisecond < to && laneItem.millisecond + that._incidentById(laneItem.id).duration > to;\n      });\n\n      var finishingAnims = _filter(this.incidents, function (laneItem) {\n        return that._incidentById(laneItem.id).duration + laneItem.millisecond > from && that._incidentById(laneItem.id).duration + laneItem.millisecond <= to; // or it ends after the target millisecond but also starts before it\n      }); //console.log(this._incidentById);\n      // console.log(from, to);\n      // console.log(startingAnims);\n      // console.log(finishingAnims);\n\n\n      for (var i = 0; i < startingAnims.length; i++) {\n        var laneItem = startingAnims[i];\n\n        var MediaIncident = this._incidentById(laneItem.id); // onProgress(fraction, milliseconds, contextId, forceReset = false) {\n\n\n        var overcameEnd = (to - laneItem.millisecond) / MediaIncident.duration >= 1;\n        var fraction = overcameEnd ? 1 : (to - laneItem.millisecond) / MediaIncident.duration;\n        var millisecond = overcameEnd ? MediaIncident.duration : to - laneItem.millisecond;\n        var startAttempt = MediaIncident.play(fraction, millisecond, contextId);\n\n        if (startAttempt === true) {\n          this.playingIncidentsIds.push(\"\".concat(laneItem.id).concat(dataSeparator).concat(contextId));\n        }\n      }\n\n      for (var _i = 0; _i < finishingAnims.length; _i++) {\n        var _laneItem = finishingAnims[_i];\n\n        var _MediaIncident = this._incidentById(_laneItem.id);\n\n        _MediaIncident.stop(contextId);\n\n        var index = this.playingIncidentsIds.indexOf(\"\".concat(_laneItem.id).concat(dataSeparator).concat(contextId));\n\n        if (index > -1) {\n          this.playingIncidentsIds.splice(index, 1);\n        }\n      }\n\n      this.runTimeInfo.currentMillisecond = to;\n    }\n  }]);\n\n  return AudioPlaybackChannel;\n}(ClipsChannel);\n\nmodule.exports = AudioPlaybackChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MonoIncident = __webpack_require__(/*! ../BaseClasses/MonoIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ClipCopy =\n/*#__PURE__*/\nfunction (_MonoIncident) {\n  _inherits(ClipCopy, _MonoIncident);\n\n  function ClipCopy(attrs, props, dna) {\n    var _this;\n\n    _classCallCheck(this, ClipCopy);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClipCopy).call(this, attrs, props, dna));\n    _this.runTimeInfo = {\n      currentMillisecond: 0\n    };\n    return _this;\n  }\n\n  _createClass(ClipCopy, [{\n    key: \"lastWish\",\n    value: function lastWish() {\n      this.ownClip.ownContext.unmount();\n    }\n  }, {\n    key: \"onGetContext\",\n    value: function onGetContext() {\n      // In order to render itself on the given element first it needs the props (including html and css)\n      // from the real Clip it copies\n      var constructionArgs = this.DescriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip\n\n      var host = helper.getElementByMCID(this.context, this.mcid);\n\n      var hostedProps = _objectSpread({}, constructionArgs.props, {\n        selector: undefined,\n        host: host\n      }); // we create a clip because Clips on creation render and thus have their own context\n      // this.dna.descriptiveIncident.constructor.Incident keeps a reference to the non-audio real Clip\n      // Class. No audio is involved on this process\n\n\n      this.ownClip = new this.DescriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps); // console.log(this.ownClip);\n      // flushes the realClip with its ownClip's context\n\n      this.DescriptiveIncident.realClip.addContext({\n        clipId: this.id,\n        context: this.ownClip.ownContext\n      }, true); // even though we have created an own clip, we have made no checks at all neither\n      // we added the incidents of the real clip to it. That is becuase playing and moving\n      // this clip copy means directly moving the real clip on the context of the own clip.\n      // So the only thing we need here is the context and nothing more.\n    }\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds) {\n      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      for (var key in this.DescriptiveIncident.realClip.instantiatedChannels) {\n        var channel = this.DescriptiveIncident.realClip.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, forceReset);\n      }\n\n      this.runTimeInfo.currentMillisecond = milliseconds;\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return this.DescriptiveIncident.realClip.duration;\n    },\n    set: function set(milliseconds) {\n      this.DescriptiveIncident.realClip._resize(milliseconds / this.realClip.duration);\n    }\n  }]);\n\n  return ClipCopy;\n}(MonoIncident);\n\nmodule.exports = ClipCopy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar conf = __webpack_require__(/*! ../_configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\"); // context handlers\n\n\nvar IframeContextHandler = __webpack_require__(/*! ./helpers/IframeContextHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js\");\n\nvar WebComponentContextHandler = __webpack_require__(/*! ./helpers/WebComponentContextHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./ExtendableClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar Clip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(Clip, _ExtendableClip);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function Clip() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, Clip);\n\n    var attrsToPass, propsToUse;\n    /*\n    backwards compatibility. If the user doesn't pass a second argument on the constructor then this is\n    the new way of initialising a Group (only props).\n    */\n\n    if (oldProps === null) {\n      attrsToPass = {};\n      propsToUse = props;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = props;\n      propsToUse = oldProps;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clip).call(this, attrsToPass, propsToUse)); // that means the Clip is hosted or, in other words a host has been\n    // provided on the props (and not a selector)\n    // this.isHostedClip = true;\n\n    var clipType = conf.selfContainedContextHandler;\n    _this.clipType = clipType;\n    var ContextHanlder = null;\n\n    if (document.head.createShadowRoot || document.head.attachShadow) {\n      ContextHanlder = WebComponentContextHandler;\n    } else {\n      ContextHanlder = IframeContextHandler;\n    } // console.log(`this.id: ${this.id}, Class: ${this.constructor.name}, this.html: ${this.html}`)\n\n\n    var contextHanlder = new ContextHanlder(propsToUse);\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: _this.isHostedClip\n    });\n    _this.iframe = contextHanlder.iframeElement;\n    _this.forceExportIncidents = true;\n\n    _this.onAfterRender();\n\n    return _this;\n  }\n\n  _createClass(Clip, [{\n    key: \"onAfterRender\",\n    value: function onAfterRender() {// implement here\n    }\n  }, {\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      // TODO also export CSS and fonts taking in account the potential existance\n      // of them on the get methods\n      return {\n        attrs: this.attrs,\n        props: _objectSpread({}, this.props, {\n          host: undefined,\n          html: this.ownContext.rootElement.innerHTML\n        })\n      };\n    }\n  }, {\n    key: \"rootElement\",\n    get: function get() {\n      return this.ownContext.clipContainer;\n    }\n  }]);\n\n  return Clip;\n}(ExtendableClip);\n\nmodule.exports = Clip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DbGlwL0RPTUNsaXAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DbGlwL0RPTUNsaXAuanM/ZmY0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIGNvbmYgPSByZXF1aXJlKCcuLi9fY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZicpOyAvLyBjb250ZXh0IGhhbmRsZXJzXG5cblxudmFyIElmcmFtZUNvbnRleHRIYW5kbGVyID0gcmVxdWlyZSgnLi9oZWxwZXJzL0lmcmFtZUNvbnRleHRIYW5kbGVyJyk7XG5cbnZhciBXZWJDb21wb25lbnRDb250ZXh0SGFuZGxlciA9IHJlcXVpcmUoJy4vaGVscGVycy9XZWJDb21wb25lbnRDb250ZXh0SGFuZGxlcicpO1xuXG52YXIgRXh0ZW5kYWJsZUNsaXAgPSByZXF1aXJlKCcuL0V4dGVuZGFibGVDbGlwJyk7XG5cbnZhciBDbGlwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfRXh0ZW5kYWJsZUNsaXApIHtcbiAgX2luaGVyaXRzKENsaXAsIF9FeHRlbmRhYmxlQ2xpcCk7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyAtIGFuIG9iamVjdCB0aGF0IHNob3VsZCBjb250YWluIGFsbCBvZiB0aGUgZm9sbG93aW5nIGtleXM6XG4gICAqIC0gaHRtbCAodGhlIGh0bWwgdGVtcGxhdGUgdG8gcmVuZGVyKVxuICAgKiAtIGNzcyAodGhlIGNzcyB0ZW1wbGF0ZSBvZiB0aGUgaXNvbGF0ZWQgdHJlZSlcbiAgICogLSBpbml0UGFyYW1zIChvcHRpb25hbCAvIHRoZSBpbml0aWFsaXNhdGlvbiBwYXJhbWV0ZXJlcyB0aGF0IHdpbGwgYmUgcGFzc2VkIGJvdGggb24gdGhlIGNzcyBhbmQgdGhlIGh0bWwgdGVtcGxhdGVzIGluIG9yZGVyIHRvIHJlbmRlcilcbiAgICogLSBob3N0IChhbiBFbGVtZW50IG9iamVjdCB0aGF0IHdpbGwgaG9zdCB0aGUgaXNvbGF0ZWQgdHJlZSlcbiAgICogLSBjb250YWluZXJQYXJhbXMgKGFuIG9iamVjdCB0aGF0IGhvbGRzIHBhcmFtZXRlcnMgdG8gYWZmZWN0IHRoZSBjb250YWluZXIgb2YgdGhlIGlzb2xhdGVkIHRyZWUsIGUuZy4gd2lkdGgsIGhlaWdodCBldGMpXG4gICAqL1xuICBmdW5jdGlvbiBDbGlwKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIG9sZFByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXApO1xuXG4gICAgdmFyIGF0dHJzVG9QYXNzLCBwcm9wc1RvVXNlO1xuICAgIC8qXG4gICAgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIElmIHRoZSB1c2VyIGRvZXNuJ3QgcGFzcyBhIHNlY29uZCBhcmd1bWVudCBvbiB0aGUgY29uc3RydWN0b3IgdGhlbiB0aGlzIGlzXG4gICAgdGhlIG5ldyB3YXkgb2YgaW5pdGlhbGlzaW5nIGEgR3JvdXAgKG9ubHkgcHJvcHMpLlxuICAgICovXG5cbiAgICBpZiAob2xkUHJvcHMgPT09IG51bGwpIHtcbiAgICAgIGF0dHJzVG9QYXNzID0ge307XG4gICAgICBwcm9wc1RvVXNlID0gcHJvcHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVsc2UsIGluIGNhc2UgdGhlIHVzZXIgaGFzIHBhc3NlZCB0d28gYXJndW1lbnRzIHRoZW4gYm90aCBzaG91bGQgYmUgdXNlZFxuICAgICAgYXR0cnNUb1Bhc3MgPSBwcm9wcztcbiAgICAgIHByb3BzVG9Vc2UgPSBvbGRQcm9wcztcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihDbGlwKS5jYWxsKHRoaXMsIGF0dHJzVG9QYXNzLCBwcm9wc1RvVXNlKSk7IC8vIHRoYXQgbWVhbnMgdGhlIENsaXAgaXMgaG9zdGVkIG9yLCBpbiBvdGhlciB3b3JkcyBhIGhvc3QgaGFzIGJlZW5cbiAgICAvLyBwcm92aWRlZCBvbiB0aGUgcHJvcHMgKGFuZCBub3QgYSBzZWxlY3RvcilcbiAgICAvLyB0aGlzLmlzSG9zdGVkQ2xpcCA9IHRydWU7XG5cbiAgICB2YXIgY2xpcFR5cGUgPSBjb25mLnNlbGZDb250YWluZWRDb250ZXh0SGFuZGxlcjtcbiAgICBfdGhpcy5jbGlwVHlwZSA9IGNsaXBUeXBlO1xuICAgIHZhciBDb250ZXh0SGFubGRlciA9IG51bGw7XG5cbiAgICBpZiAoZG9jdW1lbnQuaGVhZC5jcmVhdGVTaGFkb3dSb290IHx8IGRvY3VtZW50LmhlYWQuYXR0YWNoU2hhZG93KSB7XG4gICAgICBDb250ZXh0SGFubGRlciA9IFdlYkNvbXBvbmVudENvbnRleHRIYW5kbGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb250ZXh0SGFubGRlciA9IElmcmFtZUNvbnRleHRIYW5kbGVyO1xuICAgIH0gLy8gY29uc29sZS5sb2coYHRoaXMuaWQ6ICR7dGhpcy5pZH0sIENsYXNzOiAke3RoaXMuY29uc3RydWN0b3IubmFtZX0sIHRoaXMuaHRtbDogJHt0aGlzLmh0bWx9YClcblxuXG4gICAgdmFyIGNvbnRleHRIYW5sZGVyID0gbmV3IENvbnRleHRIYW5sZGVyKHByb3BzVG9Vc2UpO1xuICAgIF90aGlzLm93bkNvbnRleHQgPSBfb2JqZWN0U3ByZWFkKHt9LCBjb250ZXh0SGFubGRlci5jb250ZXh0LCB7XG4gICAgICBpc0hvc3RlZENsaXA6IF90aGlzLmlzSG9zdGVkQ2xpcFxuICAgIH0pO1xuICAgIF90aGlzLmlmcmFtZSA9IGNvbnRleHRIYW5sZGVyLmlmcmFtZUVsZW1lbnQ7XG4gICAgX3RoaXMuZm9yY2VFeHBvcnRJbmNpZGVudHMgPSB0cnVlO1xuXG4gICAgX3RoaXMub25BZnRlclJlbmRlcigpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENsaXAsIFt7XG4gICAga2V5OiBcIm9uQWZ0ZXJSZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25BZnRlclJlbmRlcigpIHsvLyBpbXBsZW1lbnQgaGVyZVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleHBvcnRDb25zdHJ1Y3Rpb25Bcmd1bWVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhwb3J0Q29uc3RydWN0aW9uQXJndW1lbnRzKCkge1xuICAgICAgLy8gVE9ETyBhbHNvIGV4cG9ydCBDU1MgYW5kIGZvbnRzIHRha2luZyBpbiBhY2NvdW50IHRoZSBwb3RlbnRpYWwgZXhpc3RhbmNlXG4gICAgICAvLyBvZiB0aGVtIG9uIHRoZSBnZXQgbWV0aG9kc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYXR0cnM6IHRoaXMuYXR0cnMsXG4gICAgICAgIHByb3BzOiBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgICAgaG9zdDogdW5kZWZpbmVkLFxuICAgICAgICAgIGh0bWw6IHRoaXMub3duQ29udGV4dC5yb290RWxlbWVudC5pbm5lckhUTUxcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJvb3RFbGVtZW50XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vd25Db250ZXh0LmNsaXBDb250YWluZXI7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENsaXA7XG59KEV4dGVuZGFibGVDbGlwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbGlwOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar selfContainedIncidentsNpmName = '@kissmybutton/self-contained-incidents'; // TODO remove this\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar ExtendableClip =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(ExtendableClip, _Group);\n\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   * - type (optional, defaults to \"iframe\") the type of the Clip. It can be one of the:\n   *  - iframe\n   *  - plain\n   */\n  function ExtendableClip(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, ExtendableClip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExtendableClip).call(this, attrs, props));\n    _this.attrs = attrs;\n    _this.props = props;\n    _this.isTheClip = true;\n    _this.blockingWaitings = {};\n    /**\n     * The cnannels attribute holds a list of all intantiated Channels of the Incidents belonging to the clip\n     * this attribute is only valuable when the Group becomes the Clip\n     * The format of the attribute is:\n     *  key-value pairs in the manner:\n     * <mc_plugin_npm_name>: Channel object\n     */\n\n    _this.instantiatedChannels = {};\n    _this.isHostedClip = true;\n    /**\n     * The instantiatedCopiesContexts is a key-value pairs colleciton holding the\n     * contexts of all instantiated ClipCopies\n     **/\n\n    _this.instantiatedCopiesContexts = {};\n\n    _this.onClipInitialise();\n\n    _this.runTimeInfo = _this.props.runTimeInfo;\n    _this.durationSubs = []; // the audioClip property defines wether the Clip is Audio or not. Defaults to false\n    // and should be overiten to true on Audio Clip\n\n    _this.audioClip = false;\n    return _this;\n  }\n\n  _createClass(ExtendableClip, [{\n    key: \"onClipInitialise\",\n    value: function onClipInitialise() {} // called when group gets initialised\n\n    /**\n     * This method is been called when a new ClipCopy enters the real tree successfully.\n     * @param {object} contextData - keys: clipId, context\n     **/\n\n  }, {\n    key: \"addContext\",\n    value: function addContext(contextData) {\n      this.instantiatedCopiesContexts[contextData.clipId] = contextData.context;\n      contextData.instantiatedCopiesContexts = this.instantiatedCopiesContexts;\n      var res = this.putMessageOnPipe('addContext', contextData, {}, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      return res;\n    }\n    /*\n    ExtendableClip (as its name implies) is a Class that should be extended by\n    any specific kind of Clip, such as Fragmented or SCGroup. This method must\n    be overitten by the new Classes. This definition here is just for reference / help\n    purposes\n    */\n\n  }, {\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      return {\n        attrs: this.attrs,\n        props: this.props\n      };\n    }\n    /**\n     * completely resizes the Clip without any checks\n     */\n\n  }, {\n    key: \"_resize\",\n    value: function _resize(durationFraction) {\n      for (var key in this.instantiatedChannels) {\n        this.instantiatedChannels[key]._resize(durationFraction);\n      }\n\n      this.setNewDuration(this.duration * durationFraction);\n\n      for (var i = 0; i < this.durationSubs.length; i++) {\n        this.durationSubs[i](this.duration);\n      }\n    }\n    /*********************************************************\n    Editing commands input methods\n    *********************************************************/\n\n    /**\n     * This command comes form the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  incident: the Descriptive Incident to be added\n     *  millisecond: the millisecond to add it\n     *  parentGroupId: the id of the Group to which we want to the Incident to\n     * }\n     */\n\n  }, {\n    key: \"addIncident\",\n    value: function addIncident(payload) {\n      var _this2 = this;\n\n      var candidates = this.putMessageOnPipe('addIncident', {\n        incident: payload.incident,\n        millisecond: payload.millisecond,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      }); // concatenate candidates\n      // console.log(candidates);\n\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta + payload.millisecond);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      } // console.log(totalIncidentsByPlugin);\n\n\n      var res = this.checkAddition(totalIncidentsByPlugin);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute(); // up to that point the only context Incident that has been initialised on the\n          // ContextAwareIncidents of the candidates is the original context of the\n          // ExtendableClip.\n\n          for (var _i = 0; _i < candidates.length; _i++) {\n            candidates[_i].responder.addChild(candidates[_i].response, payload.millisecond); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            }); // we also need to add every existing (copied) context to the ContextAwareIncidents\n            // created on the candidates process\n\n\n            for (var contextKey in _this2.instantiatedCopiesContexts) {\n              candidates[_i].responder.putMessageOnPipe('addContext', {\n                clipId: contextKey,\n                context: _this2.instantiatedCopiesContexts[contextKey]\n              }, 'ContextAwareIncidents', {\n                selfExecute: false,\n                direction: _TREECONST._DIRECTIONS._DOWN\n              });\n            }\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    } // *******************************************************\n    // INCIDENTS MANAGEMENT METHODS\n    // POLYMORPHISM APPLIED. IF THE GROUP HAS NO PARENT IT ACTS AS A SCENE. IF THE GROUP HAS PARENT IT ACTS AS\n    // A \"TRANSPARENT GROUP\"\n\n    /**\n     * The method returns either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will add the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkAddition\",\n    value: function checkAddition(incidentsById) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"all-or-nothing\";\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // if the clip had no channel instantiated for the specific key (plugin id) yet create it\n        if (!Object.prototype.hasOwnProperty.call(this.instantiatedChannels, key)) {\n          // intstantiate the channel of the plugin by using the reference to the class definition stored on\n          // the very first incident of the array\n          // console.log(incidentsById[key][0].incident.plugin_channel_class);\n          this.instantiatedChannels[key] = new incidentsById[key][0].incident.plugin_channel_class({\n            runTimeInfo: this.runTimeInfo,\n            context: this.context,\n            subscribe: this.props.subscribe // all channels can subscribe to state or current millisecond changes\n\n          });\n        } // perform the check\n\n\n        var pluginResult = this.instantiatedChannels[key].addIncidents(incidentsById[key], type);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var additionResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return additionResult;\n    }\n    /**\n     * This command comes form the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  incident: the Descriptive Incident to be repositioned\n     *  millisecond: the new millisecond to put it\n     *  parentGroupId: the id of the\n     * }\n     */\n\n  }, {\n    key: \"moveIncident\",\n    value: function moveIncident(payload) {\n      var candidates = this.putMessageOnPipe('moveIncident', {\n        incidentId: payload.id,\n        millisecond: payload.millisecond,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta + payload.millisecond);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug2;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug2 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug2, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var res = this.checkMove(totalIncidentsByPlugin, payload.positionDelta);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i2 = 0; _i2 < candidates.length; _i2++) {\n            candidates[_i2].responder.editPosition(candidates[_i2].response.id, payload.millisecond); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i2].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            });\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * The checkEdit method serves exactly what its name implies. To check if the edit of an Incident (edit of Incident's position given in milliseconds delta)\n     * is valid and accepted, according to the rules defined on the channels.\n     * The method boobles up until it reaches the Clip.\n     * @param {object} incident - the incident to edit\n     * @param {int} millisecondsDelta - the milliseconds delta of the Incident's start time\n     The method should return either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will edit the Incidents on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkMove\",\n    value: function checkMove(incidentsById, millisecondsDelta) {\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var pluginResult = this.instantiatedChannels[key].editIncidents(incidentsById[key], millisecondsDelta);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var editResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return editResult;\n    }\n  }, {\n    key: \"removeIncident\",\n    value: function removeIncident(payload) {\n      var candidates = this.putMessageOnPipe('removeIncident', {\n        incidentId: payload.id,\n        parentGroupId: payload.parentGroupId,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.parentGroupId, {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel();\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug3;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug3 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug3, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var res = this.checkDelete(totalIncidentsByPlugin);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i3 = 0; _i3 < candidates.length; _i3++) {\n            candidates[_i3].responder.removeChild(candidates[_i3].response.id); // recalculate duration the groups that we added\n            // the incidents to along with their parents\n\n\n            candidates[_i3].responder.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._UP\n            });\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * The checkDelete method serves exactly what its name implies. To check if the deletion of an Incident\n     * is valid and accepted, according to the rules defined on the channels.\n     * The method boobles up until it reaches the Clip.\n     * @param {object} incident - the incident to edit\n      The result might be either:\n        {\n            result:true,\n            execute: // an array of functions that when executed it will remove the Incident on the Channels\n        }\n        or\n        {\n            result: false,\n            errors\n        }\n    */\n\n  }, {\n    key: \"checkDelete\",\n    value: function checkDelete(incidentsById) {\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var pluginResult = this.instantiatedChannels[key].removeIncidents(incidentsById[key]);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var removeResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return removeResult;\n    }\n    /**\n     * This command comes form the Clip's parent Descriptor class. The payload\n     * is identical to the payload that comes to the Description class:\n     * {\n     *  id: the id of the Incident to resize\n     *  newSize: the milliseconds of the new duration\n     *  fraction: the division of the new duration to the current\n     * }\n     */\n\n  }, {\n    key: \"resizeIncident\",\n    value: function resizeIncident(payload) {\n      var candidates = this.putMessageOnPipe('resize', {\n        incidentId: payload.id,\n        newSize: payload.newSize,\n        fraction: payload.fraction,\n        contextData: {\n          clipId: this.id,\n          context: this.context\n        },\n        audio: this.audioClip\n      }, payload.id, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._DOWN\n      });\n      var totalIncidentsByPlugin = {};\n\n      for (var i = 0; i < candidates.length; i++) {\n        var incidentsByPlugin = candidates[i].response.getIncidentsByChannel(candidates[i].positionDelta);\n\n        for (var pluginName in incidentsByPlugin) {\n          var _totalIncidentsByPlug4;\n\n          if (!Object.prototype.hasOwnProperty.call(totalIncidentsByPlugin, pluginName)) {\n            totalIncidentsByPlugin[pluginName] = [];\n          }\n\n          (_totalIncidentsByPlug4 = totalIncidentsByPlugin[pluginName]).push.apply(_totalIncidentsByPlug4, _toConsumableArray(incidentsByPlugin[pluginName]));\n        }\n      }\n\n      var positionDelta = 0;\n\n      if (candidates.length > 0) {\n        positionDelta = candidates[0].positionDelta;\n      }\n\n      var res = this.checkResize(payload.fraction, totalIncidentsByPlugin, positionDelta);\n\n      if (res.result === true) {\n        var successCallback = function successCallback() {\n          res.execute();\n\n          for (var _i4 = 0; _i4 < candidates.length; _i4++) {\n            candidates[_i4].responder.setNewDuration(payload.newSize);\n          }\n        };\n\n        return {\n          result: true,\n          execute: successCallback\n        };\n      }\n\n      return res;\n    }\n    /**\n     * checks if a duration edit is feasible and doesn't cause conflicts\n     * @param {int} duration - the new duration\n     **/\n\n  }, {\n    key: \"checkResize\",\n    value: function checkResize(durationFraction, incidentsById) {\n      var adjustMillisecond = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // prepare the return payload\n      var toReturnResult = true;\n      var toReturnErrors = [];\n      var toReturnExecutables = []; // for each key of the incidentsById object perform the check\n\n      for (var key in incidentsById) {\n        // perform the check\n        var adjustedIncidents = helper.systoleDiastoleProjections(incidentsById[key], durationFraction, adjustMillisecond);\n        var pluginResult = this.instantiatedChannels[key].checkResizedIncidents(adjustedIncidents);\n        toReturnResult = toReturnResult && pluginResult.result;\n\n        if (pluginResult.result === false) {\n          toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n        } else {\n          toReturnExecutables.push(pluginResult.execute);\n        }\n      } // enf of iteration on the incidentsById keys\n\n\n      var toReturnExecute = function toReturnExecute() {\n        for (var i = 0; i < toReturnExecutables.length; i++) {\n          toReturnExecutables[i]();\n        }\n      };\n\n      var editResult = {\n        result: toReturnResult,\n        errors: toReturnErrors,\n        execute: toReturnExecute\n      };\n      return editResult;\n    }\n  }, {\n    key: \"getIncidentsByChannel\",\n\n    /**\n     * Returns an object with keys the keys of all the plugins Incidents of which appear in the\n     * tree of the Group. All Incidents are projected to the Group's timeline.\n     * The array includes the Group's projection too\n     */\n    value: function getIncidentsByChannel() {\n      var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var incidentsByPlugin = {};\n      incidentsByPlugin[selfContainedIncidentsNpmName] = [{\n        millisecond: adjustMillisecond,\n        incident: this,\n        id: this.id\n      }];\n      return incidentsByPlugin;\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(newVal) {\n      this.volume = parseFloat(newVal); // this.putMessageOnPipe(pipeMessages._GAIN_CHANGE, { gain: newVal }, false, \"down\");\n    }\n    /**\n     * Eventhough Clips have their own context, still they might belong to another Clip's\n     * tree (CASI). In such a case this method gives the oportunity to set things up\n     * and do operations related with their parent's context (such as subscribing to audio effect nodes)\n     **/\n\n  }, {\n    key: \"_onGetContextOnce\",\n    value: function _onGetContextOnce(parentClipContext) {\n      return;\n    } // special recalcDuration handling so any potential clip copies update their trees\n\n  }, {\n    key: \"handleRecalcDuration\",\n    value: function handleRecalcDuration(target, payload) {\n      // eslint-disable-line no-unused-vars\n      if (this._calculateDuration()) {\n        for (var i = 0; i < this.durationSubs.length; i++) {\n          this.durationSubs[i](this.duration);\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Method called on progress of the timed incident.\n     * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n     * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n     * @param {string} contextId - defaults to the id of the realClip itself. Don't forget that a realClip\n     *      might belong to a selector Clip (so it's a Fragmented Clip), with many \"real\" ClipCopies. All ClipCopies hold\n     *      a reference to this Clip via their \"realClip\" property. Whenever any\n     *      of these ClipCopies progresses (via the onProgress method) calls\n     *      the \"onProgress\" of the realClip, passing their id so the ContextAwareIncidents\n     *      that will also progress via the Channels know which specific Incident to progress.\n     *      That's the result of keeping just one real tree, belonging always to the realClip\n     *      (either Fragmented or Hosted) ending to ContextAwareIncident leafs that\n     *      are the ones to hold the ClipCopies instances.\n     * @param {boolean} forceReset - set to true in cases we want full flash of the state\n     */\n\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds, contextId) {\n      var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!contextId) {\n        contextId = this.id;\n      }\n\n      for (var key in this.instantiatedChannels) {\n        var channel = this.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, contextId, forceReset);\n      }\n    }\n  }, {\n    key: \"flash\",\n    value: function flash() {\n      for (var key in this.instantiatedChannels) {\n        var channel = this.instantiatedChannels[key];\n        channel.moveTo(0, this.runTimeInfo.currentMillisecond, this.id, true);\n      }\n    } // duration changes pub/sub\n\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange(method) {\n      this.durationSubs.push(method);\n    }\n    /********************************************************/\n\n    /******** BLOCKING WAITINGS SET / REMOVE ***************/\n\n  }, {\n    key: \"handleSetBlockingWaiting\",\n    value: function handleSetBlockingWaiting(target, payload) {\n      console.log('handling set blocking waiting');\n      console.log(payload);\n    }\n  }, {\n    key: \"handleRemoveBlockingWaiting\",\n    value: function handleRemoveBlockingWaiting(target, payload) {\n      console.log('handling remove blocking waiting');\n      console.log(payload);\n    }\n  }, {\n    key: \"context\",\n    get: function get() {\n      return this.ownContext;\n    }\n  }]);\n\n  return ExtendableClip;\n}(Group);\n\nmodule.exports = ExtendableClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar HTMLFragmentContextHandler = __webpack_require__(/*! ./helpers/HTMLFragmentContextHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./ExtendableClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar FragmentedClip =\n/*#__PURE__*/\nfunction (_ExtendableClip) {\n  _inherits(FragmentedClip, _ExtendableClip);\n\n  function FragmentedClip() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, FragmentedClip);\n\n    var attrsToPass, propsToUse;\n    /*\n    backwards compatibility. If the user doesn't pass a second argument on the constructor then this is\n    the new way of initialising a Group (only props).\n    */\n\n    if (oldProps === null) {\n      attrsToPass = {};\n      propsToUse = props;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = props;\n      propsToUse = oldProps;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FragmentedClip).call(this, attrsToPass, propsToUse));\n    var contextHanlder = new HTMLFragmentContextHandler(_objectSpread({}, propsToUse, {\n      html: Object.prototype.hasOwnProperty.call(propsToUse, \"html\") ? propsToUse.html : _this.html,\n      css: Object.prototype.hasOwnProperty.call(propsToUse, \"css\") ? propsToUse.css : _this.css,\n      fonts: Object.prototype.hasOwnProperty.call(propsToUse, \"fonts\") ? propsToUse.fonts : _this.fonts\n    }));\n    _this.ownContext = _objectSpread({}, contextHanlder.context, {\n      isHostedClip: false\n    });\n    _this.iframe = contextHanlder.iframeElement;\n    _this.forceExportIncidents = true;\n\n    _this.onDOMCLipInitialise(); // as soon as a Fragmented Clip is been intialised that means the Descriptive\n    // Clip has a selector and not a host. Thus is not a hosted clip\n    // this.isHostedClip = false;\n\n\n    return _this;\n  }\n\n  _createClass(FragmentedClip, [{\n    key: \"exportConstructionArguments\",\n    value: function exportConstructionArguments() {\n      // TODO also export CSS and fonts taking in account the potential existance\n      // of them on the get methods\n      // console.log(this.ownContext.rootElement.innerHTML);\n      return {\n        attrs: this.attrs,\n        props: _objectSpread({}, this.props, {\n          html: this.ownContext.rootElement.innerHTML\n        })\n      };\n    }\n  }, {\n    key: \"onDOMCLipInitialise\",\n    value: function onDOMCLipInitialise() {// implement here\n    }\n  }, {\n    key: \"rootElement\",\n    get: function get() {\n      return this.ownContext.clipContainer;\n    }\n  }]);\n\n  return FragmentedClip;\n}(ExtendableClip);\n\nmodule.exports = FragmentedClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NullClip =\n/*#__PURE__*/\nfunction () {\n  function NullClip() {\n    _classCallCheck(this, NullClip);\n  }\n\n  _createClass(NullClip, [{\n    key: \"addIncident\",\n    value: function addIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"moveIncident\",\n    value: function moveIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"removeIncident\",\n    value: function removeIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"resizeIncident\",\n    value: function resizeIncident() {\n      return {\n        result: true,\n        execute: function execute() {}\n      };\n    }\n  }, {\n    key: \"flash\",\n    value: function flash() {}\n  }, {\n    key: \"_resize\",\n    value: function _resize() {}\n  }, {\n    key: \"onProgress\",\n    value: function onProgress() {}\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return 0;\n    }\n  }]);\n\n  return NullClip;\n}();\n\nmodule.exports = NullClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DbGlwL051bGxDbGlwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvQ2xpcC9OdWxsQ2xpcC5qcz8wOTU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBOdWxsQ2xpcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE51bGxDbGlwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdWxsQ2xpcCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTnVsbENsaXAsIFt7XG4gICAga2V5OiBcImFkZEluY2lkZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEluY2lkZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKCkge31cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1vdmVJbmNpZGVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlSW5jaWRlbnQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRydWUsXG4gICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIGV4ZWN1dGUoKSB7fVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlSW5jaWRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlSW5jaWRlbnQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRydWUsXG4gICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIGV4ZWN1dGUoKSB7fVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzaXplSW5jaWRlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzaXplSW5jaWRlbnQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRydWUsXG4gICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIGV4ZWN1dGUoKSB7fVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmxhc2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmxhc2goKSB7fVxuICB9LCB7XG4gICAga2V5OiBcIl9yZXNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2l6ZSgpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwib25Qcm9ncmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblByb2dyZXNzKCkge31cbiAgfSwge1xuICAgIGtleTogXCJkdXJhdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE51bGxDbGlwO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE51bGxDbGlwOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar DescriptiveGroup = __webpack_require__(/*! ../DescriptiveIncidents/DescriptiveGroup */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Playable =\n/*#__PURE__*/\nfunction (_DescriptiveGroup) {\n  _inherits(Playable, _DescriptiveGroup);\n\n  function Playable(attrs, props) {\n    var _this;\n\n    _classCallCheck(this, Playable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Playable).call(this, attrs, props));\n    _this.runTimeInfo = {\n      currentMillisecond: 0,\n      state: 'idle' // supported states: idle, playing, paused, blocked, armed\n\n    };\n    /**\n      @member {object} - listeners are functions to be executed on time change of the Clip.\n      It has the following format:\n     listeners: {\n        listener_id: {\n                 funct : the function to be executed\n                 threshold : the threshold of delta\n                 roundTo : round millisecond\n             },\n             listener_id: {\n                 funct : the function to be executed\n                 threshold : the threshold of delta\n                 roundTo : round millisecond\n             },\n             ...\n       }\n       */\n\n    _this.listeners = {}; // previousTimeStamp is a property holding the last timestamp that the\n    // requestAnimationFrame ran\n\n    _this.previousTimeStamp = -1;\n    _this.speed = 1;\n    return _this;\n  }\n  /*********************** execution methods  *********************\n   ****************************************************************/\n\n\n  _createClass(Playable, [{\n    key: \"_setState\",\n    value: function _setState(newState) {\n      if (newState != this.runTimeInfo.state) {\n        this.runTimeInfo.state = newState; // the only timer and the only responsible for Clip execution is the Clip\n        // All Incidents contained on a Clip are been executed by the Clip itself via its channels.\n        // Thus, the only Incidents that need to know about the state of the root Clip\n        // at any time are only the Clips\n\n        this.putMessageOnPipe('setState', newState, 'Clips', {\n          selfExecute: false,\n          direction: _TREECONST._DIRECTIONS._DOWN\n        });\n\n        for (var key in this.listeners) {\n          var listner = this.listeners[key];\n          listner.funct(this.runTimeInfo.currentMillisecond, newState);\n        }\n      }\n    }\n  }, {\n    key: \"handleSetState\",\n    value: function handleSetState(target, payload) {\n      this._setState(payload);\n    } // execution methods\n\n  }, {\n    key: \"play\",\n    value: function play() {\n      var _this2 = this;\n\n      var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.runTimeInfo.state === 'idle' || this.runTimeInfo.state === 'paused' || this.runTimeInfo.state === 'armed' || this.runTimeInfo.state === 'transitional' || this.runTimeInfo.state === \"blocked\") {\n        if (this.runTimeInfo.state === 'paused') {\n          var delta = new Date().getTime() - this.pauseMoment;\n          this.previousTimeStamp += delta;\n        }\n\n        this._setState('playing');\n\n        this.onPlay();\n\n        if (debug === false) {\n          window.requestAnimationFrame(function (timestamp) {\n            _this2.step(timestamp);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.runTimeInfo.state === 'playing') {\n        this._setState('paused');\n\n        this.pauseMoment = new Date().getTime();\n        this.onWait();\n      }\n    }\n    /* armed state means the Clip is on paused state after transition */\n\n  }, {\n    key: \"arm\",\n    value: function arm() {\n      if (this.runTimeInfo.state === 'transitional') {\n        this._setState('armed');\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this._setState('idle');\n\n      this.previousTimeStamp = -1;\n      this.runTimeInfo.currentMillisecond = 0;\n    }\n    /* in order to start a journey via the TimeCapsule the Playable needs first to stop */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._setState('transitional');\n\n      this.previousTimeStamp = -1;\n    }\n  }, {\n    key: \"block\",\n    value: function block() {\n      this._setState('blocked');\n\n      this.previousTimeStamp = -1;\n    }\n  }, {\n    key: \"onPlay\",\n    value: function onPlay() {}\n  }, {\n    key: \"onWait\",\n    value: function onWait() {}\n  }, {\n    key: \"playableProgress\",\n    value: function playableProgress(fraction, millisecond) {\n      if (this.isTheRootClip) {\n        for (var key in this.listeners) {\n          var listner = this.listeners[key]; // if the listener is only for state change continue\n\n          if (listner.onlyOnStateChange === true) {\n            continue;\n          } // console.log(`Math.abs(${milliseconds} + ${listner.cavaDelta} - ${this.runTimeInfo.currentMillisecond}) > ${listner.threshold}`);\n\n\n          if (Math.abs(millisecond + listner.cavaDelta - this.runTimeInfo.currentMillisecond) > listner.threshold) {\n            listner.funct(helper.roundNumberTo(millisecond, listner.roundTo), this.runTimeInfo.state);\n            listner.cavaDelta = 0;\n          } else {\n            listner.cavaDelta += Math.abs(millisecond - this.runTimeInfo.currentMillisecond);\n          }\n        }\n\n        this.onProgress(fraction, millisecond);\n        this.runTimeInfo.currentMillisecond = millisecond;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"step\",\n    // *******************************************************\n    // STEP FUNCTION\n    value: function step(timestamp) {\n      var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.runTimeInfo.state !== 'playing') {\n        return;\n      }\n\n      var that = this;\n\n      if (this.previousTimeStamp === -1) {\n        this.previousTimeStamp = timestamp;\n      } // progressStep is the progress made from previousTimeStamp both in milliseconds and in fraction [0 to 1]\n\n\n      var progress = {\n        milliseconds: Math.round(this.runTimeInfo.currentMillisecond + (timestamp - this.previousTimeStamp) * this.speed),\n        fraction: (this.runTimeInfo.currentMillisecond + (timestamp - this.previousTimeStamp) * this.speed) / this.duration\n      };\n\n      if (progress.fraction >= 1) {\n        this.playableProgress(1, this.duration);\n        this.complete();\n        return;\n      } else if (progress.fraction < 0) {\n        this.playableProgress(0, 0);\n        this.complete(); // this.broadcastEvent('state-change', { oldState: \"playing\", newState: \"idle\" });\n\n        return;\n      }\n\n      this.playableProgress(progress.fraction, progress.milliseconds);\n      this.previousTimeStamp = timestamp;\n\n      if (debug === false) {\n        window.requestAnimationFrame(that.step.bind(that));\n      }\n    } // ************ PUB SUB ********************\n    // *****************************************\n\n    /**\n      By subscribing a module can get notified about changes on the Clip's time\n      subscribe method subscribes a function to the time change dispatcher. As Clip uses requestAnimationFrame for its timing\n      each cyrcle / step gets the current time and subtracts the previous time so it know how many milliseconds has elapsed\n      since last step. Subscribers can set to get informed about time changes only if the delta is greater than a given\n      number (e.g. greater than 300ms). That property is passed as the second argument \"threshold\".\n      Finally if any of the subscribers want the Scene to provide back a rounded number of the milliseconds. Options:\n        - 1 (round it on its actual units\n       - 10 (round it on tenths)\n       - 100 (round it on hundreds)\n       - 1000 (round it on thousands)\n      the first argument provides an id to the listener for future reference (deletion etc)\n      the second argument is a function that takes two arguments: millisecond, state (current millisecond of the Scene\n      and the state of it  */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(id, funct, threshold, roundTo) {\n      var onlyOnStateChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (!threshold) {\n        threshold = 0;\n      }\n\n      if (!roundTo) {\n        roundTo = 1; // round second to its units, meaning leave it as it is\n      }\n\n      this.listeners[id] = {\n        funct: funct,\n        threshold: threshold,\n        roundTo: roundTo,\n        cavaDelta: 0,\n        onlyOnStateChange: onlyOnStateChange\n      };\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      if (Object.prototype.hasOwnProperty.call(this.listeners, id)) {\n        delete this.listeners[id];\n      }\n    }\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange(funct) {\n      if (this.isTheRootClip) {\n        this.realClip.subscribeToDurationChange(funct);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"executionSpeed\",\n    set: function set(speed) {\n      if (!this.isTheRootClip) {\n        return false;\n      }\n\n      this.speed = parseFloat(speed);\n    }\n  }]);\n\n  return Playable;\n}(DescriptiveGroup);\n\nmodule.exports = Playable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/*\ndna: {\n    host\n    descriptiveIncident\n}\n*/\n\nvar ClipClone =\n/*#__PURE__*/\nfunction () {\n  function ClipClone(dna) {\n    _classCallCheck(this, ClipClone);\n\n    this.runTimeInfo = {\n      currentMillisecond: 0\n    };\n    this.id = helper.getAnId();\n    this.realClip = dna.descriptiveIncident.realClip; // In order to render itself on the given element first it needs the props (including html and css)\n    // from the real Clip it copies\n\n    var constructionArgs = dna.descriptiveIncident.realClip.exportConstructionArguments(); // it properly sets its own host on the props to use to initialise its own clip\n\n    var hostedProps = _objectSpread({}, constructionArgs.props, {\n      selector: undefined,\n      host: dna.host,\n      id: this.id\n    }); // we create a clip because Clips on creation render and thus have their own context\n\n\n    this.ownClip = new dna.descriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps); // flushes the realClip with its ownClip's context\n\n    dna.descriptiveIncident.realClip.addContext({\n      clipId: this.id,\n      context: this.ownClip.ownContext,\n      synchronize: dna.synchronize\n    }, true);\n  }\n\n  _createClass(ClipClone, [{\n    key: \"onProgress\",\n    value: function onProgress(fraction, milliseconds) {\n      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      for (var key in this.realClip.instantiatedChannels) {\n        var channel = this.realClip.instantiatedChannels[key];\n        channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, forceReset);\n      }\n\n      this.runTimeInfo.currentMillisecond = milliseconds;\n    }\n  }]);\n\n  return ClipClone;\n}();\n\nmodule.exports = ClipClone;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DbGlwL1Jvb3RDbGlwQ2xvbmUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DbGlwL1Jvb3RDbGlwQ2xvbmUuanM/NjNiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuLypcbmRuYToge1xuICAgIGhvc3RcbiAgICBkZXNjcmlwdGl2ZUluY2lkZW50XG59XG4qL1xuXG52YXIgQ2xpcENsb25lID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2xpcENsb25lKGRuYSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwQ2xvbmUpO1xuXG4gICAgdGhpcy5ydW5UaW1lSW5mbyA9IHtcbiAgICAgIGN1cnJlbnRNaWxsaXNlY29uZDogMFxuICAgIH07XG4gICAgdGhpcy5pZCA9IGhlbHBlci5nZXRBbklkKCk7XG4gICAgdGhpcy5yZWFsQ2xpcCA9IGRuYS5kZXNjcmlwdGl2ZUluY2lkZW50LnJlYWxDbGlwOyAvLyBJbiBvcmRlciB0byByZW5kZXIgaXRzZWxmIG9uIHRoZSBnaXZlbiBlbGVtZW50IGZpcnN0IGl0IG5lZWRzIHRoZSBwcm9wcyAoaW5jbHVkaW5nIGh0bWwgYW5kIGNzcylcbiAgICAvLyBmcm9tIHRoZSByZWFsIENsaXAgaXQgY29waWVzXG5cbiAgICB2YXIgY29uc3RydWN0aW9uQXJncyA9IGRuYS5kZXNjcmlwdGl2ZUluY2lkZW50LnJlYWxDbGlwLmV4cG9ydENvbnN0cnVjdGlvbkFyZ3VtZW50cygpOyAvLyBpdCBwcm9wZXJseSBzZXRzIGl0cyBvd24gaG9zdCBvbiB0aGUgcHJvcHMgdG8gdXNlIHRvIGluaXRpYWxpc2UgaXRzIG93biBjbGlwXG5cbiAgICB2YXIgaG9zdGVkUHJvcHMgPSBfb2JqZWN0U3ByZWFkKHt9LCBjb25zdHJ1Y3Rpb25BcmdzLnByb3BzLCB7XG4gICAgICBzZWxlY3RvcjogdW5kZWZpbmVkLFxuICAgICAgaG9zdDogZG5hLmhvc3QsXG4gICAgICBpZDogdGhpcy5pZFxuICAgIH0pOyAvLyB3ZSBjcmVhdGUgYSBjbGlwIGJlY2F1c2UgQ2xpcHMgb24gY3JlYXRpb24gcmVuZGVyIGFuZCB0aHVzIGhhdmUgdGhlaXIgb3duIGNvbnRleHRcblxuXG4gICAgdGhpcy5vd25DbGlwID0gbmV3IGRuYS5kZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLkluY2lkZW50KGNvbnN0cnVjdGlvbkFyZ3MuYXR0cnMsIGhvc3RlZFByb3BzKTsgLy8gZmx1c2hlcyB0aGUgcmVhbENsaXAgd2l0aCBpdHMgb3duQ2xpcCdzIGNvbnRleHRcblxuICAgIGRuYS5kZXNjcmlwdGl2ZUluY2lkZW50LnJlYWxDbGlwLmFkZENvbnRleHQoe1xuICAgICAgY2xpcElkOiB0aGlzLmlkLFxuICAgICAgY29udGV4dDogdGhpcy5vd25DbGlwLm93bkNvbnRleHQsXG4gICAgICBzeW5jaHJvbml6ZTogZG5hLnN5bmNocm9uaXplXG4gICAgfSwgdHJ1ZSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2xpcENsb25lLCBbe1xuICAgIGtleTogXCJvblByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3MoZnJhY3Rpb24sIG1pbGxpc2Vjb25kcykge1xuICAgICAgdmFyIGZvcmNlUmVzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5yZWFsQ2xpcC5pbnN0YW50aWF0ZWRDaGFubmVscykge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMucmVhbENsaXAuaW5zdGFudGlhdGVkQ2hhbm5lbHNba2V5XTtcbiAgICAgICAgY2hhbm5lbC5tb3ZlVG8odGhpcy5ydW5UaW1lSW5mby5jdXJyZW50TWlsbGlzZWNvbmQsIG1pbGxpc2Vjb25kcywgdGhpcy5pZCwgZm9yY2VSZXNldCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVuVGltZUluZm8uY3VycmVudE1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmRzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDbGlwQ2xvbmU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpcENsb25lOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar conf = __webpack_require__(/*! ../../_configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\");\n\nvar HTMLFragmentContextHandler =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function HTMLFragmentContextHandler() {\n    var originalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HTMLFragmentContextHandler);\n\n    var props = Object.assign({}, originalProps);\n\n    if (!helper.isObject(props)) {\n      helper.error(\"HTMLFragmentContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"html\")) {\n      props.html = '';\n    }\n\n    this.isDOM = true;\n    var fragment = document.createDocumentFragment();\n    var wrapper = document.createElement('div');\n\n    if (Object.prototype.hasOwnProperty.call(props, \"containerParams\")) {\n      if (Object.prototype.hasOwnProperty.call(props, \"width\")) {\n        wrapper.style.width = props.containerParams.width;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props, \"height\")) {\n        wrapper.style.height = props.containerParams.height;\n      }\n    }\n\n    wrapper.innerHTML = helper.renderTemplate(props.html, {\n      params: props.initParams\n    });\n    fragment.appendChild(wrapper);\n    wrapper.style.overflow = \"hidden\";\n    this.rootElement = wrapper;\n    this.context = {\n      document: document,\n      window: window,\n      clipContainer: this.rootElement,\n      rootElement: wrapper,\n      unmount: function unmount() {\n        props.host.removeChild(fragment);\n      },\n      getElements: this.getElements.bind(this),\n      getMCID: this.getMCID.bind(this),\n      setMCID: this.setMCID.bind(this),\n      getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n      getElementByMCID: this.getElementByMCID.bind(this),\n      fragment: true\n    };\n    this.elementsByMCID = {};\n  }\n\n  _createClass(HTMLFragmentContextHandler, [{\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n        return this.elementsByMCID[mcid];\n      } else {\n        var element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));\n        this.elementsByMCID[mcid] = element;\n        return element;\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(selector) {\n      return Array.from(this.context.rootElement.querySelectorAll(selector));\n    }\n  }, {\n    key: \"getMCID\",\n    value: function getMCID(element) {\n      return element.getAttribute(conf.elements_data_attribute_name);\n    }\n  }, {\n    key: \"setMCID\",\n    value: function setMCID(element, mcid) {\n      element.setAttribute(conf.elements_data_attribute_name, mcid);\n    }\n  }, {\n    key: \"getElementSelectorByMCID\",\n    value: function getElementSelectorByMCID(mcid) {\n      return '[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]';\n    }\n  }]);\n\n  return HTMLFragmentContextHandler;\n}();\n\nmodule.exports = HTMLFragmentContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DbGlwL2hlbHBlcnMvSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9DbGlwL2hlbHBlcnMvSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIuanM/ZjQ2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcblxudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIGNvbmYgPSByZXF1aXJlKCcuLi8uLi9fY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZicpO1xuXG52YXIgSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzIC0gYW4gb2JqZWN0IHRoYXQgc2hvdWxkIGNvbnRhaW4gYWxsIG9mIHRoZSBmb2xsb3dpbmcga2V5czpcbiAgICogLSBodG1sICh0aGUgaHRtbCB0ZW1wbGF0ZSB0byByZW5kZXIpXG4gICAqIC0gY3NzICh0aGUgY3NzIHRlbXBsYXRlIG9mIHRoZSBpc29sYXRlZCB0cmVlKVxuICAgKiAtIGluaXRQYXJhbXMgKG9wdGlvbmFsIC8gdGhlIGluaXRpYWxpc2F0aW9uIHBhcmFtZXRlcmVzIHRoYXQgd2lsbCBiZSBwYXNzZWQgYm90aCBvbiB0aGUgY3NzIGFuZCB0aGUgaHRtbCB0ZW1wbGF0ZXMgaW4gb3JkZXIgdG8gcmVuZGVyKVxuICAgKiAtIGhvc3QgKGFuIEVsZW1lbnQgb2JqZWN0IHRoYXQgd2lsbCBob3N0IHRoZSBpc29sYXRlZCB0cmVlKVxuICAgKiAtIGNvbnRhaW5lclBhcmFtcyAoYW4gb2JqZWN0IHRoYXQgaG9sZHMgcGFyYW1ldGVycyB0byBhZmZlY3QgdGhlIGNvbnRhaW5lciBvZiB0aGUgaXNvbGF0ZWQgdHJlZSwgZS5nLiB3aWR0aCwgaGVpZ2h0IGV0YylcbiAgICovXG4gIGZ1bmN0aW9uIEhUTUxGcmFnbWVudENvbnRleHRIYW5kbGVyKCkge1xuICAgIHZhciBvcmlnaW5hbFByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIVE1MRnJhZ21lbnRDb250ZXh0SGFuZGxlcik7XG5cbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbFByb3BzKTtcblxuICAgIGlmICghaGVscGVyLmlzT2JqZWN0KHByb3BzKSkge1xuICAgICAgaGVscGVyLmVycm9yKFwiSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIgZXhwZWN0cyBhbiBvYmplY3Qgb24gaXRzIGNvbnN0cnVjdG9yLiBcIi5jb25jYXQoX3R5cGVvZihwcm9wcyksIFwiIHBhc3NlZFwiKSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIFwiaHRtbFwiKSkge1xuICAgICAgcHJvcHMuaHRtbCA9ICcnO1xuICAgIH1cblxuICAgIHRoaXMuaXNET00gPSB0cnVlO1xuICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJjb250YWluZXJQYXJhbXNcIikpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIFwid2lkdGhcIikpIHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS53aWR0aCA9IHByb3BzLmNvbnRhaW5lclBhcmFtcy53aWR0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJoZWlnaHRcIikpIHtcbiAgICAgICAgd3JhcHBlci5zdHlsZS5oZWlnaHQgPSBwcm9wcy5jb250YWluZXJQYXJhbXMuaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gaGVscGVyLnJlbmRlclRlbXBsYXRlKHByb3BzLmh0bWwsIHtcbiAgICAgIHBhcmFtczogcHJvcHMuaW5pdFBhcmFtc1xuICAgIH0pO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgIHdyYXBwZXIuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgIHRoaXMucm9vdEVsZW1lbnQgPSB3cmFwcGVyO1xuICAgIHRoaXMuY29udGV4dCA9IHtcbiAgICAgIGRvY3VtZW50OiBkb2N1bWVudCxcbiAgICAgIHdpbmRvdzogd2luZG93LFxuICAgICAgY2xpcENvbnRhaW5lcjogdGhpcy5yb290RWxlbWVudCxcbiAgICAgIHJvb3RFbGVtZW50OiB3cmFwcGVyLFxuICAgICAgdW5tb3VudDogZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICAgICAgcHJvcHMuaG9zdC5yZW1vdmVDaGlsZChmcmFnbWVudCk7XG4gICAgICB9LFxuICAgICAgZ2V0RWxlbWVudHM6IHRoaXMuZ2V0RWxlbWVudHMuYmluZCh0aGlzKSxcbiAgICAgIGdldE1DSUQ6IHRoaXMuZ2V0TUNJRC5iaW5kKHRoaXMpLFxuICAgICAgc2V0TUNJRDogdGhpcy5zZXRNQ0lELmJpbmQodGhpcyksXG4gICAgICBnZXRFbGVtZW50U2VsZWN0b3JCeU1DSUQ6IHRoaXMuZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lELmJpbmQodGhpcyksXG4gICAgICBnZXRFbGVtZW50QnlNQ0lEOiB0aGlzLmdldEVsZW1lbnRCeU1DSUQuYmluZCh0aGlzKSxcbiAgICAgIGZyYWdtZW50OiB0cnVlXG4gICAgfTtcbiAgICB0aGlzLmVsZW1lbnRzQnlNQ0lEID0ge307XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSFRNTEZyYWdtZW50Q29udGV4dEhhbmRsZXIsIFt7XG4gICAga2V5OiBcImdldEVsZW1lbnRCeU1DSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudEJ5TUNJRChtY2lkKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZWxlbWVudHNCeU1DSUQsIG1jaWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzQnlNQ0lEW21jaWRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmNvbnRleHQucm9vdEVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmdldEVsZW1lbnRTZWxlY3RvckJ5TUNJRChtY2lkKSk7XG4gICAgICAgIHRoaXMuZWxlbWVudHNCeU1DSURbbWNpZF0gPSBlbGVtZW50O1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RWxlbWVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudHMoc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY29udGV4dC5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE1DSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TUNJRChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoY29uZi5lbGVtZW50c19kYXRhX2F0dHJpYnV0ZV9uYW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0TUNJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNQ0lEKGVsZW1lbnQsIG1jaWQpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGNvbmYuZWxlbWVudHNfZGF0YV9hdHRyaWJ1dGVfbmFtZSwgbWNpZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVsZW1lbnRTZWxlY3RvckJ5TUNJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbGVtZW50U2VsZWN0b3JCeU1DSUQobWNpZCkge1xuICAgICAgcmV0dXJuICdbJyArIGNvbmYuZWxlbWVudHNfZGF0YV9hdHRyaWJ1dGVfbmFtZSArICc9XCInICsgbWNpZCArICdcIl0nO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIVE1MRnJhZ21lbnRDb250ZXh0SGFuZGxlcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBIVE1MRnJhZ21lbnRDb250ZXh0SGFuZGxlcjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/HTMLFragmentContextHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\niframe[seamless]{\n    background-color: transparent;\n    border: 0px none transparent;\n    padding: 0px;\n    overflow: hidden;\n}\n\nmight need more work for IE. See here: https://stackoverflow.com/a/29209248\n*/\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar conf = __webpack_require__(/*! ../../_configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\");\n\nvar IframeContextHandler =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function IframeContextHandler() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, IframeContextHandler);\n\n    if (!helper.isObject(props)) {\n      helper.error(\"ContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'html')) {\n      helper.error(\"ContextHandler expects the html key on its constructor properties which is missing\");\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'css')) {\n      helper.error(\"ContextHandler expects the css key on its constructor properties which is missing\");\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'initParams')) {\n      helper.info(\"ContextHandler got null initParams\");\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, 'host')) {\n      helper.error(\"ContextHandler expects the host key on its constructor properties which is missing\");\n      return false;\n    }\n\n    this.isDOM = true;\n    var ownerDocument = props.host.ownerDocument;\n\n    if (!ownerDocument.getElementById(\"@kissmybutton/motorcortex/iframeContextHandler/css\")) {\n      var seamlessCSS = \"\\n            iframe[seamless]{\\n                background-color: transparent;\\n                border: 0px none transparent;\\n                padding: 0px;\\n                overflow: hidden;\\n            }\\n            \";\n      var iframesCSS = ownerDocument.createElement('style');\n      iframesCSS.id = \"@kissmybutton/motorcortex/iframeContextHandler/css\";\n      iframesCSS.type = 'text/css';\n      var Head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];\n\n      if (iframesCSS.styleSheet) {\n        iframesCSS.styleSheet.cssText = seamlessCSS;\n      } else {\n        iframesCSS.appendChild(ownerDocument.createTextNode(seamlessCSS));\n      }\n\n      Head.appendChild(iframesCSS);\n    } // Create an iframe:\n\n\n    var iframe = ownerDocument.createElement('iframe');\n    props.host.appendChild(iframe);\n    iframe.setAttribute(\"seamless\", \"seamless\");\n\n    if (Object.prototype.hasOwnProperty.call(props, 'containerParams')) {\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, 'width')) {\n        iframe.setAttribute('width', props.containerParams.width);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, 'height')) {\n        iframe.setAttribute('height', props.containerParams.height);\n      }\n    } // Initialise the iframe\n\n\n    iframe.src = ''; // Put it in the document (but hidden):\n\n    var iframeDocument = iframe.contentWindow || iframe.contentDocument;\n\n    if (iframeDocument.document) {\n      iframeDocument = iframeDocument.document;\n    }\n\n    iframeDocument.write(helper.renderTemplate(props.html, {\n      params: props.initParams\n    }));\n    var bodyFixCSS = \"\\n        body{\\n            padding:0;\\n            margin:0;\\n        }\\n        \";\n    var styleTag = iframeDocument.createElement('style');\n    styleTag.type = 'text/css';\n\n    if (styleTag.styleSheet) {\n      styleTag.styleSheet.cssText = helper.renderTemplate(props.css, {\n        params: props.initParams\n      }) + bodyFixCSS;\n    } else {\n      styleTag.appendChild(ownerDocument.createTextNode(props.css + bodyFixCSS));\n    }\n\n    var head = iframeDocument.head || iframeDocument.getElementsByTagName('head')[0];\n    head.appendChild(styleTag);\n\n    if (Object.prototype.hasOwnProperty.call(props, 'fonts')) {\n      for (var i = 0; i < props.fonts.length; i++) {\n        var theFont = props.fonts[i];\n\n        if (theFont.type === \"google-font\") {\n          var fontTag = iframeDocument.createElement('link');\n          fontTag.setAttribute('rel', 'stylesheet');\n          fontTag.setAttribute('src', theFont.src);\n          head.appendChild(fontTag);\n        }\n      }\n    }\n\n    this.rootElement = iframe;\n    iframeDocument.close();\n    this.context = {\n      document: iframeDocument,\n      window: iframe.contentWindow || iframe,\n      clipContainer: iframe,\n      rootElement: iframeDocument.body,\n      unmount: function unmount() {\n        props.host.removeChild(iframe);\n      },\n      getElements: this.getElements.bind(this),\n      getMCID: this.getMCID.bind(this),\n      setMCID: this.setMCID.bind(this),\n      getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n      getElementByMCID: this.getElementByMCID.bind(this)\n    };\n    this.elementsByMCID = {};\n  }\n\n  _createClass(IframeContextHandler, [{\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n        return this.elementsByMCID[mcid];\n      } else {\n        var element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));\n        this.elementsByMCID[mcid] = element;\n        return element;\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(selector) {\n      return Array.from(this.context.rootElement.querySelectorAll(selector));\n    }\n  }, {\n    key: \"getMCID\",\n    value: function getMCID(element) {\n      return element.getAttribute(conf.elements_data_attribute_name);\n    }\n  }, {\n    key: \"setMCID\",\n    value: function setMCID(element, mcid) {\n      element.setAttribute(conf.elements_data_attribute_name, mcid);\n    }\n  }, {\n    key: \"getElementSelectorByMCID\",\n    value: function getElementSelectorByMCID(mcid) {\n      return '[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]';\n    }\n  }]);\n\n  return IframeContextHandler;\n}();\n\nmodule.exports = IframeContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/IframeContextHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\niframe[seamless]{\n    background-color: transparent;\n    border: 0px none transparent;\n    padding: 0px;\n    overflow: hidden;\n}\n\nmight need more work for IE. See here: https://stackoverflow.com/a/29209248\n*/\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar conf = __webpack_require__(/*! ../../_configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\");\n\nvar WebComponentContextHandler =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {object} props - an object that should contain all of the following keys:\n   * - html (the html template to render)\n   * - css (the css template of the isolated tree)\n   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n   * - host (an Element object that will host the isolated tree)\n   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n   */\n  function WebComponentContextHandler() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WebComponentContextHandler);\n\n    if (!helper.isObject(props)) {\n      helper.error(\"ContextHandler expects an object on its constructor. \".concat(_typeof(props), \" passed\"));\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"html\")) {\n      helper.error(\"ContextHandler expects the html key on its constructor properties which is missing\");\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"css\")) {\n      helper.error(\"ContextHandler expects the css key on its constructor properties which is missing\");\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"host\")) {\n      helper.error(\"ContextHandler expects the host key on its constructor properties which is missing\");\n      return false;\n    }\n\n    this.isDOM = true;\n    var shadow = props.host.attachShadow({\n      mode: 'closed'\n    });\n    var wrapper = document.createElement('div');\n\n    if (Object.prototype.hasOwnProperty.call(props, \"containerParams\")) {\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, \"width\")) {\n        wrapper.style.width = props.containerParams.width;\n      }\n\n      if (Object.prototype.hasOwnProperty.call(props.containerParams, \"height\")) {\n        wrapper.style.height = props.containerParams.height;\n      }\n    }\n\n    wrapper.innerHTML = helper.renderTemplate(props.html + '<slot></slot>', {\n      params: props.initParams\n    });\n    shadow.appendChild(wrapper);\n    var styleTag = document.createElement('style');\n    styleTag.type = 'text/css';\n\n    if (styleTag.styleSheet) {\n      styleTag.styleSheet.cssText = helper.renderTemplate(props.css, {\n        params: props.initParams\n      });\n    } else {\n      styleTag.appendChild(document.createTextNode(props.css));\n    }\n\n    shadow.appendChild(styleTag);\n\n    if (Object.prototype.hasOwnProperty.call(props, \"fonts\")) {\n      for (var i = 0; i < props.fonts.length; i++) {\n        var theFont = props.fonts[i];\n\n        if (theFont.type === \"google-font\") {\n          var fontTag = document.createElement('link');\n          fontTag.setAttribute('rel', 'stylesheet');\n          fontTag.setAttribute('src', theFont.src);\n          shadow.appendChild(fontTag);\n        }\n      }\n    }\n\n    wrapper.style.overflow = \"hidden\";\n    this.rootElement = wrapper;\n    this.context = {\n      document: document,\n      window: window,\n      clipContainer: this.rootElement,\n      rootElement: wrapper,\n      unmount: function unmount() {\n        try {\n          props.host.removeChild(shadow);\n        } catch (er) {\n          helper.warning('The element of the Clip to be removed seems not to exist any more');\n        }\n      },\n      getElements: this.getElements.bind(this),\n      getMCID: this.getMCID.bind(this),\n      setMCID: this.setMCID.bind(this),\n      getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n      getElementByMCID: this.getElementByMCID.bind(this)\n    };\n    this.elementsByMCID = {};\n  }\n\n  _createClass(WebComponentContextHandler, [{\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(mcid) {\n      if (Object.prototype.hasOwnProperty.call(this.elementsByMCID, mcid)) {\n        return this.elementsByMCID[mcid];\n      } else {\n        var element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));\n        this.elementsByMCID[mcid] = element;\n        return element;\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(selector) {\n      return Array.from(this.context.rootElement.querySelectorAll(selector));\n    }\n  }, {\n    key: \"getMCID\",\n    value: function getMCID(element) {\n      return element.getAttribute(conf.elements_data_attribute_name);\n    }\n  }, {\n    key: \"setMCID\",\n    value: function setMCID(element, mcid) {\n      element.setAttribute(conf.elements_data_attribute_name, mcid);\n    }\n  }, {\n    key: \"getElementSelectorByMCID\",\n    value: function getElementSelectorByMCID(mcid) {\n      return '[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]';\n    }\n  }]);\n\n  return WebComponentContextHandler;\n}();\n\nmodule.exports = WebComponentContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Clip/helpers/WebComponentContextHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar DescriptiveClip = __webpack_require__(/*! ./DescriptiveClip */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\");\n\nvar DescriptiveAudioClip =\n/*#__PURE__*/\nfunction (_DescriptiveClip) {\n  _inherits(DescriptiveAudioClip, _DescriptiveClip);\n\n  function DescriptiveAudioClip(audioSources) {\n    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, DescriptiveAudioClip);\n\n    var propsToPass = {\n      audio: 'only',\n      audioSources: audioSources\n    };\n\n    if (id !== null) {\n      propsToPass.id = id;\n    }\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveAudioClip).call(this, propsToPass));\n  }\n\n  return DescriptiveAudioClip;\n}(DescriptiveClip);\n\nmodule.exports = DescriptiveAudioClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9EZXNjcmlwdGl2ZUF1ZGlvQ2xpcC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL0Rlc2NyaXB0aXZlQXVkaW9DbGlwLmpzPzVlZWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIERlc2NyaXB0aXZlQ2xpcCA9IHJlcXVpcmUoJy4vRGVzY3JpcHRpdmVDbGlwJyk7XG5cbnZhciBEZXNjcmlwdGl2ZUF1ZGlvQ2xpcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Rlc2NyaXB0aXZlQ2xpcCkge1xuICBfaW5oZXJpdHMoRGVzY3JpcHRpdmVBdWRpb0NsaXAsIF9EZXNjcmlwdGl2ZUNsaXApO1xuXG4gIGZ1bmN0aW9uIERlc2NyaXB0aXZlQXVkaW9DbGlwKGF1ZGlvU291cmNlcykge1xuICAgIHZhciBpZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXNjcmlwdGl2ZUF1ZGlvQ2xpcCk7XG5cbiAgICB2YXIgcHJvcHNUb1Bhc3MgPSB7XG4gICAgICBhdWRpbzogJ29ubHknLFxuICAgICAgYXVkaW9Tb3VyY2VzOiBhdWRpb1NvdXJjZXNcbiAgICB9O1xuXG4gICAgaWYgKGlkICE9PSBudWxsKSB7XG4gICAgICBwcm9wc1RvUGFzcy5pZCA9IGlkO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRGVzY3JpcHRpdmVBdWRpb0NsaXApLmNhbGwodGhpcywgcHJvcHNUb1Bhc3MpKTtcbiAgfVxuXG4gIHJldHVybiBEZXNjcmlwdGl2ZUF1ZGlvQ2xpcDtcbn0oRGVzY3JpcHRpdmVDbGlwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXNjcmlwdGl2ZUF1ZGlvQ2xpcDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Playable = __webpack_require__(/*! ../Clip/Playable */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/Playable.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar FragmentedClip = __webpack_require__(/*! ../Clip/FragmentedClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/FragmentedClip.js\");\n\nvar Clip = __webpack_require__(/*! ../Clip/DOMClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/DOMClip.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Clip/ClipsChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar ClipClone = __webpack_require__(/*! ../Clip/RootClipClone */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/RootClipClone.js\");\n\nvar AudioClip = __webpack_require__(/*! ../Audio/AudioClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Audio/AudioClip.js\");\n\nvar NullClip = __webpack_require__(/*! ../Clip/NullClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/NullClip.js\");\n/**\n * Along with the expected props for the Clip on the props support the audio key.\n * The audio can take one of the 3 following values:\n * - \"on\": The Clip has audio enabled\n * - \"off\": The Clip has audio disabled\n * - \"only\": The Clip is only audio\n *\n * Also, in the case audio is on or only the user should pass the \"audioSources\"\n * key containing all the audio sources they want to pass on the Audio Context\n * of their clip. Please check AudioClip for details on the expected format\n **/\n\n\nvar DescriptiveClip =\n/*#__PURE__*/\nfunction (_Playable) {\n  _inherits(DescriptiveClip, _Playable);\n\n  function DescriptiveClip(attrs) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, DescriptiveClip);\n\n    var attrsToPass, propsToUse;\n\n    if (props === null) {\n      attrsToPass = {};\n      propsToUse = attrs;\n    } else {\n      // else, in case the user has passed two arguments then both should be used\n      attrsToPass = attrs;\n      propsToUse = props;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveClip).call(this, attrsToPass, propsToUse)); // isTheRootClip defines whether the Clip is the root or not. It depends on\n    // the host or selector parameter passed on props (if host is present then\n    // the Clip is the root Clip while if the Clip gets initialised by a selector\n    // is not)\n\n    _this.isTheRootClip = false; // check if\n\n    var ingredients = {\n      id: _this.id,\n      attrs: attrsToPass,\n      props: _objectSpread({}, propsToUse, {\n        html: Object.prototype.hasOwnProperty.call(propsToUse, \"html\") ? propsToUse.html : _this.html,\n        css: Object.prototype.hasOwnProperty.call(propsToUse, \"css\") ? propsToUse.css : _this.css,\n        fonts: Object.prototype.hasOwnProperty.call(propsToUse, \"fonts\") ? propsToUse.fonts : _this.fonts,\n        runTimeInfo: _this.runTimeInfo,\n        subscribe: _this.subscribe.bind(_assertThisInitialized(_this))\n      }),\n      plugin_npm_name: _this.constructor.plugin_npm_name,\n      Channel: _this.constructor.Channel,\n      DescriptiveIncident: _assertThisInitialized(_this)\n    }; // Decide what kind of audio (or non-audio) Clip we are dealing with\n\n    _this.audio = \"on\";\n\n    if (Object.prototype.hasOwnProperty.call(_this.constructor, 'audio')) {\n      _this.audio = _this.constructor.audio;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(propsToUse, 'audio')) {\n      _this.audio = propsToUse.audio;\n    } // decide if this is the root clip\n\n\n    if (Object.prototype.hasOwnProperty.call(propsToUse, \"selector\") && propsToUse.selector !== undefined) {\n      ingredients.Incident = FragmentedClip; // TODO it doesn't take in account the get html and get css of the Descriptive Clip\n    } else if (_this.audio === \"only\" && _this.props.root !== true) {\n      // audioClips can never be the root\n      _this.isTheRootClip = false;\n    } else {\n      _this.isTheRootClip = true;\n      /*\n      blockingWaitings are been triggered by Incidents when there is the\n      need to halt the Clip's execution and wait. As an example a blocking\n      waiting can be set by an Audio Playback Incident when the audio has\n      not been loaded yet.\n      Each blocking waiting has an id and via the same id the waiting can be\n      unblocked.\n      The blockingWaitings property of the root Clip is a collection with\n      keys the blocking waitings ids and values the description of each waiting\n      which consists of:\n      {\n          id\n          description\n          incidentId\n      }\n      The blocking waitings are triggered by real Incidents living on the real\n      Clips of the Descriptive Clip (either the audioClip or the realClip).\n      The root that a waiting set or unset follows is from any real incident\n      up to its ContextAware Incident and from there\n      up to the real Clip and from thre to its DescriptiveTree and from there\n      all the way up to the root Descriptive Clip.\n      Blocking waitings must always be triggered on the \"onProgress\" or on\n      the \"play\" methods of Incidents. Setting a blocking waiting from anywhere\n      else is an error\n      */\n\n      _this.blockingWaitings = {};\n      ingredients.Incident = _this.constructor.Incident;\n    } // we initialise real and audio clips of the Clip by checking the static audio\n    // property\n    // the property this.audio helps incidentFromDescription identify if the Incident\n    // participates or not on the audioClip. By default is \"on\" but if the props.audio is set to off\n    // it turns to \"off\" so the DC gets totally ignored on the addition process on audio clip\n\n    /* The audio value is set in the following manner\n        - first we check if the Class has a static audio parameter and if yes we keep it\n        - then we check if this.props has the audio key and if yes we keep this one\n        - otherwise we use the default (\"on\")\n    */\n\n\n    if (_this.audio === 'on' || _this.audio === 'off') {\n      _this.realClip = incidentFromIngredients(ingredients);\n    } else {\n      _this.realClip = new NullClip();\n    }\n\n    if (_this.audio === 'on' || _this.audio === 'only') {\n      var audioIngredients = {\n        id: _this.id,\n        attrs: {},\n        props: {\n          audioSources: propsToUse.audioSources,\n          runTimeInfo: _this.runTimeInfo,\n          subscribe: _this.subscribe.bind(_assertThisInitialized(_this))\n        },\n        plugin_npm_name: _this.constructor.plugin_npm_name,\n        Channel: _this.constructor.Channel,\n        Incident: AudioClip,\n        DescriptiveIncident: _assertThisInitialized(_this)\n      };\n      _this.audioClip = incidentFromIngredients(audioIngredients);\n    } else {\n      _this.audio = false;\n      _this.audioClip = new NullClip();\n    } // passiveAddition is a flag property indicating that any Incident to be\n    // added to the Clip will be passive. It initialises with value = false\n    // on DescriptiveGroup where it's originaly defined.\n    // Here we change its value just before the buildTree method execution\n    // so all Incidents added on it get the \"passive\" flag and don't get\n    // exported on the exportDefinition method. Once the buildTree method\n    // finishes we set it back to its original value (false)\n\n\n    _this.passiveAddition = true;\n\n    _this._buildTree();\n\n    _this.passiveAddition = false;\n    return _this;\n  }\n\n  _createClass(DescriptiveClip, [{\n    key: \"_buildTree\",\n\n    /*\n    the _buildTree method acts as a proxy to the buildTree method defined by the\n    developers. The reason for this is that the actual buildTree method should\n    be executed in different order on Groups and on Clips (that extend Groups).\n    Calling the super on constructor fires the _buildTree execution on the\n    Group's constructor but this breaks on Clip as the realClip has not been\n    initialised yet.\n    */\n    value: function _buildTree() {\n      if (this.realClip === undefined) {\n        return;\n      }\n\n      this.buildTree();\n    }\n    /**\n     * When the resize command is given directly to a DescriptiveClip no checks\n     * need to be performed.\n     * DescriptiveClip directly invokes the _resize method of ExtendableClip which\n     * resizes the full clip\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(newSize) {\n      this.realClip._resize(newSize / this.duration);\n\n      this.audioClip._resize(newSize / this.duration);\n\n      this.duration = newSize;\n      this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n      this.putMessageOnPipe('flash', {}, 'RootClip', {\n        selfExecute: true,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n      return {\n        result: true\n      };\n    }\n    /*************************** HANDLING METHODS *******************************/\n\n  }, {\n    key: \"handleCheckForClip\",\n    value: function handleCheckForClip(target, payload) {\n      // eslint-disable-line no-unused-vars\n      return true;\n    }\n  }, {\n    key: \"handleCheckAddition\",\n    value: function handleCheckAddition(target, payload) {\n      /* Is the responsibility of the DescriptiveClip to pass the addition request\n      to its real clip and expect for a response. */\n      var res = this.realClip.addIncident(payload);\n      var audioRes = this.audioClip.addIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckMove\",\n    value: function handleCheckMove(target, payload) {\n      var res = this.realClip.moveIncident(payload);\n      var audioRes = this.audioClip.moveIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckDeletion\",\n    value: function handleCheckDeletion(target, payload) {\n      var res = this.realClip.removeIncident(payload);\n      var audioRes = this.audioClip.removeIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleCheckResize\",\n    value: function handleCheckResize(target, payload) {\n      var res = this.realClip.resizeIncident(payload);\n      var audioRes = this.audioClip.resizeIncident(payload);\n\n      if (res.result === true && audioRes.result === true) {\n        res.execute();\n        audioRes.execute();\n        this.putMessageOnPipe('flash', {}, 'RootClip', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n\n      return res;\n    }\n  }, {\n    key: \"handleFlash\",\n    value: function handleFlash(target, payload) {\n      // eslint-disable-line no-unused-vars\n      if (this.isTheRootClip) {\n        this.flash();\n      } else {\n        return this.bypass();\n      }\n    }\n    /****************** BLOCKING WAITINGS HANDLING **************************/\n\n    /***********************************************************************/\n\n  }, {\n    key: \"handleSetBlock\",\n    value: function handleSetBlock(target, payload) {\n      // only accepts blocks if is the root clip and if it's playing\n      if (this.isTheRootClip) {\n        if (this.runTimeInfo.state === \"transitional\") {\n          return;\n        }\n\n        this.statusBeforeBlock = this.runTimeInfo.state;\n        this.blockingWaitings[payload.id] = payload;\n        this.block();\n      } else {\n        return this.bypass();\n      }\n    }\n  }, {\n    key: \"handleUnBlock\",\n    value: function handleUnBlock(target, payload) {\n      if (this.isTheRootClip) {\n        if (Object.prototype.hasOwnProperty.call(this.blockingWaitings, payload.id)) {\n          delete this.blockingWaitings[payload.id];\n\n          if (Object.keys(this.blockingWaitings).length === 0) {\n            if (this.statusBeforeBlock === \"playing\") {\n              this.previousTimeStamp = -1;\n              this.play();\n            } else {\n              this.arm();\n            }\n          }\n        }\n      } else {\n        return this.bypass();\n      }\n    }\n    /* empty blocking waitings on transition start */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      _get(_getPrototypeOf(DescriptiveClip.prototype), \"stop\", this).call(this);\n\n      this.blockingWaitings = {};\n    }\n    /***********************************************************************/\n\n    /***********************************************************************/\n\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(fraction, millisecond) {\n      this.realClip.onProgress(fraction, millisecond);\n      this.audioClip.onProgress(fraction, millisecond);\n    }\n    /*************************************************************/\n\n  }, {\n    key: \"paste\",\n    value: function paste(host) {\n      if (this.isTheRootClip) {\n        var clipClone = new ClipClone({\n          host: host,\n          descriptiveIncident: this\n        });\n        return clipClone;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"flash\",\n    value: function flash() {\n      this.realClip.flash();\n    }\n  }, {\n    key: \"selectorToPassToChildren\",\n    get: function get() {\n      return null; // the Clip (any Clip) resets the selection cascading\n    }\n  }, {\n    key: \"inheritedSelector\",\n    get: function get() {\n      return this._inheritedSelector;\n    },\n    set: function set(value) {\n      this._inheritedSelector = value;\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"css\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"fonts\",\n    get: function get() {\n      return [];\n    }\n  }]);\n\n  return DescriptiveClip;\n}(Playable);\n\n_defineProperty(DescriptiveClip, \"isClip\", true);\n\n_defineProperty(DescriptiveClip, \"Incident\", Clip);\n\n_defineProperty(DescriptiveClip, \"plugin_npm_name\", \"@kissmybutton/self-contained-incidents\");\n\n_defineProperty(DescriptiveClip, \"Channel\", Channel);\n\n_defineProperty(DescriptiveClip, \"ClassName\", \"Clip\");\n\nmodule.exports = DescriptiveClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Node = __webpack_require__(/*! ../Tree/Node */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\");\n\nvar resize = __webpack_require__(/*! ./decorators/resize */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\");\n\nvar editAttributes = __webpack_require__(/*! ./decorators/editAttributes */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\");\n\nvar editProperties = __webpack_require__(/*! ./decorators/editProperties */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\");\n\nvar selectorGetter = __webpack_require__(/*! ./decorators/selector */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\");\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n\nvar DescriptiveGroup = _decorate(null, function (_initialize, _Node) {\n  var DescriptiveGroup =\n  /*#__PURE__*/\n  function (_Node2) {\n    _inherits(DescriptiveGroup, _Node2);\n\n    function DescriptiveGroup() {\n      var _this;\n\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, DescriptiveGroup);\n\n      if (props === null) {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, attrs));\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.attrs = {};\n        _this.props = attrs;\n      } else {\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveGroup).call(this, props));\n\n        _initialize(_assertThisInitialized(_this));\n\n        _this.attrs = attrs;\n        _this.props = props;\n      }\n\n      _this._inheritedSelector = null; // passiveAddition is a flag property indicating that any Incident to be\n      // added to the Clip will be passive. It initialises with value = false\n      // on DescriptiveGroup where it's originaly defined.\n      // Here we change its value just before the buildTree method execution\n      // so all Incidents added on it get the \"passive\" flag and don't get\n      // exported on the exportDefinition method. Once the buildTree method\n      // finishes we set it back to its original value (false)\n\n      _this.passiveAddition = true;\n\n      _this._buildTree();\n\n      _this.passiveAddition = false;\n      return _possibleConstructorReturn(_this);\n    }\n\n    return DescriptiveGroup;\n  }(_Node);\n\n  return {\n    F: DescriptiveGroup,\n    d: [{\n      kind: \"field\",\n      \"static\": true,\n      key: \"Incident\",\n      value: function value() {\n        return Group;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"plugin_npm_name\",\n      value: function value() {\n        return \"motor-cortex-js\";\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"Channel\",\n      value: function value() {\n        return Channel;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"ClassName\",\n      value: function value() {\n        return \"Group\";\n      }\n    }, {\n      kind: \"method\",\n      decorators: [editAttributes],\n      key: \"editAttributes\",\n      value: function editAttributes() {}\n    }, {\n      kind: \"method\",\n      decorators: [editProperties],\n      key: \"editProperties\",\n      value: function editProperties() {}\n    }, {\n      kind: \"method\",\n      decorators: [resize],\n      key: \"resize\",\n      value: function resize() {}\n    }, {\n      kind: \"method\",\n      decorators: [selectorGetter],\n      key: \"selector\",\n      value: function selector() {}\n    }, {\n      kind: \"method\",\n      key: \"_buildTree\",\n      value: function _buildTree() {\n        this.buildTree();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_rebuildTree\",\n      value: function _rebuildTree() {\n        // remove all direct passive incidents as they might be dependent on the edited attrs/props\n        for (var id in this.children) {\n          var theChild = this.children[id];\n\n          if (theChild.leaf.passive === true) {\n            this.removeIncident(theChild.id);\n          }\n        } // run buildTree again\n\n\n        this.passiveAddition = true;\n        this.buildTree();\n        this.passiveAddition = false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"buildTree\",\n      value: function buildTree() {}\n    }, {\n      kind: \"method\",\n      key: \"manageEditAttrProps\",\n      value: function manageEditAttrProps(newAttrs, type) {\n        // get a permanent reference to its parent node\n        var parentNode = this.parentNode; // get the position of the Incident within its parent\n\n        var position = parentNode.getLeafPosition(this.id); // keep a backup of the current attrs / props\n\n        var oldAttrs = JSON.parse(JSON.stringify(this[type]));\n        this[type] = newAttrs; // first detach the Incident from its parent\n\n        parentNode.removeIncident(this.id); // remove all direct passive incidents as they might be dependent on the edited attrs/props\n\n        this._rebuildTree(); // try to add the altered Group\n\n\n        var res = parentNode.addIncident(this, position);\n\n        if (res.result === false) {\n          this[type] = oldAttrs;\n\n          this._rebuildTree();\n\n          parentNode.addIncident(this, position);\n          return res;\n        }\n\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        _get(_getPrototypeOf(DescriptiveGroup.prototype), \"detachFromParent\", this).call(this);\n\n        this.inheritedSelector = null;\n      }\n    }, {\n      kind: \"get\",\n      key: \"inheritedSelector\",\n      value: function inheritedSelector() {\n        return this._inheritedSelector;\n      }\n    }, {\n      kind: \"set\",\n      key: \"inheritedSelector\",\n      value: function inheritedSelector(value) {\n        this._inheritedSelector = value;\n\n        for (var id in this.children) {\n          var theChild = this.children[id].leaf;\n          theChild.inheritedSelector = this.selector();\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"selectorToPassToChildren\",\n      value: function selectorToPassToChildren() {\n        return this.selector();\n      }\n      /**\n       * The purpose of this method is to export a portable definition that can be\n       * later used in order to rebuild the Inicdent at any time\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"exportDefinition\",\n      value: function exportDefinition() {\n        var toReturn = {\n          ClassName: this.constructor.ClassName,\n          plugin_npm_name: this.constructor.plugin_npm_name,\n          attrs: this.attrs,\n          props: this.props,\n          incidents: {}\n        };\n\n        for (var id in this.children) {\n          var theChild = this.children[id];\n\n          if (theChild.leaf.passive === true) {\n            continue;\n          }\n\n          toReturn.incidents[id] = {\n            id: theChild.id,\n            position: theChild.position,\n            leaf: theChild.leaf.exportDefinition()\n          };\n        }\n\n        return toReturn;\n      }\n    }, {\n      kind: \"method\",\n      key: \"addIncident\",\n      value: function addIncident(descriptiveIncident, position) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          check: true\n        };\n        descriptiveIncident.inheritedSelector = this.selectorToPassToChildren;\n\n        if (options.check === true) {\n          var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkAddition\", this).call(this, descriptiveIncident, position);\n\n          if (initialCheck.result === false) {\n            descriptiveIncident.inheritedSelector = null;\n            return initialCheck;\n          }\n          /* Check for null or relative selector Incidents with no inherited selector */\n\n\n          var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n            selfExecute: true,\n            direction: _TREECONST._DIRECTIONS._UP\n          });\n\n          if (checkIfBelongsToClip.response === true) {\n            // if the Group belongs on a Clip\n            var selectorsCheck = descriptiveIncident.putMessageOnPipe('checkForInvalidSelectors', {}, null, {\n              selfExecute: true,\n              direction: _TREECONST._DIRECTIONS._DOWN\n            });\n\n            if (selectorsCheck.length > 0) {\n              var errors = [];\n\n              for (var i = 0; i < selectorsCheck.length; i++) {\n                errors.push(selectorsCheck[i].response);\n              }\n\n              return {\n                result: false,\n                errors: errors\n              };\n            }\n          } // sends the check request to its root, either a headless root or a Descriptive Clip\n\n\n          var mcCheck = this.putMessageOnPipe('checkAddition', {\n            incident: descriptiveIncident,\n            millisecond: position,\n            parentGroupId: this.id\n          }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n            selfExecute: true,\n            direction: _TREECONST._DIRECTIONS._UP\n          });\n\n          if (mcCheck.response.result === false) {\n            descriptiveIncident.inheritedSelector = null;\n            return mcCheck.response;\n          }\n        } // if the passiveAddition flag is true we set the passive flag of the Incident\n        // to true before adding it to our Group\n\n\n        if (this.passiveAddition === true) {\n          descriptiveIncident.passive = true;\n        }\n\n        var res = this.addChild(descriptiveIncident, position);\n\n        if (res.result === false) {\n          descriptiveIncident.inheritedSelector = null;\n        }\n\n        return res;\n      }\n      /**\n       * @param input - can either be object or id\n       **/\n\n    }, {\n      kind: \"method\",\n      key: \"moveIncident\",\n      value: function moveIncident(input, position) {\n        var id = input;\n\n        if (_typeof(input) === \"object\") {\n          id = input.id;\n        }\n\n        var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkEditPosition\", this).call(this, id, position);\n\n        if (initialCheck.result === false) {\n          return initialCheck;\n        }\n\n        var originalPosition = this.getLeafPosition(id);\n        var positionDelta = position - originalPosition;\n\n        if (positionDelta === 0) {\n          return {\n            result: true\n          };\n        }\n\n        var mcCheck = this.putMessageOnPipe('checkMove', {\n          id: id,\n          millisecond: position,\n          positionDelta: positionDelta,\n          parentGroupId: this.id\n        }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n\n        if (mcCheck.response.result === false) {\n          return mcCheck.response;\n        }\n\n        var res = this.editPosition(id, position);\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"removeIncident\",\n      value: function removeIncident(input) {\n        var id = input;\n\n        if (_typeof(input) === \"object\") {\n          id = input.id;\n        }\n\n        var initialCheck = _get(_getPrototypeOf(DescriptiveGroup.prototype), \"checkRemoveChild\", this).call(this, id);\n\n        if (initialCheck.result === false) {\n          return initialCheck;\n        }\n\n        var mcCheck = this.putMessageOnPipe('checkDeletion', {\n          id: id,\n          parentGroupId: this.id\n        }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n\n        if (mcCheck.response.result === false) {\n          return mcCheck.response;\n        }\n\n        var res = this.removeChild(id);\n        return res;\n      }\n      /*************************** HANDLING METHODS *******************************/\n\n    }, {\n      kind: \"method\",\n      key: \"handleCheckForClip\",\n      value: function handleCheckForClip(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckAddition\",\n      value: function handleCheckAddition(target, payload) {\n        // eslint-disable-line no-unused-vars\n\n        /*\n        The DescriptiveGroup handles the checkAddition command which has the UP\n        direction. If the DG has a parent it forwards the command to it. If not\n        it just returns true, as it is a deadless tree\n        */\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckMove\",\n      value: function handleCheckMove(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckDeletion\",\n      value: function handleCheckDeletion(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckResize\",\n      value: function handleCheckResize(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this.hasParent) {\n          return this.bypass();\n        }\n\n        return {\n          result: true\n        };\n      }\n    }]\n  };\n}, Node);\n\nmodule.exports = DescriptiveGroup;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar resize = __webpack_require__(/*! ./decorators/resize */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\");\n\nvar editAttributes = __webpack_require__(/*! ./decorators/editAttributes */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\");\n\nvar editProperties = __webpack_require__(/*! ./decorators/editProperties */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\");\n\nvar selectorGetter = __webpack_require__(/*! ./decorators/selector */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\");\n\nvar MonoIncident = __webpack_require__(/*! ../BaseClasses/MonoIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar AttributeChannel = __webpack_require__(/*! ../Channels/Attribute/AttributeChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\");\n\nvar DescriptiveIncident = _decorate(null, function (_initialize, _Leaf) {\n  var DescriptiveIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(DescriptiveIncident, _Leaf2);\n\n    function DescriptiveIncident(attrs, props) {\n      var _this;\n\n      _classCallCheck(this, DescriptiveIncident);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(DescriptiveIncident).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.inheritedSelector = null;\n      _this.attrs = attrs;\n\n      if (!Object.prototype.hasOwnProperty.call(props, \"duration\")) {\n        props.duration = 0;\n      }\n\n      _this.props = props; // the passive flag (when true) indicates that the Descriptive Group has been created\n      // and passively added to a Clip or a Combo via buildTree method.\n      // Defaults to false\n\n      _this.passive = false;\n      return _this;\n    }\n\n    return DescriptiveIncident;\n  }(_Leaf);\n\n  return {\n    F: DescriptiveIncident,\n    d: [{\n      kind: \"field\",\n      \"static\": true,\n      key: \"Incident\",\n      value: function value() {\n        return MonoIncident;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"plugin_npm_name\",\n      value: function value() {\n        return \"motor-cortex-js-attribute\";\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"Channel\",\n      value: function value() {\n        return AttributeChannel;\n      }\n    }, {\n      kind: \"field\",\n      \"static\": true,\n      key: \"ClassName\",\n      value: function value() {\n        return \"Incident\";\n      }\n    }, {\n      kind: \"method\",\n      decorators: [editAttributes],\n      key: \"editAttributes\",\n      value: function editAttributes() {}\n    }, {\n      kind: \"method\",\n      decorators: [editProperties],\n      key: \"editProperties\",\n      value: function editProperties() {}\n    }, {\n      kind: \"method\",\n      decorators: [resize],\n      key: \"resize\",\n      value: function resize() {}\n    }, {\n      kind: \"method\",\n      decorators: [selectorGetter],\n      key: \"selector\",\n      value: function selector() {}\n    }, {\n      kind: \"method\",\n      key: \"manageEditAttrProps\",\n      value: function manageEditAttrProps(newAttrs, type) {\n        // get a permanent reference to its parent node\n        var parentNode = this.parentNode; // get the position of the Incident within its parent\n\n        var position = parentNode.getLeafPosition(this.id); // first detach the Incident from its parent\n\n        parentNode.removeIncident(this.id); // keep a backup of the current attrs/props\n\n        var oldAttrs = JSON.parse(JSON.stringify(this[type]));\n        this[type] = newAttrs;\n        var res = parentNode.addIncident(this, position);\n\n        if (res.result === false) {\n          parentNode.removeIncident(this.id);\n          this[type] = oldAttrs;\n          parentNode.addIncident(this, position);\n          return res;\n        }\n\n        return res;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        _get(_getPrototypeOf(DescriptiveIncident.prototype), \"detachFromParent\", this).call(this);\n\n        this.inheritedSelector = null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleCheckForInvalidSelectors\",\n      value: function handleCheckForInvalidSelectors() {\n        var selector = this.selector();\n\n        if (selector === null) {\n          return {\n            id: this.id,\n            ClassName: this.constructor.ClassName,\n            plugin_npm_name: this.constructor.plugin_npm_name,\n            error: 'null selector'\n          };\n        } else if (selector.charAt(0) === \"&\") {\n          return {\n            id: this.id,\n            ClassName: this.constructor.ClassName,\n            plugin_npm_name: this.constructor.plugin_npm_name,\n            error: 'relative selector with no inherited selector',\n            selector: selector\n          };\n        } else return this.bypass();\n      }\n      /**\n       * The purpose of this method is to export a portable definition that can be\n       * later used in order to rebuild the Inicdent at any time\n       */\n\n    }, {\n      kind: \"method\",\n      key: \"exportDefinition\",\n      value: function exportDefinition() {\n        return {\n          ClassName: this.constructor.ClassName,\n          plugin_npm_name: this.constructor.plugin_npm_name,\n          attrs: this.attrs,\n          props: this.props\n        };\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = DescriptiveIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9EZXNjcmlwdGl2ZUluY2lkZW50LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvRGVzY3JpcHRpdmVJbmNpZGVudHMvRGVzY3JpcHRpdmVJbmNpZGVudC5qcz85NWM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVjb3JhdGUoZGVjb3JhdG9ycywgZmFjdG9yeSwgc3VwZXJDbGFzcywgbWl4aW5zKSB7IHZhciBhcGkgPSBfZ2V0RGVjb3JhdG9yc0FwaSgpOyBpZiAobWl4aW5zKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7IGFwaSA9IG1peGluc1tpXShhcGkpOyB9IH0gdmFyIHIgPSBmYWN0b3J5KGZ1bmN0aW9uIGluaXRpYWxpemUoTykgeyBhcGkuaW5pdGlhbGl6ZUluc3RhbmNlRWxlbWVudHMoTywgZGVjb3JhdGVkLmVsZW1lbnRzKTsgfSwgc3VwZXJDbGFzcyk7IHZhciBkZWNvcmF0ZWQgPSBhcGkuZGVjb3JhdGVDbGFzcyhfY29hbGVzY2VDbGFzc0VsZW1lbnRzKHIuZC5tYXAoX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKSksIGRlY29yYXRvcnMpOyBhcGkuaW5pdGlhbGl6ZUNsYXNzRWxlbWVudHMoci5GLCBkZWNvcmF0ZWQuZWxlbWVudHMpOyByZXR1cm4gYXBpLnJ1bkNsYXNzRmluaXNoZXJzKHIuRiwgZGVjb3JhdGVkLmZpbmlzaGVycyk7IH1cblxuZnVuY3Rpb24gX2dldERlY29yYXRvcnNBcGkoKSB7IF9nZXREZWNvcmF0b3JzQXBpID0gZnVuY3Rpb24gX2dldERlY29yYXRvcnNBcGkoKSB7IHJldHVybiBhcGk7IH07IHZhciBhcGkgPSB7IGVsZW1lbnRzRGVmaW5pdGlvbk9yZGVyOiBbW1wibWV0aG9kXCJdLCBbXCJmaWVsZFwiXV0sIGluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzOiBmdW5jdGlvbiBpbml0aWFsaXplSW5zdGFuY2VFbGVtZW50cyhPLCBlbGVtZW50cykgeyBbXCJtZXRob2RcIiwgXCJmaWVsZFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChraW5kKSB7IGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgaWYgKGVsZW1lbnQua2luZCA9PT0ga2luZCAmJiBlbGVtZW50LnBsYWNlbWVudCA9PT0gXCJvd25cIikgeyB0aGlzLmRlZmluZUNsYXNzRWxlbWVudChPLCBlbGVtZW50KTsgfSB9LCB0aGlzKTsgfSwgdGhpcyk7IH0sIGluaXRpYWxpemVDbGFzc0VsZW1lbnRzOiBmdW5jdGlvbiBpbml0aWFsaXplQ2xhc3NFbGVtZW50cyhGLCBlbGVtZW50cykgeyB2YXIgcHJvdG8gPSBGLnByb3RvdHlwZTsgW1wibWV0aG9kXCIsIFwiZmllbGRcIl0uZm9yRWFjaChmdW5jdGlvbiAoa2luZCkgeyBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHZhciBwbGFjZW1lbnQgPSBlbGVtZW50LnBsYWNlbWVudDsgaWYgKGVsZW1lbnQua2luZCA9PT0ga2luZCAmJiAocGxhY2VtZW50ID09PSBcInN0YXRpY1wiIHx8IHBsYWNlbWVudCA9PT0gXCJwcm90b3R5cGVcIikpIHsgdmFyIHJlY2VpdmVyID0gcGxhY2VtZW50ID09PSBcInN0YXRpY1wiID8gRiA6IHByb3RvOyB0aGlzLmRlZmluZUNsYXNzRWxlbWVudChyZWNlaXZlciwgZWxlbWVudCk7IH0gfSwgdGhpcyk7IH0sIHRoaXMpOyB9LCBkZWZpbmVDbGFzc0VsZW1lbnQ6IGZ1bmN0aW9uIGRlZmluZUNsYXNzRWxlbWVudChyZWNlaXZlciwgZWxlbWVudCkgeyB2YXIgZGVzY3JpcHRvciA9IGVsZW1lbnQuZGVzY3JpcHRvcjsgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJmaWVsZFwiKSB7IHZhciBpbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7IGRlc2NyaXB0b3IgPSB7IGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSwgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsIGNvbmZpZ3VyYWJsZTogZGVzY3JpcHRvci5jb25maWd1cmFibGUsIHZhbHVlOiBpbml0aWFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbGl6ZXIuY2FsbChyZWNlaXZlcikgfTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIGVsZW1lbnQua2V5LCBkZXNjcmlwdG9yKTsgfSwgZGVjb3JhdGVDbGFzczogZnVuY3Rpb24gZGVjb3JhdGVDbGFzcyhlbGVtZW50cywgZGVjb3JhdG9ycykgeyB2YXIgbmV3RWxlbWVudHMgPSBbXTsgdmFyIGZpbmlzaGVycyA9IFtdOyB2YXIgcGxhY2VtZW50cyA9IHsgXCJzdGF0aWNcIjogW10sIHByb3RvdHlwZTogW10sIG93bjogW10gfTsgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cyk7IH0sIHRoaXMpOyBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IGlmICghX2hhc0RlY29yYXRvcnMoZWxlbWVudCkpIHJldHVybiBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnQpOyB2YXIgZWxlbWVudEZpbmlzaGVyc0V4dHJhcyA9IHRoaXMuZGVjb3JhdGVFbGVtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpOyBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMuZWxlbWVudCk7IG5ld0VsZW1lbnRzLnB1c2guYXBwbHkobmV3RWxlbWVudHMsIGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMuZXh0cmFzKTsgZmluaXNoZXJzLnB1c2guYXBwbHkoZmluaXNoZXJzLCBlbGVtZW50RmluaXNoZXJzRXh0cmFzLmZpbmlzaGVycyk7IH0sIHRoaXMpOyBpZiAoIWRlY29yYXRvcnMpIHsgcmV0dXJuIHsgZWxlbWVudHM6IG5ld0VsZW1lbnRzLCBmaW5pc2hlcnM6IGZpbmlzaGVycyB9OyB9IHZhciByZXN1bHQgPSB0aGlzLmRlY29yYXRlQ29uc3RydWN0b3IobmV3RWxlbWVudHMsIGRlY29yYXRvcnMpOyBmaW5pc2hlcnMucHVzaC5hcHBseShmaW5pc2hlcnMsIHJlc3VsdC5maW5pc2hlcnMpOyByZXN1bHQuZmluaXNoZXJzID0gZmluaXNoZXJzOyByZXR1cm4gcmVzdWx0OyB9LCBhZGRFbGVtZW50UGxhY2VtZW50OiBmdW5jdGlvbiBhZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMsIHNpbGVudCkgeyB2YXIga2V5cyA9IHBsYWNlbWVudHNbZWxlbWVudC5wbGFjZW1lbnRdOyBpZiAoIXNpbGVudCAmJiBrZXlzLmluZGV4T2YoZWxlbWVudC5rZXkpICE9PSAtMSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRHVwbGljYXRlZCBlbGVtZW50IChcIiArIGVsZW1lbnQua2V5ICsgXCIpXCIpOyB9IGtleXMucHVzaChlbGVtZW50LmtleSk7IH0sIGRlY29yYXRlRWxlbWVudDogZnVuY3Rpb24gZGVjb3JhdGVFbGVtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpIHsgdmFyIGV4dHJhcyA9IFtdOyB2YXIgZmluaXNoZXJzID0gW107IGZvciAodmFyIGRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnMsIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7IHZhciBrZXlzID0gcGxhY2VtZW50c1tlbGVtZW50LnBsYWNlbWVudF07IGtleXMuc3BsaWNlKGtleXMuaW5kZXhPZihlbGVtZW50LmtleSksIDEpOyB2YXIgZWxlbWVudE9iamVjdCA9IHRoaXMuZnJvbUVsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnQpOyB2YXIgZWxlbWVudEZpbmlzaGVyRXh0cmFzID0gdGhpcy50b0VsZW1lbnRGaW5pc2hlckV4dHJhcygoMCwgZGVjb3JhdG9yc1tpXSkoZWxlbWVudE9iamVjdCkgfHwgZWxlbWVudE9iamVjdCk7IGVsZW1lbnQgPSBlbGVtZW50RmluaXNoZXJFeHRyYXMuZWxlbWVudDsgdGhpcy5hZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpOyBpZiAoZWxlbWVudEZpbmlzaGVyRXh0cmFzLmZpbmlzaGVyKSB7IGZpbmlzaGVycy5wdXNoKGVsZW1lbnRGaW5pc2hlckV4dHJhcy5maW5pc2hlcik7IH0gdmFyIG5ld0V4dHJhcyA9IGVsZW1lbnRGaW5pc2hlckV4dHJhcy5leHRyYXM7IGlmIChuZXdFeHRyYXMpIHsgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdFeHRyYXMubGVuZ3RoOyBqKyspIHsgdGhpcy5hZGRFbGVtZW50UGxhY2VtZW50KG5ld0V4dHJhc1tqXSwgcGxhY2VtZW50cyk7IH0gZXh0cmFzLnB1c2guYXBwbHkoZXh0cmFzLCBuZXdFeHRyYXMpOyB9IH0gcmV0dXJuIHsgZWxlbWVudDogZWxlbWVudCwgZmluaXNoZXJzOiBmaW5pc2hlcnMsIGV4dHJhczogZXh0cmFzIH07IH0sIGRlY29yYXRlQ29uc3RydWN0b3I6IGZ1bmN0aW9uIGRlY29yYXRlQ29uc3RydWN0b3IoZWxlbWVudHMsIGRlY29yYXRvcnMpIHsgdmFyIGZpbmlzaGVycyA9IFtdOyBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgeyB2YXIgb2JqID0gdGhpcy5mcm9tQ2xhc3NEZXNjcmlwdG9yKGVsZW1lbnRzKTsgdmFyIGVsZW1lbnRzQW5kRmluaXNoZXIgPSB0aGlzLnRvQ2xhc3NEZXNjcmlwdG9yKCgwLCBkZWNvcmF0b3JzW2ldKShvYmopIHx8IG9iaik7IGlmIChlbGVtZW50c0FuZEZpbmlzaGVyLmZpbmlzaGVyICE9PSB1bmRlZmluZWQpIHsgZmluaXNoZXJzLnB1c2goZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlcik7IH0gaWYgKGVsZW1lbnRzQW5kRmluaXNoZXIuZWxlbWVudHMgIT09IHVuZGVmaW5lZCkgeyBlbGVtZW50cyA9IGVsZW1lbnRzQW5kRmluaXNoZXIuZWxlbWVudHM7IGZvciAodmFyIGogPSAwOyBqIDwgZWxlbWVudHMubGVuZ3RoIC0gMTsgaisrKSB7IGZvciAodmFyIGsgPSBqICsgMTsgayA8IGVsZW1lbnRzLmxlbmd0aDsgaysrKSB7IGlmIChlbGVtZW50c1tqXS5rZXkgPT09IGVsZW1lbnRzW2tdLmtleSAmJiBlbGVtZW50c1tqXS5wbGFjZW1lbnQgPT09IGVsZW1lbnRzW2tdLnBsYWNlbWVudCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRHVwbGljYXRlZCBlbGVtZW50IChcIiArIGVsZW1lbnRzW2pdLmtleSArIFwiKVwiKTsgfSB9IH0gfSB9IHJldHVybiB7IGVsZW1lbnRzOiBlbGVtZW50cywgZmluaXNoZXJzOiBmaW5pc2hlcnMgfTsgfSwgZnJvbUVsZW1lbnREZXNjcmlwdG9yOiBmdW5jdGlvbiBmcm9tRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudCkgeyB2YXIgb2JqID0geyBraW5kOiBlbGVtZW50LmtpbmQsIGtleTogZWxlbWVudC5rZXksIHBsYWNlbWVudDogZWxlbWVudC5wbGFjZW1lbnQsIGRlc2NyaXB0b3I6IGVsZW1lbnQuZGVzY3JpcHRvciB9OyB2YXIgZGVzYyA9IHsgdmFsdWU6IFwiRGVzY3JpcHRvclwiLCBjb25maWd1cmFibGU6IHRydWUgfTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgU3ltYm9sLnRvU3RyaW5nVGFnLCBkZXNjKTsgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJmaWVsZFwiKSBvYmouaW5pdGlhbGl6ZXIgPSBlbGVtZW50LmluaXRpYWxpemVyOyByZXR1cm4gb2JqOyB9LCB0b0VsZW1lbnREZXNjcmlwdG9yczogZnVuY3Rpb24gdG9FbGVtZW50RGVzY3JpcHRvcnMoZWxlbWVudE9iamVjdHMpIHsgaWYgKGVsZW1lbnRPYmplY3RzID09PSB1bmRlZmluZWQpIHJldHVybjsgcmV0dXJuIF90b0FycmF5KGVsZW1lbnRPYmplY3RzKS5tYXAoZnVuY3Rpb24gKGVsZW1lbnRPYmplY3QpIHsgdmFyIGVsZW1lbnQgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudE9iamVjdCk7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImZpbmlzaGVyXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJleHRyYXNcIiwgXCJBbiBlbGVtZW50IGRlc2NyaXB0b3JcIik7IHJldHVybiBlbGVtZW50OyB9LCB0aGlzKTsgfSwgdG9FbGVtZW50RGVzY3JpcHRvcjogZnVuY3Rpb24gdG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KSB7IHZhciBraW5kID0gU3RyaW5nKGVsZW1lbnRPYmplY3Qua2luZCk7IGlmIChraW5kICE9PSBcIm1ldGhvZFwiICYmIGtpbmQgIT09IFwiZmllbGRcIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbiBlbGVtZW50IGRlc2NyaXB0b3JcXCdzIC5raW5kIHByb3BlcnR5IG11c3QgYmUgZWl0aGVyIFwibWV0aG9kXCIgb3InICsgJyBcImZpZWxkXCIsIGJ1dCBhIGRlY29yYXRvciBjcmVhdGVkIGFuIGVsZW1lbnQgZGVzY3JpcHRvciB3aXRoJyArICcgLmtpbmQgXCInICsga2luZCArICdcIicpOyB9IHZhciBrZXkgPSBfdG9Qcm9wZXJ0eUtleShlbGVtZW50T2JqZWN0LmtleSk7IHZhciBwbGFjZW1lbnQgPSBTdHJpbmcoZWxlbWVudE9iamVjdC5wbGFjZW1lbnQpOyBpZiAocGxhY2VtZW50ICE9PSBcInN0YXRpY1wiICYmIHBsYWNlbWVudCAhPT0gXCJwcm90b3R5cGVcIiAmJiBwbGFjZW1lbnQgIT09IFwib3duXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQW4gZWxlbWVudCBkZXNjcmlwdG9yXFwncyAucGxhY2VtZW50IHByb3BlcnR5IG11c3QgYmUgb25lIG9mIFwic3RhdGljXCIsJyArICcgXCJwcm90b3R5cGVcIiBvciBcIm93blwiLCBidXQgYSBkZWNvcmF0b3IgY3JlYXRlZCBhbiBlbGVtZW50IGRlc2NyaXB0b3InICsgJyB3aXRoIC5wbGFjZW1lbnQgXCInICsgcGxhY2VtZW50ICsgJ1wiJyk7IH0gdmFyIGRlc2NyaXB0b3IgPSBlbGVtZW50T2JqZWN0LmRlc2NyaXB0b3I7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImVsZW1lbnRzXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpOyB2YXIgZWxlbWVudCA9IHsga2luZDoga2luZCwga2V5OiBrZXksIHBsYWNlbWVudDogcGxhY2VtZW50LCBkZXNjcmlwdG9yOiBPYmplY3QuYXNzaWduKHt9LCBkZXNjcmlwdG9yKSB9OyBpZiAoa2luZCAhPT0gXCJmaWVsZFwiKSB7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImluaXRpYWxpemVyXCIsIFwiQSBtZXRob2QgZGVzY3JpcHRvclwiKTsgfSBlbHNlIHsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGRlc2NyaXB0b3IsIFwiZ2V0XCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZGVzY3JpcHRvciwgXCJzZXRcIiwgXCJUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShkZXNjcmlwdG9yLCBcInZhbHVlXCIsIFwiVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yXCIpOyBlbGVtZW50LmluaXRpYWxpemVyID0gZWxlbWVudE9iamVjdC5pbml0aWFsaXplcjsgfSByZXR1cm4gZWxlbWVudDsgfSwgdG9FbGVtZW50RmluaXNoZXJFeHRyYXM6IGZ1bmN0aW9uIHRvRWxlbWVudEZpbmlzaGVyRXh0cmFzKGVsZW1lbnRPYmplY3QpIHsgdmFyIGVsZW1lbnQgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudE9iamVjdCk7IHZhciBmaW5pc2hlciA9IF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkoZWxlbWVudE9iamVjdCwgXCJmaW5pc2hlclwiKTsgdmFyIGV4dHJhcyA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcnMoZWxlbWVudE9iamVjdC5leHRyYXMpOyByZXR1cm4geyBlbGVtZW50OiBlbGVtZW50LCBmaW5pc2hlcjogZmluaXNoZXIsIGV4dHJhczogZXh0cmFzIH07IH0sIGZyb21DbGFzc0Rlc2NyaXB0b3I6IGZ1bmN0aW9uIGZyb21DbGFzc0Rlc2NyaXB0b3IoZWxlbWVudHMpIHsgdmFyIG9iaiA9IHsga2luZDogXCJjbGFzc1wiLCBlbGVtZW50czogZWxlbWVudHMubWFwKHRoaXMuZnJvbUVsZW1lbnREZXNjcmlwdG9yLCB0aGlzKSB9OyB2YXIgZGVzYyA9IHsgdmFsdWU6IFwiRGVzY3JpcHRvclwiLCBjb25maWd1cmFibGU6IHRydWUgfTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgU3ltYm9sLnRvU3RyaW5nVGFnLCBkZXNjKTsgcmV0dXJuIG9iajsgfSwgdG9DbGFzc0Rlc2NyaXB0b3I6IGZ1bmN0aW9uIHRvQ2xhc3NEZXNjcmlwdG9yKG9iaikgeyB2YXIga2luZCA9IFN0cmluZyhvYmoua2luZCk7IGlmIChraW5kICE9PSBcImNsYXNzXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBjbGFzcyBkZXNjcmlwdG9yXFwncyAua2luZCBwcm9wZXJ0eSBtdXN0IGJlIFwiY2xhc3NcIiwgYnV0IGEgZGVjb3JhdG9yJyArICcgY3JlYXRlZCBhIGNsYXNzIGRlc2NyaXB0b3Igd2l0aCAua2luZCBcIicgKyBraW5kICsgJ1wiJyk7IH0gdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJrZXlcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwicGxhY2VtZW50XCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpOyB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcImRlc2NyaXB0b3JcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiaW5pdGlhbGl6ZXJcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiZXh0cmFzXCIsIFwiQSBjbGFzcyBkZXNjcmlwdG9yXCIpOyB2YXIgZmluaXNoZXIgPSBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KG9iaiwgXCJmaW5pc2hlclwiKTsgdmFyIGVsZW1lbnRzID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9ycyhvYmouZWxlbWVudHMpOyByZXR1cm4geyBlbGVtZW50czogZWxlbWVudHMsIGZpbmlzaGVyOiBmaW5pc2hlciB9OyB9LCBydW5DbGFzc0ZpbmlzaGVyczogZnVuY3Rpb24gcnVuQ2xhc3NGaW5pc2hlcnMoY29uc3RydWN0b3IsIGZpbmlzaGVycykgeyBmb3IgKHZhciBpID0gMDsgaSA8IGZpbmlzaGVycy5sZW5ndGg7IGkrKykgeyB2YXIgbmV3Q29uc3RydWN0b3IgPSAoMCwgZmluaXNoZXJzW2ldKShjb25zdHJ1Y3Rvcik7IGlmIChuZXdDb25zdHJ1Y3RvciAhPT0gdW5kZWZpbmVkKSB7IGlmICh0eXBlb2YgbmV3Q29uc3RydWN0b3IgIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmluaXNoZXJzIG11c3QgcmV0dXJuIGEgY29uc3RydWN0b3IuXCIpOyB9IGNvbnN0cnVjdG9yID0gbmV3Q29uc3RydWN0b3I7IH0gfSByZXR1cm4gY29uc3RydWN0b3I7IH0sIGRpc2FsbG93UHJvcGVydHk6IGZ1bmN0aW9uIGRpc2FsbG93UHJvcGVydHkob2JqLCBuYW1lLCBvYmplY3RUeXBlKSB7IGlmIChvYmpbbmFtZV0gIT09IHVuZGVmaW5lZCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKG9iamVjdFR5cGUgKyBcIiBjYW4ndCBoYXZlIGEgLlwiICsgbmFtZSArIFwiIHByb3BlcnR5LlwiKTsgfSB9IH07IHJldHVybiBhcGk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKGRlZikgeyB2YXIga2V5ID0gX3RvUHJvcGVydHlLZXkoZGVmLmtleSk7IHZhciBkZXNjcmlwdG9yOyBpZiAoZGVmLmtpbmQgPT09IFwibWV0aG9kXCIpIHsgZGVzY3JpcHRvciA9IHsgdmFsdWU6IGRlZi52YWx1ZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UgfTsgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gXCJnZXRcIikgeyBkZXNjcmlwdG9yID0geyBnZXQ6IGRlZi52YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSB9OyB9IGVsc2UgaWYgKGRlZi5raW5kID09PSBcInNldFwiKSB7IGRlc2NyaXB0b3IgPSB7IHNldDogZGVmLnZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlIH07IH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IFwiZmllbGRcIikgeyBkZXNjcmlwdG9yID0geyBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH07IH0gdmFyIGVsZW1lbnQgPSB7IGtpbmQ6IGRlZi5raW5kID09PSBcImZpZWxkXCIgPyBcImZpZWxkXCIgOiBcIm1ldGhvZFwiLCBrZXk6IGtleSwgcGxhY2VtZW50OiBkZWZbXCJzdGF0aWNcIl0gPyBcInN0YXRpY1wiIDogZGVmLmtpbmQgPT09IFwiZmllbGRcIiA/IFwib3duXCIgOiBcInByb3RvdHlwZVwiLCBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yIH07IGlmIChkZWYuZGVjb3JhdG9ycykgZWxlbWVudC5kZWNvcmF0b3JzID0gZGVmLmRlY29yYXRvcnM7IGlmIChkZWYua2luZCA9PT0gXCJmaWVsZFwiKSBlbGVtZW50LmluaXRpYWxpemVyID0gZGVmLnZhbHVlOyByZXR1cm4gZWxlbWVudDsgfVxuXG5mdW5jdGlvbiBfY29hbGVzY2VHZXR0ZXJTZXR0ZXIoZWxlbWVudCwgb3RoZXIpIHsgaWYgKGVsZW1lbnQuZGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkgeyBvdGhlci5kZXNjcmlwdG9yLmdldCA9IGVsZW1lbnQuZGVzY3JpcHRvci5nZXQ7IH0gZWxzZSB7IG90aGVyLmRlc2NyaXB0b3Iuc2V0ID0gZWxlbWVudC5kZXNjcmlwdG9yLnNldDsgfSB9XG5cbmZ1bmN0aW9uIF9jb2FsZXNjZUNsYXNzRWxlbWVudHMoZWxlbWVudHMpIHsgdmFyIG5ld0VsZW1lbnRzID0gW107IHZhciBpc1NhbWVFbGVtZW50ID0gZnVuY3Rpb24gaXNTYW1lRWxlbWVudChvdGhlcikgeyByZXR1cm4gb3RoZXIua2luZCA9PT0gXCJtZXRob2RcIiAmJiBvdGhlci5rZXkgPT09IGVsZW1lbnQua2V5ICYmIG90aGVyLnBsYWNlbWVudCA9PT0gZWxlbWVudC5wbGFjZW1lbnQ7IH07IGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTsgdmFyIG90aGVyOyBpZiAoZWxlbWVudC5raW5kID09PSBcIm1ldGhvZFwiICYmIChvdGhlciA9IG5ld0VsZW1lbnRzLmZpbmQoaXNTYW1lRWxlbWVudCkpKSB7IGlmIChfaXNEYXRhRGVzY3JpcHRvcihlbGVtZW50LmRlc2NyaXB0b3IpIHx8IF9pc0RhdGFEZXNjcmlwdG9yKG90aGVyLmRlc2NyaXB0b3IpKSB7IGlmIChfaGFzRGVjb3JhdG9ycyhlbGVtZW50KSB8fCBfaGFzRGVjb3JhdG9ycyhvdGhlcikpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRHVwbGljYXRlZCBtZXRob2RzIChcIiArIGVsZW1lbnQua2V5ICsgXCIpIGNhbid0IGJlIGRlY29yYXRlZC5cIik7IH0gb3RoZXIuZGVzY3JpcHRvciA9IGVsZW1lbnQuZGVzY3JpcHRvcjsgfSBlbHNlIHsgaWYgKF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpKSB7IGlmIChfaGFzRGVjb3JhdG9ycyhvdGhlcikpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRGVjb3JhdG9ycyBjYW4ndCBiZSBwbGFjZWQgb24gZGlmZmVyZW50IGFjY2Vzc29ycyB3aXRoIGZvciBcIiArIFwidGhlIHNhbWUgcHJvcGVydHkgKFwiICsgZWxlbWVudC5rZXkgKyBcIikuXCIpOyB9IG90aGVyLmRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnM7IH0gX2NvYWxlc2NlR2V0dGVyU2V0dGVyKGVsZW1lbnQsIG90aGVyKTsgfSB9IGVsc2UgeyBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnQpOyB9IH0gcmV0dXJuIG5ld0VsZW1lbnRzOyB9XG5cbmZ1bmN0aW9uIF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQuZGVjb3JhdG9ycyAmJiBlbGVtZW50LmRlY29yYXRvcnMubGVuZ3RoOyB9XG5cbmZ1bmN0aW9uIF9pc0RhdGFEZXNjcmlwdG9yKGRlc2MpIHsgcmV0dXJuIGRlc2MgIT09IHVuZGVmaW5lZCAmJiAhKGRlc2MudmFsdWUgPT09IHVuZGVmaW5lZCAmJiBkZXNjLndyaXRhYmxlID09PSB1bmRlZmluZWQpOyB9XG5cbmZ1bmN0aW9uIF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkob2JqLCBuYW1lKSB7IHZhciB2YWx1ZSA9IG9ialtuYW1lXTsgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkICdcIiArIG5hbWUgKyBcIicgdG8gYmUgYSBmdW5jdGlvblwiKTsgfSByZXR1cm4gdmFsdWU7IH1cblxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIF90eXBlb2Yoa2V5KSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9XG5cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cblxuZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7IH1cblxuZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbnZhciBMZWFmID0gcmVxdWlyZSgnLi4vVHJlZS9MZWFmJyk7XG5cbnZhciByZXNpemUgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvcmVzaXplJyk7XG5cbnZhciBlZGl0QXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy9lZGl0QXR0cmlidXRlcycpO1xuXG52YXIgZWRpdFByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvZWRpdFByb3BlcnRpZXMnKTtcblxudmFyIHNlbGVjdG9yR2V0dGVyID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL3NlbGVjdG9yJyk7XG5cbnZhciBNb25vSW5jaWRlbnQgPSByZXF1aXJlKCcuLi9CYXNlQ2xhc3Nlcy9Nb25vSW5jaWRlbnQnKTtcblxudmFyIEF0dHJpYnV0ZUNoYW5uZWwgPSByZXF1aXJlKCcuLi9DaGFubmVscy9BdHRyaWJ1dGUvQXR0cmlidXRlQ2hhbm5lbCcpO1xuXG52YXIgRGVzY3JpcHRpdmVJbmNpZGVudCA9IF9kZWNvcmF0ZShudWxsLCBmdW5jdGlvbiAoX2luaXRpYWxpemUsIF9MZWFmKSB7XG4gIHZhciBEZXNjcmlwdGl2ZUluY2lkZW50ID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0xlYWYyKSB7XG4gICAgX2luaGVyaXRzKERlc2NyaXB0aXZlSW5jaWRlbnQsIF9MZWFmMik7XG5cbiAgICBmdW5jdGlvbiBEZXNjcmlwdGl2ZUluY2lkZW50KGF0dHJzLCBwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVzY3JpcHRpdmVJbmNpZGVudCk7XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKERlc2NyaXB0aXZlSW5jaWRlbnQpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgX2luaXRpYWxpemUoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuXG4gICAgICBfdGhpcy5pbmhlcml0ZWRTZWxlY3RvciA9IG51bGw7XG4gICAgICBfdGhpcy5hdHRycyA9IGF0dHJzO1xuXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJkdXJhdGlvblwiKSkge1xuICAgICAgICBwcm9wcy5kdXJhdGlvbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnByb3BzID0gcHJvcHM7IC8vIHRoZSBwYXNzaXZlIGZsYWcgKHdoZW4gdHJ1ZSkgaW5kaWNhdGVzIHRoYXQgdGhlIERlc2NyaXB0aXZlIEdyb3VwIGhhcyBiZWVuIGNyZWF0ZWRcbiAgICAgIC8vIGFuZCBwYXNzaXZlbHkgYWRkZWQgdG8gYSBDbGlwIG9yIGEgQ29tYm8gdmlhIGJ1aWxkVHJlZSBtZXRob2QuXG4gICAgICAvLyBEZWZhdWx0cyB0byBmYWxzZVxuXG4gICAgICBfdGhpcy5wYXNzaXZlID0gZmFsc2U7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIERlc2NyaXB0aXZlSW5jaWRlbnQ7XG4gIH0oX0xlYWYpO1xuXG4gIHJldHVybiB7XG4gICAgRjogRGVzY3JpcHRpdmVJbmNpZGVudCxcbiAgICBkOiBbe1xuICAgICAga2luZDogXCJmaWVsZFwiLFxuICAgICAgXCJzdGF0aWNcIjogdHJ1ZSxcbiAgICAgIGtleTogXCJJbmNpZGVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gTW9ub0luY2lkZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwiZmllbGRcIixcbiAgICAgIFwic3RhdGljXCI6IHRydWUsXG4gICAgICBrZXk6IFwicGx1Z2luX25wbV9uYW1lXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBcIm1vdG9yLWNvcnRleC1qcy1hdHRyaWJ1dGVcIjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBraW5kOiBcImZpZWxkXCIsXG4gICAgICBcInN0YXRpY1wiOiB0cnVlLFxuICAgICAga2V5OiBcIkNoYW5uZWxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZUNoYW5uZWw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJmaWVsZFwiLFxuICAgICAgXCJzdGF0aWNcIjogdHJ1ZSxcbiAgICAgIGtleTogXCJDbGFzc05hbWVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSW5jaWRlbnRcIjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAgZGVjb3JhdG9yczogW2VkaXRBdHRyaWJ1dGVzXSxcbiAgICAgIGtleTogXCJlZGl0QXR0cmlidXRlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVkaXRBdHRyaWJ1dGVzKCkge31cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAgZGVjb3JhdG9yczogW2VkaXRQcm9wZXJ0aWVzXSxcbiAgICAgIGtleTogXCJlZGl0UHJvcGVydGllc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVkaXRQcm9wZXJ0aWVzKCkge31cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAgZGVjb3JhdG9yczogW3Jlc2l6ZV0sXG4gICAgICBrZXk6IFwicmVzaXplXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzaXplKCkge31cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAgZGVjb3JhdG9yczogW3NlbGVjdG9yR2V0dGVyXSxcbiAgICAgIGtleTogXCJzZWxlY3RvclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdG9yKCkge31cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAga2V5OiBcIm1hbmFnZUVkaXRBdHRyUHJvcHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYW5hZ2VFZGl0QXR0clByb3BzKG5ld0F0dHJzLCB0eXBlKSB7XG4gICAgICAgIC8vIGdldCBhIHBlcm1hbmVudCByZWZlcmVuY2UgdG8gaXRzIHBhcmVudCBub2RlXG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gdGhpcy5wYXJlbnROb2RlOyAvLyBnZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBJbmNpZGVudCB3aXRoaW4gaXRzIHBhcmVudFxuXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHBhcmVudE5vZGUuZ2V0TGVhZlBvc2l0aW9uKHRoaXMuaWQpOyAvLyBmaXJzdCBkZXRhY2ggdGhlIEluY2lkZW50IGZyb20gaXRzIHBhcmVudFxuXG4gICAgICAgIHBhcmVudE5vZGUucmVtb3ZlSW5jaWRlbnQodGhpcy5pZCk7IC8vIGtlZXAgYSBiYWNrdXAgb2YgdGhlIGN1cnJlbnQgYXR0cnMvcHJvcHNcblxuICAgICAgICB2YXIgb2xkQXR0cnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXNbdHlwZV0pKTtcbiAgICAgICAgdGhpc1t0eXBlXSA9IG5ld0F0dHJzO1xuICAgICAgICB2YXIgcmVzID0gcGFyZW50Tm9kZS5hZGRJbmNpZGVudCh0aGlzLCBwb3NpdGlvbik7XG5cbiAgICAgICAgaWYgKHJlcy5yZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVJbmNpZGVudCh0aGlzLmlkKTtcbiAgICAgICAgICB0aGlzW3R5cGVdID0gb2xkQXR0cnM7XG4gICAgICAgICAgcGFyZW50Tm9kZS5hZGRJbmNpZGVudCh0aGlzLCBwb3NpdGlvbik7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJkZXRhY2hGcm9tUGFyZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoRnJvbVBhcmVudCgpIHtcbiAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoRGVzY3JpcHRpdmVJbmNpZGVudC5wcm90b3R5cGUpLCBcImRldGFjaEZyb21QYXJlbnRcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmluaGVyaXRlZFNlbGVjdG9yID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAga2V5OiBcImhhbmRsZUNoZWNrRm9ySW52YWxpZFNlbGVjdG9yc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNoZWNrRm9ySW52YWxpZFNlbGVjdG9ycygpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcigpO1xuXG4gICAgICAgIGlmIChzZWxlY3RvciA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIENsYXNzTmFtZTogdGhpcy5jb25zdHJ1Y3Rvci5DbGFzc05hbWUsXG4gICAgICAgICAgICBwbHVnaW5fbnBtX25hbWU6IHRoaXMuY29uc3RydWN0b3IucGx1Z2luX25wbV9uYW1lLFxuICAgICAgICAgICAgZXJyb3I6ICdudWxsIHNlbGVjdG9yJ1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IuY2hhckF0KDApID09PSBcIiZcIikge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIENsYXNzTmFtZTogdGhpcy5jb25zdHJ1Y3Rvci5DbGFzc05hbWUsXG4gICAgICAgICAgICBwbHVnaW5fbnBtX25hbWU6IHRoaXMuY29uc3RydWN0b3IucGx1Z2luX25wbV9uYW1lLFxuICAgICAgICAgICAgZXJyb3I6ICdyZWxhdGl2ZSBzZWxlY3RvciB3aXRoIG5vIGluaGVyaXRlZCBzZWxlY3RvcicsXG4gICAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgcmV0dXJuIHRoaXMuYnlwYXNzKCk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIGV4cG9ydCBhIHBvcnRhYmxlIGRlZmluaXRpb24gdGhhdCBjYW4gYmVcbiAgICAgICAqIGxhdGVyIHVzZWQgaW4gb3JkZXIgdG8gcmVidWlsZCB0aGUgSW5pY2RlbnQgYXQgYW55IHRpbWVcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJleHBvcnREZWZpbml0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZXhwb3J0RGVmaW5pdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBDbGFzc05hbWU6IHRoaXMuY29uc3RydWN0b3IuQ2xhc3NOYW1lLFxuICAgICAgICAgIHBsdWdpbl9ucG1fbmFtZTogdGhpcy5jb25zdHJ1Y3Rvci5wbHVnaW5fbnBtX25hbWUsXG4gICAgICAgICAgYXR0cnM6IHRoaXMuYXR0cnMsXG4gICAgICAgICAgcHJvcHM6IHRoaXMucHJvcHNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XVxuICB9O1xufSwgTGVhZik7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVzY3JpcHRpdmVJbmNpZGVudDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _TARGETTYPES: {\n    _DECISIONAUTHORITY: \"mc.descriptive.decisionAuthority\"\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9fQ09OU1QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9fQ09OU1QuanM/ZWY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIF9UQVJHRVRUWVBFUzoge1xuICAgIF9ERUNJU0lPTkFVVEhPUklUWTogXCJtYy5kZXNjcmlwdGl2ZS5kZWNpc2lvbkF1dGhvcml0eVwiXG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction editAttributes(payload) {\n  payload.descriptor.value = function (newAttrs) {\n    var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n\n    if (checkIfBelongsToClip.response === true) {\n      // if the Group belongs on a Clip\n      return this.manageEditAttrProps(newAttrs, 'attrs');\n    } else {\n      this.attrs = newAttrs;\n      return {\n        result: true\n      };\n    }\n  };\n}\n\nmodule.exports = editAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9kZWNvcmF0b3JzL2VkaXRBdHRyaWJ1dGVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvRGVzY3JpcHRpdmVJbmNpZGVudHMvZGVjb3JhdG9ycy9lZGl0QXR0cmlidXRlcy5qcz9hZGYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX0NPTlNUID0gcmVxdWlyZSgnLi4vX0NPTlNUJyk7XG5cbnZhciBfVFJFRUNPTlNUID0gcmVxdWlyZSgnLi4vLi4vVHJlZS9fQ09OU1QnKTtcblxuZnVuY3Rpb24gZWRpdEF0dHJpYnV0ZXMocGF5bG9hZCkge1xuICBwYXlsb2FkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAobmV3QXR0cnMpIHtcbiAgICB2YXIgY2hlY2tJZkJlbG9uZ3NUb0NsaXAgPSB0aGlzLnB1dE1lc3NhZ2VPblBpcGUoJ2NoZWNrRm9yQ2xpcCcsIHt9LCBfQ09OU1QuX1RBUkdFVFRZUEVTLl9ERUNJU0lPTkFVVEhPUklUWSwge1xuICAgICAgc2VsZkV4ZWN1dGU6IHRydWUsXG4gICAgICBkaXJlY3Rpb246IF9UUkVFQ09OU1QuX0RJUkVDVElPTlMuX1VQXG4gICAgfSk7XG5cbiAgICBpZiAoY2hlY2tJZkJlbG9uZ3NUb0NsaXAucmVzcG9uc2UgPT09IHRydWUpIHtcbiAgICAgIC8vIGlmIHRoZSBHcm91cCBiZWxvbmdzIG9uIGEgQ2xpcFxuICAgICAgcmV0dXJuIHRoaXMubWFuYWdlRWRpdEF0dHJQcm9wcyhuZXdBdHRycywgJ2F0dHJzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXR0cnMgPSBuZXdBdHRycztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdEF0dHJpYnV0ZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editAttributes.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction editProperties(payload) {\n  payload.descriptor.value = function (newProps) {\n    var checkIfBelongsToClip = this.putMessageOnPipe('checkForClip', {}, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n      selfExecute: true,\n      direction: _TREECONST._DIRECTIONS._UP\n    });\n\n    if (checkIfBelongsToClip.response === true) {\n      // if the Group belongs on a Clip\n      return this.manageEditAttrProps(newProps, 'props');\n    } else {\n      this.props = newProps;\n      return {\n        result: true\n      };\n    }\n  };\n}\n\nmodule.exports = editProperties;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9kZWNvcmF0b3JzL2VkaXRQcm9wZXJ0aWVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvRGVzY3JpcHRpdmVJbmNpZGVudHMvZGVjb3JhdG9ycy9lZGl0UHJvcGVydGllcy5qcz9iOWQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX0NPTlNUID0gcmVxdWlyZSgnLi4vX0NPTlNUJyk7XG5cbnZhciBfVFJFRUNPTlNUID0gcmVxdWlyZSgnLi4vLi4vVHJlZS9fQ09OU1QnKTtcblxuZnVuY3Rpb24gZWRpdFByb3BlcnRpZXMocGF5bG9hZCkge1xuICBwYXlsb2FkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAobmV3UHJvcHMpIHtcbiAgICB2YXIgY2hlY2tJZkJlbG9uZ3NUb0NsaXAgPSB0aGlzLnB1dE1lc3NhZ2VPblBpcGUoJ2NoZWNrRm9yQ2xpcCcsIHt9LCBfQ09OU1QuX1RBUkdFVFRZUEVTLl9ERUNJU0lPTkFVVEhPUklUWSwge1xuICAgICAgc2VsZkV4ZWN1dGU6IHRydWUsXG4gICAgICBkaXJlY3Rpb246IF9UUkVFQ09OU1QuX0RJUkVDVElPTlMuX1VQXG4gICAgfSk7XG5cbiAgICBpZiAoY2hlY2tJZkJlbG9uZ3NUb0NsaXAucmVzcG9uc2UgPT09IHRydWUpIHtcbiAgICAgIC8vIGlmIHRoZSBHcm91cCBiZWxvbmdzIG9uIGEgQ2xpcFxuICAgICAgcmV0dXJuIHRoaXMubWFuYWdlRWRpdEF0dHJQcm9wcyhuZXdQcm9wcywgJ3Byb3BzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvcHMgPSBuZXdQcm9wcztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdFByb3BlcnRpZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/editProperties.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _CONST = __webpack_require__(/*! ../_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/_CONST.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nfunction resize(payload) {\n  payload.descriptor.value = function (newSize) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      check: true\n    };\n\n    if (newSize === this.duration) {\n      return {\n        result: true,\n        meta: {\n          unprocessed: true\n        }\n      };\n    }\n\n    if (newSize <= 0) {\n      return {\n        result: false,\n        reason: 'Size must always be > 0'\n      };\n    }\n\n    if (options.check === true && this.hasParent) {\n      var mcCheck = this.putMessageOnPipe('checkResize', {\n        id: this.id,\n        newSize: newSize,\n        fraction: newSize / this.duration\n      }, _CONST._TARGETTYPES._DECISIONAUTHORITY, {\n        selfExecute: false,\n        direction: _TREECONST._DIRECTIONS._UP\n      });\n\n      if (mcCheck.response.result === false) {\n        return mcCheck.response;\n      }\n    }\n\n    this.setNewDuration(newSize);\n    return {\n      result: true\n    };\n  };\n}\n\nmodule.exports = resize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9kZWNvcmF0b3JzL3Jlc2l6ZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L0Rlc2NyaXB0aXZlSW5jaWRlbnRzL2RlY29yYXRvcnMvcmVzaXplLmpzPzg0MTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfQ09OU1QgPSByZXF1aXJlKCcuLi9fQ09OU1QnKTtcblxudmFyIF9UUkVFQ09OU1QgPSByZXF1aXJlKCcuLi8uLi9UcmVlL19DT05TVCcpO1xuXG5mdW5jdGlvbiByZXNpemUocGF5bG9hZCkge1xuICBwYXlsb2FkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAobmV3U2l6ZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7XG4gICAgICBjaGVjazogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAobmV3U2l6ZSA9PT0gdGhpcy5kdXJhdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0OiB0cnVlLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgdW5wcm9jZXNzZWQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobmV3U2l6ZSA8PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IGZhbHNlLFxuICAgICAgICByZWFzb246ICdTaXplIG11c3QgYWx3YXlzIGJlID4gMCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2hlY2sgPT09IHRydWUgJiYgdGhpcy5oYXNQYXJlbnQpIHtcbiAgICAgIHZhciBtY0NoZWNrID0gdGhpcy5wdXRNZXNzYWdlT25QaXBlKCdjaGVja1Jlc2l6ZScsIHtcbiAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgIG5ld1NpemU6IG5ld1NpemUsXG4gICAgICAgIGZyYWN0aW9uOiBuZXdTaXplIC8gdGhpcy5kdXJhdGlvblxuICAgICAgfSwgX0NPTlNULl9UQVJHRVRUWVBFUy5fREVDSVNJT05BVVRIT1JJVFksIHtcbiAgICAgICAgc2VsZkV4ZWN1dGU6IGZhbHNlLFxuICAgICAgICBkaXJlY3Rpb246IF9UUkVFQ09OU1QuX0RJUkVDVElPTlMuX1VQXG4gICAgICB9KTtcblxuICAgICAgaWYgKG1jQ2hlY2sucmVzcG9uc2UucmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbWNDaGVjay5yZXNwb25zZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldE5ld0R1cmF0aW9uKG5ld1NpemUpO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHQ6IHRydWVcbiAgICB9O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc2l6ZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/resize.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction selector(payload) {\n  payload.descriptor.value = function () {\n    if (this.inheritedSelector === null) {\n      // if the Incident has no parent selector inherited\n      if (!Object.prototype.hasOwnProperty.call(this.props, \"selector\")) {\n        // and does not have a selector neither\n        return null; // then its selector is null\n      } else {\n        return this.props.selector; // else, if it has a selector that's its final selector\n      }\n    } else {\n      // else if there is an inherited selector\n      if (!Object.prototype.hasOwnProperty.call(this.props, \"selector\")) {\n        // and does not have a selector of its own\n        return this.inheritedSelector; // then its selector is equal to the inherited selector\n      } else {\n        // else, if it both has an inherited and an own selector\n        if (this.props.selector.charAt(0) === \"&\") {\n          return this.inheritedSelector + this.props.selector.substring(1);\n        } else {\n          return this.inheritedSelector + ' ' + this.props.selector;\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = selector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9EZXNjcmlwdGl2ZUluY2lkZW50cy9kZWNvcmF0b3JzL3NlbGVjdG9yLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvRGVzY3JpcHRpdmVJbmNpZGVudHMvZGVjb3JhdG9ycy9zZWxlY3Rvci5qcz80MTRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBzZWxlY3RvcihwYXlsb2FkKSB7XG4gIHBheWxvYWQuZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pbmhlcml0ZWRTZWxlY3RvciA9PT0gbnVsbCkge1xuICAgICAgLy8gaWYgdGhlIEluY2lkZW50IGhhcyBubyBwYXJlbnQgc2VsZWN0b3IgaW5oZXJpdGVkXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnByb3BzLCBcInNlbGVjdG9yXCIpKSB7XG4gICAgICAgIC8vIGFuZCBkb2VzIG5vdCBoYXZlIGEgc2VsZWN0b3IgbmVpdGhlclxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gdGhlbiBpdHMgc2VsZWN0b3IgaXMgbnVsbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2VsZWN0b3I7IC8vIGVsc2UsIGlmIGl0IGhhcyBhIHNlbGVjdG9yIHRoYXQncyBpdHMgZmluYWwgc2VsZWN0b3JcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZWxzZSBpZiB0aGVyZSBpcyBhbiBpbmhlcml0ZWQgc2VsZWN0b3JcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMucHJvcHMsIFwic2VsZWN0b3JcIikpIHtcbiAgICAgICAgLy8gYW5kIGRvZXMgbm90IGhhdmUgYSBzZWxlY3RvciBvZiBpdHMgb3duXG4gICAgICAgIHJldHVybiB0aGlzLmluaGVyaXRlZFNlbGVjdG9yOyAvLyB0aGVuIGl0cyBzZWxlY3RvciBpcyBlcXVhbCB0byB0aGUgaW5oZXJpdGVkIHNlbGVjdG9yXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlbHNlLCBpZiBpdCBib3RoIGhhcyBhbiBpbmhlcml0ZWQgYW5kIGFuIG93biBzZWxlY3RvclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3Rvci5jaGFyQXQoMCkgPT09IFwiJlwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5oZXJpdGVkU2VsZWN0b3IgKyB0aGlzLnByb3BzLnNlbGVjdG9yLnN1YnN0cmluZygxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbmhlcml0ZWRTZWxlY3RvciArICcgJyArIHRoaXMucHJvcHMuc2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2VsZWN0b3I7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/decorators/selector.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar ElementSplitter = __webpack_require__(/*! ../Splitters/ElementSplitter */ \"../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\");\n\nvar ElementClipSplitter = __webpack_require__(/*! ../Splitters/ElementClipSplitter */ \"../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ./incidentFromIngredients */ \"../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Channel.js\");\n/**\n * Creates a real Incident (with all of its real tree) out of the Descriptive Incident.\n * @param {object} descriptiveIncident - the Descriptive Incident that defines the Incident\n * @param {contextData} - the context data (object containing id and actual context) to be used for real\n *      Incidents init\n * @param {boolean} audio - defaults to false. It defines whether the method is been used\n *      by a real Clip or the Audio clip\n * @returns {object} - the real Incident\n **/\n\n\nfunction incidentFromDescription(descriptiveIncident, contextData) {\n  var audio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  /*\n  RULES:\n  - Clips can only have selectors (and not hosts) as they participate on a Desc. Tree\n      and thus they are Clips As Incidents. The DescriptiveClips are treated a bit\n      different compared to the rest of the Incidents as they copy all of the\n      Description channels and lanes\n  - Descriptive Incidents can either have or not have selectors\n  - Descriptive Compos always have selectors\n   All Incidents of the tree, no matter their type have the static properties:\n  - Incident (which is the Incident class they need to initialise)\n  - plugin_npm_name (the plugin name they bolong to)\n  - Channel (the Channel class to handle the instance)\n  */\n\n  /* check for the descriptive incident and audio compatibility. If audio is true then we're\n      working on the audioClip and we need incidents that are at least \"on\" while if the audio==false\n      and we are working on the real tree then we reject the cases that the incident is audio \"only\"\n  */\n  if (audio === true && descriptiveIncident.audio === \"off\" || audio === false && descriptiveIncident.audio === \"only\") {\n    return null;\n  }\n\n  var incidentToReturn;\n\n  if (Object.prototype.hasOwnProperty.call(descriptiveIncident.props, 'selector')) {\n    if (audio === false && descriptiveIncident.props.selector.charAt(0) === '~' || audio === true && descriptiveIncident.props.selector.charAt(0) !== '~' && descriptiveIncident.constructor.isClip === false) {\n      return null;\n    }\n  }\n\n  if (descriptiveIncident.constructor.isClip === true) {\n    if (Object.prototype.hasOwnProperty.call(descriptiveIncident.props, 'selector') && audio === false) {\n      incidentToReturn = new ElementClipSplitter(descriptiveIncident, contextData);\n      incidentToReturn.plugin_channel_class = Channel;\n    } else {\n      if (audio === true) {\n        return descriptiveIncident.audioClip;\n      } else {\n        return descriptiveIncident.realClip;\n      }\n    }\n  } else if (descriptiveIncident.constructor.Incident === Group) {\n    incidentToReturn = incidentFromIngredients({\n      id: descriptiveIncident.id,\n      attrs: descriptiveIncident.attrs,\n      props: descriptiveIncident.props,\n      Incident: descriptiveIncident.constructor.Incident,\n      plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n      Channel: descriptiveIncident.constructor.Channel,\n      DescriptiveIncident: descriptiveIncident\n    });\n\n    for (var incId in descriptiveIncident.children) {\n      var childIncident = incidentFromDescription(descriptiveIncident.children[incId].leaf, contextData);\n\n      if (childIncident === null) {\n        continue;\n      }\n\n      incidentToReturn.addChild(childIncident, descriptiveIncident.children[incId].position);\n    }\n  } else {\n    // if it is an Incident that extends the Incident (not a Group) then\n    // we should anaylse it to its element/attribute Incidents starting from\n    // the elements, that's why we create an ElementSplitter. It is our\n    // starting point to which the Incident will be analysed to its\n    // element/attributes children.\n    incidentToReturn = new ElementSplitter(descriptiveIncident, contextData);\n  }\n\n  return incidentToReturn;\n}\n\nmodule.exports = incidentFromDescription;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9JbmNpZGVudEZyb21EZWZpbml0aW9uL2luY2lkZW50RnJvbURlc2NyaXB0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvSW5jaWRlbnRGcm9tRGVmaW5pdGlvbi9pbmNpZGVudEZyb21EZXNjcmlwdGlvbi5qcz9mZGZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgR3JvdXAgPSByZXF1aXJlKCcuLi9CYXNlQ2xhc3Nlcy9Hcm91cCcpO1xuXG52YXIgRWxlbWVudFNwbGl0dGVyID0gcmVxdWlyZSgnLi4vU3BsaXR0ZXJzL0VsZW1lbnRTcGxpdHRlcicpO1xuXG52YXIgRWxlbWVudENsaXBTcGxpdHRlciA9IHJlcXVpcmUoJy4uL1NwbGl0dGVycy9FbGVtZW50Q2xpcFNwbGl0dGVyJyk7XG5cbnZhciBpbmNpZGVudEZyb21JbmdyZWRpZW50cyA9IHJlcXVpcmUoJy4vaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMnKTtcblxudmFyIENoYW5uZWwgPSByZXF1aXJlKCcuLi9DaGFubmVscy9DaGFubmVsJyk7XG4vKipcbiAqIENyZWF0ZXMgYSByZWFsIEluY2lkZW50ICh3aXRoIGFsbCBvZiBpdHMgcmVhbCB0cmVlKSBvdXQgb2YgdGhlIERlc2NyaXB0aXZlIEluY2lkZW50LlxuICogQHBhcmFtIHtvYmplY3R9IGRlc2NyaXB0aXZlSW5jaWRlbnQgLSB0aGUgRGVzY3JpcHRpdmUgSW5jaWRlbnQgdGhhdCBkZWZpbmVzIHRoZSBJbmNpZGVudFxuICogQHBhcmFtIHtjb250ZXh0RGF0YX0gLSB0aGUgY29udGV4dCBkYXRhIChvYmplY3QgY29udGFpbmluZyBpZCBhbmQgYWN0dWFsIGNvbnRleHQpIHRvIGJlIHVzZWQgZm9yIHJlYWxcbiAqICAgICAgSW5jaWRlbnRzIGluaXRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYXVkaW8gLSBkZWZhdWx0cyB0byBmYWxzZS4gSXQgZGVmaW5lcyB3aGV0aGVyIHRoZSBtZXRob2QgaXMgYmVlbiB1c2VkXG4gKiAgICAgIGJ5IGEgcmVhbCBDbGlwIG9yIHRoZSBBdWRpbyBjbGlwXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIHRoZSByZWFsIEluY2lkZW50XG4gKiovXG5cblxuZnVuY3Rpb24gaW5jaWRlbnRGcm9tRGVzY3JpcHRpb24oZGVzY3JpcHRpdmVJbmNpZGVudCwgY29udGV4dERhdGEpIHtcbiAgdmFyIGF1ZGlvID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICAvKlxuICBSVUxFUzpcbiAgLSBDbGlwcyBjYW4gb25seSBoYXZlIHNlbGVjdG9ycyAoYW5kIG5vdCBob3N0cykgYXMgdGhleSBwYXJ0aWNpcGF0ZSBvbiBhIERlc2MuIFRyZWVcbiAgICAgIGFuZCB0aHVzIHRoZXkgYXJlIENsaXBzIEFzIEluY2lkZW50cy4gVGhlIERlc2NyaXB0aXZlQ2xpcHMgYXJlIHRyZWF0ZWQgYSBiaXRcbiAgICAgIGRpZmZlcmVudCBjb21wYXJlZCB0byB0aGUgcmVzdCBvZiB0aGUgSW5jaWRlbnRzIGFzIHRoZXkgY29weSBhbGwgb2YgdGhlXG4gICAgICBEZXNjcmlwdGlvbiBjaGFubmVscyBhbmQgbGFuZXNcbiAgLSBEZXNjcmlwdGl2ZSBJbmNpZGVudHMgY2FuIGVpdGhlciBoYXZlIG9yIG5vdCBoYXZlIHNlbGVjdG9yc1xuICAtIERlc2NyaXB0aXZlIENvbXBvcyBhbHdheXMgaGF2ZSBzZWxlY3RvcnNcbiAgIEFsbCBJbmNpZGVudHMgb2YgdGhlIHRyZWUsIG5vIG1hdHRlciB0aGVpciB0eXBlIGhhdmUgdGhlIHN0YXRpYyBwcm9wZXJ0aWVzOlxuICAtIEluY2lkZW50ICh3aGljaCBpcyB0aGUgSW5jaWRlbnQgY2xhc3MgdGhleSBuZWVkIHRvIGluaXRpYWxpc2UpXG4gIC0gcGx1Z2luX25wbV9uYW1lICh0aGUgcGx1Z2luIG5hbWUgdGhleSBib2xvbmcgdG8pXG4gIC0gQ2hhbm5lbCAodGhlIENoYW5uZWwgY2xhc3MgdG8gaGFuZGxlIHRoZSBpbnN0YW5jZSlcbiAgKi9cblxuICAvKiBjaGVjayBmb3IgdGhlIGRlc2NyaXB0aXZlIGluY2lkZW50IGFuZCBhdWRpbyBjb21wYXRpYmlsaXR5LiBJZiBhdWRpbyBpcyB0cnVlIHRoZW4gd2UncmVcbiAgICAgIHdvcmtpbmcgb24gdGhlIGF1ZGlvQ2xpcCBhbmQgd2UgbmVlZCBpbmNpZGVudHMgdGhhdCBhcmUgYXQgbGVhc3QgXCJvblwiIHdoaWxlIGlmIHRoZSBhdWRpbz09ZmFsc2VcbiAgICAgIGFuZCB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcmVhbCB0cmVlIHRoZW4gd2UgcmVqZWN0IHRoZSBjYXNlcyB0aGF0IHRoZSBpbmNpZGVudCBpcyBhdWRpbyBcIm9ubHlcIlxuICAqL1xuICBpZiAoYXVkaW8gPT09IHRydWUgJiYgZGVzY3JpcHRpdmVJbmNpZGVudC5hdWRpbyA9PT0gXCJvZmZcIiB8fCBhdWRpbyA9PT0gZmFsc2UgJiYgZGVzY3JpcHRpdmVJbmNpZGVudC5hdWRpbyA9PT0gXCJvbmx5XCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBpbmNpZGVudFRvUmV0dXJuO1xuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGVzY3JpcHRpdmVJbmNpZGVudC5wcm9wcywgJ3NlbGVjdG9yJykpIHtcbiAgICBpZiAoYXVkaW8gPT09IGZhbHNlICYmIGRlc2NyaXB0aXZlSW5jaWRlbnQucHJvcHMuc2VsZWN0b3IuY2hhckF0KDApID09PSAnficgfHwgYXVkaW8gPT09IHRydWUgJiYgZGVzY3JpcHRpdmVJbmNpZGVudC5wcm9wcy5zZWxlY3Rvci5jaGFyQXQoMCkgIT09ICd+JyAmJiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLmlzQ2xpcCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLmlzQ2xpcCA9PT0gdHJ1ZSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGVzY3JpcHRpdmVJbmNpZGVudC5wcm9wcywgJ3NlbGVjdG9yJykgJiYgYXVkaW8gPT09IGZhbHNlKSB7XG4gICAgICBpbmNpZGVudFRvUmV0dXJuID0gbmV3IEVsZW1lbnRDbGlwU3BsaXR0ZXIoZGVzY3JpcHRpdmVJbmNpZGVudCwgY29udGV4dERhdGEpO1xuICAgICAgaW5jaWRlbnRUb1JldHVybi5wbHVnaW5fY2hhbm5lbF9jbGFzcyA9IENoYW5uZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhdWRpbyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpdmVJbmNpZGVudC5hdWRpb0NsaXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpdmVJbmNpZGVudC5yZWFsQ2xpcDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5JbmNpZGVudCA9PT0gR3JvdXApIHtcbiAgICBpbmNpZGVudFRvUmV0dXJuID0gaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMoe1xuICAgICAgaWQ6IGRlc2NyaXB0aXZlSW5jaWRlbnQuaWQsXG4gICAgICBhdHRyczogZGVzY3JpcHRpdmVJbmNpZGVudC5hdHRycyxcbiAgICAgIHByb3BzOiBkZXNjcmlwdGl2ZUluY2lkZW50LnByb3BzLFxuICAgICAgSW5jaWRlbnQ6IGRlc2NyaXB0aXZlSW5jaWRlbnQuY29uc3RydWN0b3IuSW5jaWRlbnQsXG4gICAgICBwbHVnaW5fbnBtX25hbWU6IGRlc2NyaXB0aXZlSW5jaWRlbnQuY29uc3RydWN0b3IucGx1Z2luX25wbV9uYW1lLFxuICAgICAgQ2hhbm5lbDogZGVzY3JpcHRpdmVJbmNpZGVudC5jb25zdHJ1Y3Rvci5DaGFubmVsLFxuICAgICAgRGVzY3JpcHRpdmVJbmNpZGVudDogZGVzY3JpcHRpdmVJbmNpZGVudFxuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgaW5jSWQgaW4gZGVzY3JpcHRpdmVJbmNpZGVudC5jaGlsZHJlbikge1xuICAgICAgdmFyIGNoaWxkSW5jaWRlbnQgPSBpbmNpZGVudEZyb21EZXNjcmlwdGlvbihkZXNjcmlwdGl2ZUluY2lkZW50LmNoaWxkcmVuW2luY0lkXS5sZWFmLCBjb250ZXh0RGF0YSk7XG5cbiAgICAgIGlmIChjaGlsZEluY2lkZW50ID09PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpbmNpZGVudFRvUmV0dXJuLmFkZENoaWxkKGNoaWxkSW5jaWRlbnQsIGRlc2NyaXB0aXZlSW5jaWRlbnQuY2hpbGRyZW5baW5jSWRdLnBvc2l0aW9uKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXQgaXMgYW4gSW5jaWRlbnQgdGhhdCBleHRlbmRzIHRoZSBJbmNpZGVudCAobm90IGEgR3JvdXApIHRoZW5cbiAgICAvLyB3ZSBzaG91bGQgYW5heWxzZSBpdCB0byBpdHMgZWxlbWVudC9hdHRyaWJ1dGUgSW5jaWRlbnRzIHN0YXJ0aW5nIGZyb21cbiAgICAvLyB0aGUgZWxlbWVudHMsIHRoYXQncyB3aHkgd2UgY3JlYXRlIGFuIEVsZW1lbnRTcGxpdHRlci4gSXQgaXMgb3VyXG4gICAgLy8gc3RhcnRpbmcgcG9pbnQgdG8gd2hpY2ggdGhlIEluY2lkZW50IHdpbGwgYmUgYW5hbHlzZWQgdG8gaXRzXG4gICAgLy8gZWxlbWVudC9hdHRyaWJ1dGVzIGNoaWxkcmVuLlxuICAgIGluY2lkZW50VG9SZXR1cm4gPSBuZXcgRWxlbWVudFNwbGl0dGVyKGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhKTtcbiAgfVxuXG4gIHJldHVybiBpbmNpZGVudFRvUmV0dXJuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluY2lkZW50RnJvbURlc2NyaXB0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromDescription.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n/**\n * @param {object} ingredients -\n * {\n *      id\n *      attrs\n *      props\n *      Incident\n *      plugin_npm_name\n *      Channel\n *      context (optional)\n *      mcid (optional)\n *      dnaExtras\n * }\n **/\n\nmodule.exports = function (ingredients) {\n  if (!Object.prototype.hasOwnProperty.call(ingredients, \"dnaExtras\")) {\n    ingredients.dnaExtras = {};\n  }\n\n  var incident = new ingredients.Incident(ingredients.attrs, _objectSpread({}, ingredients.props, {\n    id: ingredients.id || helper.getAnId()\n  }), _objectSpread({}, ingredients.dnaExtras, {\n    context: ingredients.context,\n    mcid: ingredients.mcid\n  }));\n  incident.mc_plugin_npm_name = ingredients.plugin_npm_name;\n  incident.plugin_channel_class = ingredients.Channel;\n  incident.DescriptiveIncident = ingredients.DescriptiveIncident;\n  return incident;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9JbmNpZGVudEZyb21EZWZpbml0aW9uL2luY2lkZW50RnJvbUluZ3JlZGllbnRzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvSW5jaWRlbnRGcm9tRGVmaW5pdGlvbi9pbmNpZGVudEZyb21JbmdyZWRpZW50cy5qcz8yMWFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5ncmVkaWVudHMgLVxuICoge1xuICogICAgICBpZFxuICogICAgICBhdHRyc1xuICogICAgICBwcm9wc1xuICogICAgICBJbmNpZGVudFxuICogICAgICBwbHVnaW5fbnBtX25hbWVcbiAqICAgICAgQ2hhbm5lbFxuICogICAgICBjb250ZXh0IChvcHRpb25hbClcbiAqICAgICAgbWNpZCAob3B0aW9uYWwpXG4gKiAgICAgIGRuYUV4dHJhc1xuICogfVxuICoqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmdyZWRpZW50cykge1xuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbmdyZWRpZW50cywgXCJkbmFFeHRyYXNcIikpIHtcbiAgICBpbmdyZWRpZW50cy5kbmFFeHRyYXMgPSB7fTtcbiAgfVxuXG4gIHZhciBpbmNpZGVudCA9IG5ldyBpbmdyZWRpZW50cy5JbmNpZGVudChpbmdyZWRpZW50cy5hdHRycywgX29iamVjdFNwcmVhZCh7fSwgaW5ncmVkaWVudHMucHJvcHMsIHtcbiAgICBpZDogaW5ncmVkaWVudHMuaWQgfHwgaGVscGVyLmdldEFuSWQoKVxuICB9KSwgX29iamVjdFNwcmVhZCh7fSwgaW5ncmVkaWVudHMuZG5hRXh0cmFzLCB7XG4gICAgY29udGV4dDogaW5ncmVkaWVudHMuY29udGV4dCxcbiAgICBtY2lkOiBpbmdyZWRpZW50cy5tY2lkXG4gIH0pKTtcbiAgaW5jaWRlbnQubWNfcGx1Z2luX25wbV9uYW1lID0gaW5ncmVkaWVudHMucGx1Z2luX25wbV9uYW1lO1xuICBpbmNpZGVudC5wbHVnaW5fY2hhbm5lbF9jbGFzcyA9IGluZ3JlZGllbnRzLkNoYW5uZWw7XG4gIGluY2lkZW50LkRlc2NyaXB0aXZlSW5jaWRlbnQgPSBpbmdyZWRpZW50cy5EZXNjcmlwdGl2ZUluY2lkZW50O1xuICByZXR1cm4gaW5jaWRlbnQ7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar ContextAwareIncident = __webpack_require__(/*! ./ContextAwareIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\");\n\nvar AttributesAwareIncident =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(AttributesAwareIncident, _Group);\n\n  function AttributesAwareIncident(descriptiveIncident, contextData, mcid, selector) {\n    var _this;\n\n    _classCallCheck(this, AttributesAwareIncident);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AttributesAwareIncident).call(this, {}, {\n      id: \"\".concat(descriptiveIncident.id, \"_\").concat(mcid)\n    }));\n    _this.mcid = mcid;\n    _this.selector = selector;\n\n    _this.setUp(descriptiveIncident, contextData);\n\n    return _this;\n  }\n\n  _createClass(AttributesAwareIncident, [{\n    key: \"setUp\",\n    value: function setUp(descriptiveIncident, contextData) {\n      for (var attr in descriptiveIncident.attrs.animatedAttrs) {\n        var singleAnimatedAttrs = {};\n        singleAnimatedAttrs[attr] = descriptiveIncident.attrs.animatedAttrs[attr];\n\n        var attrsToPass = _objectSpread({}, descriptiveIncident.attrs, {\n          animatedAttrs: singleAnimatedAttrs\n        });\n\n        var propsToPass = _objectSpread({}, descriptiveIncident.props, {\n          selector: this.selector\n        });\n\n        var constructionIngredients = {\n          incidentId: descriptiveIncident.id,\n          attrs: attrsToPass,\n          props: propsToPass,\n          Incident: descriptiveIncident.constructor.Incident,\n          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n          Channel: descriptiveIncident.constructor.Channel,\n          DescriptiveIncident: descriptiveIncident\n        };\n        var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, this.mcid, attr);\n        this.addChild(contextAwareIncident, 0);\n      }\n    }\n  }]);\n\n  return AttributesAwareIncident;\n}(Group);\n\nmodule.exports = AttributesAwareIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9TcGxpdHRlcnMvQW5pbWF0ZWRBdHRyaWJ1dGVTcGxpdHRlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1NwbGl0dGVycy9BbmltYXRlZEF0dHJpYnV0ZVNwbGl0dGVyLmpzPzVmNDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBHcm91cCA9IHJlcXVpcmUoJy4uL0Jhc2VDbGFzc2VzL0dyb3VwJyk7XG5cbnZhciBDb250ZXh0QXdhcmVJbmNpZGVudCA9IHJlcXVpcmUoJy4vQ29udGV4dEF3YXJlSW5jaWRlbnQnKTtcblxudmFyIEF0dHJpYnV0ZXNBd2FyZUluY2lkZW50ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfR3JvdXApIHtcbiAgX2luaGVyaXRzKEF0dHJpYnV0ZXNBd2FyZUluY2lkZW50LCBfR3JvdXApO1xuXG4gIGZ1bmN0aW9uIEF0dHJpYnV0ZXNBd2FyZUluY2lkZW50KGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhLCBtY2lkLCBzZWxlY3Rvcikge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBdHRyaWJ1dGVzQXdhcmVJbmNpZGVudCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBdHRyaWJ1dGVzQXdhcmVJbmNpZGVudCkuY2FsbCh0aGlzLCB7fSwge1xuICAgICAgaWQ6IFwiXCIuY29uY2F0KGRlc2NyaXB0aXZlSW5jaWRlbnQuaWQsIFwiX1wiKS5jb25jYXQobWNpZClcbiAgICB9KSk7XG4gICAgX3RoaXMubWNpZCA9IG1jaWQ7XG4gICAgX3RoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuICAgIF90aGlzLnNldFVwKGRlc2NyaXB0aXZlSW5jaWRlbnQsIGNvbnRleHREYXRhKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBdHRyaWJ1dGVzQXdhcmVJbmNpZGVudCwgW3tcbiAgICBrZXk6IFwic2V0VXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VXAoZGVzY3JpcHRpdmVJbmNpZGVudCwgY29udGV4dERhdGEpIHtcbiAgICAgIGZvciAodmFyIGF0dHIgaW4gZGVzY3JpcHRpdmVJbmNpZGVudC5hdHRycy5hbmltYXRlZEF0dHJzKSB7XG4gICAgICAgIHZhciBzaW5nbGVBbmltYXRlZEF0dHJzID0ge307XG4gICAgICAgIHNpbmdsZUFuaW1hdGVkQXR0cnNbYXR0cl0gPSBkZXNjcmlwdGl2ZUluY2lkZW50LmF0dHJzLmFuaW1hdGVkQXR0cnNbYXR0cl07XG5cbiAgICAgICAgdmFyIGF0dHJzVG9QYXNzID0gX29iamVjdFNwcmVhZCh7fSwgZGVzY3JpcHRpdmVJbmNpZGVudC5hdHRycywge1xuICAgICAgICAgIGFuaW1hdGVkQXR0cnM6IHNpbmdsZUFuaW1hdGVkQXR0cnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHByb3BzVG9QYXNzID0gX29iamVjdFNwcmVhZCh7fSwgZGVzY3JpcHRpdmVJbmNpZGVudC5wcm9wcywge1xuICAgICAgICAgIHNlbGVjdG9yOiB0aGlzLnNlbGVjdG9yXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjb25zdHJ1Y3Rpb25JbmdyZWRpZW50cyA9IHtcbiAgICAgICAgICBpbmNpZGVudElkOiBkZXNjcmlwdGl2ZUluY2lkZW50LmlkLFxuICAgICAgICAgIGF0dHJzOiBhdHRyc1RvUGFzcyxcbiAgICAgICAgICBwcm9wczogcHJvcHNUb1Bhc3MsXG4gICAgICAgICAgSW5jaWRlbnQ6IGRlc2NyaXB0aXZlSW5jaWRlbnQuY29uc3RydWN0b3IuSW5jaWRlbnQsXG4gICAgICAgICAgcGx1Z2luX25wbV9uYW1lOiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLnBsdWdpbl9ucG1fbmFtZSxcbiAgICAgICAgICBDaGFubmVsOiBkZXNjcmlwdGl2ZUluY2lkZW50LmNvbnN0cnVjdG9yLkNoYW5uZWwsXG4gICAgICAgICAgRGVzY3JpcHRpdmVJbmNpZGVudDogZGVzY3JpcHRpdmVJbmNpZGVudFxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29udGV4dEF3YXJlSW5jaWRlbnQgPSBuZXcgQ29udGV4dEF3YXJlSW5jaWRlbnQoY29uc3RydWN0aW9uSW5ncmVkaWVudHMsIGNvbnRleHREYXRhLCB0aGlzLm1jaWQsIGF0dHIpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRleHRBd2FyZUluY2lkZW50LCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXR0cmlidXRlc0F3YXJlSW5jaWRlbnQ7XG59KEdyb3VwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdHRyaWJ1dGVzQXdhcmVJbmNpZGVudDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar ClipCopy = __webpack_require__(/*! ../Clip/ClipCopy */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/ClipCopy.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar _TREECONST = __webpack_require__(/*! ../Tree/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar ContextAwareClipIncident = _decorate(null, function (_initialize, _Leaf) {\n  var ContextAwareClipIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(ContextAwareClipIncident, _Leaf2);\n\n    function ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident) {\n      var _this;\n\n      _classCallCheck(this, ContextAwareClipIncident);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextAwareClipIncident).call(this, {\n        id: \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid)\n      })); // a property to hold all of the contexts\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.contexts = {};\n      _this.constructionIngredients = constructionIngredients;\n      _this.mcid = mcid;\n      _this._duration = descriptiveIncident.realClip.duration;\n      _this.DescriptiveIncident = descriptiveIncident;\n      _this.mc_plugin_npm_name = constructionIngredients.plugin_npm_name;\n      _this.plugin_channel_class = constructionIngredients.Channel;\n\n      _this.addContext(contextData);\n\n      descriptiveIncident.realClip.subscribeToDurationChange(function (newDuration) {\n        _this._duration = newDuration;\n\n        _this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _TREECONST._DIRECTIONS._UP\n        });\n      });\n      return _this;\n    }\n\n    return ContextAwareClipIncident;\n  }(_Leaf);\n\n  return {\n    F: ContextAwareClipIncident,\n    d: [{\n      kind: \"get\",\n      key: \"originalContext\",\n      value: function originalContext() {\n        return this.contexts[this.originalContextKey];\n      }\n    }, {\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this._duration;\n      }\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds, contextId) {\n        var forceReset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        this.contexts[contextId].onProgress(fraction, milliseconds, forceReset);\n      }\n    }, {\n      kind: \"method\",\n      key: \"addContext\",\n      value: function addContext(contextData) {\n        var forceGetContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        // if it's the first context to be added then it's the original\n        if (Object.keys(this.contexts).length === 0) {\n          this.originalContextKey = contextData.clipId;\n        } // instantiates the Clip so it renders\n\n\n        var ingredientsToPass = _objectSpread({}, this.constructionIngredients, {\n          context: contextData.context,\n          mcid: this.mcid,\n          Incident: ClipCopy,\n          DescriptiveIncident: this.DescriptiveIncident\n        }); // and puts it on the corresponding context key\n\n\n        this.contexts[contextData.clipId] = incidentFromIngredients(ingredientsToPass);\n\n        if (forceGetContext === true) {\n          this.contexts[contextData.clipId]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddContext\",\n      value: function handleAddContext(target, payload) {\n        this.addContext(payload, true);\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {} // massive editing methods that apply the request massively to all of the\n      // Incidents of all of the contexts\n\n    }, {\n      kind: \"method\",\n      key: \"gotContext\",\n      value: function gotContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].gotContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        for (var context in this.contexts) {\n          this.contexts[context]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var context in this.contexts) {\n          this.contexts[context].lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].onGetContext();\n        }\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = ContextAwareClipIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Leaf = __webpack_require__(/*! ../Tree/Leaf */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar incidentFromIngredients = __webpack_require__(/*! ../IncidentFromDefinition/incidentFromIngredients */ \"../node_modules/@kissmybutton/motorcortex/dist/IncidentFromDefinition/incidentFromIngredients.js\");\n\nvar getIncidentsByChannel = __webpack_require__(/*! ../_decorators/getIncidentsByChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\");\n\nvar _CONST = __webpack_require__(/*! ../_configuration/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js\");\n\nvar Value =\n/*#__PURE__*/\nfunction () {\n  function Value() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Value);\n\n    this[\"final\"] = props[\"final\"] || false;\n    this.value = props.value || '';\n\n    this.sub = props.sub || function () {};\n  }\n\n  _createClass(Value, [{\n    key: \"finalise\",\n    value: function finalise(value) {\n      this[\"final\"] = true;\n      this.value = value;\n      this.sub(value);\n    }\n  }]);\n\n  return Value;\n}();\n\nvar ContextAwareIncident = _decorate(null, function (_initialize, _Leaf) {\n  var ContextAwareIncident =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(ContextAwareIncident, _Leaf2);\n\n    function ContextAwareIncident(constructionIngredients, contextData, mcid, attribute) {\n      var _this;\n\n      _classCallCheck(this, ContextAwareIncident);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextAwareIncident).call(this, {\n        id: attribute !== null ? \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid, \"_\").concat(attribute) : \"\".concat(constructionIngredients.incidentId, \"_\").concat(mcid)\n      })); // a property to hold all of the contexts\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.contexts = {};\n      _this.constructionIngredients = constructionIngredients;\n      _this.mcid = mcid;\n      _this.attribute = attribute;\n      _this._duration = constructionIngredients.props.duration;\n      _this.mc_plugin_npm_name = constructionIngredients.plugin_npm_name;\n      _this.plugin_channel_class = constructionIngredients.Channel;\n      _this.DescriptiveIncident = constructionIngredients.DescriptiveIncident;\n\n      _this.addContext(contextData);\n\n      if (attribute !== null) {\n        if (_typeof(_this.constructionIngredients.attrs.animatedAttrs[_this.attribute]) === 'object') {\n          _this.originalAnimatedAttributeValue = Object.assign({}, _this.constructionIngredients.attrs.animatedAttrs[_this.attribute]);\n        } else {\n          _this.originalAnimatedAttributeValue = _this.constructionIngredients.attrs.animatedAttrs[_this.attribute];\n        }\n      }\n\n      if (Object.prototype.hasOwnProperty.call(_this.constructionIngredients.attrs, 'animatedAttrs')) {\n        _this.finalValue = new Value({\n          \"final\": true,\n          value: _this.constructionIngredients.attrs.animatedAttrs[_this.attribute]\n        });\n      }\n\n      return _this;\n    }\n\n    return ContextAwareIncident;\n  }(_Leaf);\n\n  return {\n    F: ContextAwareIncident,\n    d: [{\n      kind: \"get\",\n      key: \"originalContext\",\n      value: function originalContext() {\n        return this.contexts[this.originalContextKey];\n      }\n    }, {\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this._duration;\n      }\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(milliseconds) {\n        this._duration = milliseconds;\n\n        for (var context in this.contexts) {\n          this.contexts[context].duration = milliseconds;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"addContext\",\n      value: function addContext(contextData) {\n        var forceGetContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        // if it's the first context to be added then it's the original\n        var isTheOriginalContext = false;\n\n        if (Object.keys(this.contexts).length === 0) {\n          this.originalContextKey = contextData.clipId;\n          this.originalClipContext = contextData.context;\n          isTheOriginalContext = true;\n        }\n\n        var ingredientsToPass = _objectSpread({}, this.constructionIngredients, {\n          context: contextData.context,\n          mcid: this.mcid\n        });\n\n        var whatToAdd = incidentFromIngredients(ingredientsToPass);\n        this.contexts[contextData.clipId] = whatToAdd; // when we add a new context we must set the inital value of the newly added Incidents\n\n        if (!isTheOriginalContext) {\n          if (this.initialValue[\"final\"] === false) {\n            var scratchValue = this.contexts[contextData.clipId].getScratchValue();\n            this.initialValue.sub(scratchValue);\n            this.setInitialValue(new Value({\n              \"final\": true,\n              value: scratchValue\n            }));\n          } else {\n            this.contexts[contextData.clipId].setInitialValue(this.initialValue.value);\n          }\n        }\n\n        if (forceGetContext === true) {\n          this.contexts[contextData.clipId]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleAddContext\",\n      value: function handleAddContext(target, payload) {\n        this.addContext(payload, true);\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [getIncidentsByChannel],\n      key: \"getIncidentsByChannel\",\n      value: function getIncidentsByChannel() {}\n    }, {\n      kind: \"method\",\n      key: \"onProgress\",\n      value: function onProgress(fraction, milliseconds, contextId) {\n        if (contextId === undefined) {\n          for (var context in this.contexts) {\n            this.contexts[context].onProgress(fraction, milliseconds);\n          }\n\n          return;\n        }\n\n        try {\n          this.contexts[contextId].onProgress(fraction, milliseconds);\n        } catch (e) {\n          console.log('--------- ERROR -----------');\n          console.log(e);\n        }\n      }\n      /** METHODS THAT ACT AS \"PROXY\" TO ALL OF THE INCIDENTS BELONGING TO\n       * THE INCIDENTS COLLECTION OF THE CONTEXT AWARE INCIDENT\n       **/\n\n    }, {\n      kind: \"get\",\n      key: \"animatedAttributeValue\",\n      value: function animatedAttributeValue() {\n        return this.finalValue;\n      }\n    }, {\n      kind: \"method\",\n      key: \"calcInitialValue\",\n      value: function calcInitialValue(sub) {\n        if (this.originalClipContext.isHostedClip === false) {\n          return new Value({\n            \"final\": false,\n            value: this.originalContext.getScratchValue(),\n            sub: sub\n          });\n        } else {\n          var sv = this.originalContext.getScratchValue();\n          var newValue = new Value({\n            \"final\": true,\n            value: sv\n          });\n          sub(newValue);\n          return newValue;\n        }\n      } // massive editing methods that apply the request massively to all of the\n      // Incidents of all of the contexts\n\n    }, {\n      kind: \"method\",\n      key: \"gotContext\",\n      value: function gotContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].gotContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onGetContextOnce\",\n      value: function _onGetContextOnce() {\n        for (var context in this.contexts) {\n          this.contexts[context]._onGetContextOnce();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"lastWish\",\n      value: function lastWish() {\n        for (var context in this.contexts) {\n          this.contexts[context].lastWish();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"onGetContext\",\n      value: function onGetContext() {\n        for (var context in this.contexts) {\n          this.contexts[context].onGetContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"setInitialValue\",\n      value: function setInitialValue(value) {\n        if (!value.hasOwnProperty('value')) {\n          console.trace();\n        }\n\n        this.initialValue = value;\n\n        for (var context in this.contexts) {\n          this.contexts[context].setInitialValue(value.value);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"setCompoAttrKeyValue\",\n      value: function setCompoAttrKeyValue(key, value) {\n        for (var context in this.contexts) {\n          this.contexts[context].attrs.animatedAttrs[this.attribute][key] = value;\n          this.contexts[context].lastWish();\n          this.contexts[context].onGetContext();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"play\",\n      value: function play(fraction, ms, contextId) {\n        return this.contexts[contextId].play(ms);\n      }\n    }, {\n      kind: \"method\",\n      key: \"stop\",\n      value: function stop(contextId) {\n        this.contexts[contextId].stop();\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = ContextAwareIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9TcGxpdHRlcnMvQ29udGV4dEF3YXJlSW5jaWRlbnQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9TcGxpdHRlcnMvQ29udGV4dEF3YXJlSW5jaWRlbnQuanM/MTEzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWNvcmF0ZShkZWNvcmF0b3JzLCBmYWN0b3J5LCBzdXBlckNsYXNzLCBtaXhpbnMpIHsgdmFyIGFwaSA9IF9nZXREZWNvcmF0b3JzQXBpKCk7IGlmIChtaXhpbnMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBtaXhpbnMubGVuZ3RoOyBpKyspIHsgYXBpID0gbWl4aW5zW2ldKGFwaSk7IH0gfSB2YXIgciA9IGZhY3RvcnkoZnVuY3Rpb24gaW5pdGlhbGl6ZShPKSB7IGFwaS5pbml0aWFsaXplSW5zdGFuY2VFbGVtZW50cyhPLCBkZWNvcmF0ZWQuZWxlbWVudHMpOyB9LCBzdXBlckNsYXNzKTsgdmFyIGRlY29yYXRlZCA9IGFwaS5kZWNvcmF0ZUNsYXNzKF9jb2FsZXNjZUNsYXNzRWxlbWVudHMoci5kLm1hcChfY3JlYXRlRWxlbWVudERlc2NyaXB0b3IpKSwgZGVjb3JhdG9ycyk7IGFwaS5pbml0aWFsaXplQ2xhc3NFbGVtZW50cyhyLkYsIGRlY29yYXRlZC5lbGVtZW50cyk7IHJldHVybiBhcGkucnVuQ2xhc3NGaW5pc2hlcnMoci5GLCBkZWNvcmF0ZWQuZmluaXNoZXJzKTsgfVxuXG5mdW5jdGlvbiBfZ2V0RGVjb3JhdG9yc0FwaSgpIHsgX2dldERlY29yYXRvcnNBcGkgPSBmdW5jdGlvbiBfZ2V0RGVjb3JhdG9yc0FwaSgpIHsgcmV0dXJuIGFwaTsgfTsgdmFyIGFwaSA9IHsgZWxlbWVudHNEZWZpbml0aW9uT3JkZXI6IFtbXCJtZXRob2RcIl0sIFtcImZpZWxkXCJdXSwgaW5pdGlhbGl6ZUluc3RhbmNlRWxlbWVudHM6IGZ1bmN0aW9uIGluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzKE8sIGVsZW1lbnRzKSB7IFtcIm1ldGhvZFwiLCBcImZpZWxkXCJdLmZvckVhY2goZnVuY3Rpb24gKGtpbmQpIHsgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyBpZiAoZWxlbWVudC5raW5kID09PSBraW5kICYmIGVsZW1lbnQucGxhY2VtZW50ID09PSBcIm93blwiKSB7IHRoaXMuZGVmaW5lQ2xhc3NFbGVtZW50KE8sIGVsZW1lbnQpOyB9IH0sIHRoaXMpOyB9LCB0aGlzKTsgfSwgaW5pdGlhbGl6ZUNsYXNzRWxlbWVudHM6IGZ1bmN0aW9uIGluaXRpYWxpemVDbGFzc0VsZW1lbnRzKEYsIGVsZW1lbnRzKSB7IHZhciBwcm90byA9IEYucHJvdG90eXBlOyBbXCJtZXRob2RcIiwgXCJmaWVsZFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChraW5kKSB7IGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgdmFyIHBsYWNlbWVudCA9IGVsZW1lbnQucGxhY2VtZW50OyBpZiAoZWxlbWVudC5raW5kID09PSBraW5kICYmIChwbGFjZW1lbnQgPT09IFwic3RhdGljXCIgfHwgcGxhY2VtZW50ID09PSBcInByb3RvdHlwZVwiKSkgeyB2YXIgcmVjZWl2ZXIgPSBwbGFjZW1lbnQgPT09IFwic3RhdGljXCIgPyBGIDogcHJvdG87IHRoaXMuZGVmaW5lQ2xhc3NFbGVtZW50KHJlY2VpdmVyLCBlbGVtZW50KTsgfSB9LCB0aGlzKTsgfSwgdGhpcyk7IH0sIGRlZmluZUNsYXNzRWxlbWVudDogZnVuY3Rpb24gZGVmaW5lQ2xhc3NFbGVtZW50KHJlY2VpdmVyLCBlbGVtZW50KSB7IHZhciBkZXNjcmlwdG9yID0gZWxlbWVudC5kZXNjcmlwdG9yOyBpZiAoZWxlbWVudC5raW5kID09PSBcImZpZWxkXCIpIHsgdmFyIGluaXRpYWxpemVyID0gZWxlbWVudC5pbml0aWFsaXplcjsgZGVzY3JpcHRvciA9IHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSwgdmFsdWU6IGluaXRpYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsaXplci5jYWxsKHJlY2VpdmVyKSB9OyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwgZWxlbWVudC5rZXksIGRlc2NyaXB0b3IpOyB9LCBkZWNvcmF0ZUNsYXNzOiBmdW5jdGlvbiBkZWNvcmF0ZUNsYXNzKGVsZW1lbnRzLCBkZWNvcmF0b3JzKSB7IHZhciBuZXdFbGVtZW50cyA9IFtdOyB2YXIgZmluaXNoZXJzID0gW107IHZhciBwbGFjZW1lbnRzID0geyBcInN0YXRpY1wiOiBbXSwgcHJvdG90eXBlOiBbXSwgb3duOiBbXSB9OyBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHRoaXMuYWRkRWxlbWVudFBsYWNlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTsgfSwgdGhpcyk7IGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgaWYgKCFfaGFzRGVjb3JhdG9ycyhlbGVtZW50KSkgcmV0dXJuIG5ld0VsZW1lbnRzLnB1c2goZWxlbWVudCk7IHZhciBlbGVtZW50RmluaXNoZXJzRXh0cmFzID0gdGhpcy5kZWNvcmF0ZUVsZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cyk7IG5ld0VsZW1lbnRzLnB1c2goZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5lbGVtZW50KTsgbmV3RWxlbWVudHMucHVzaC5hcHBseShuZXdFbGVtZW50cywgZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5leHRyYXMpOyBmaW5pc2hlcnMucHVzaC5hcHBseShmaW5pc2hlcnMsIGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMuZmluaXNoZXJzKTsgfSwgdGhpcyk7IGlmICghZGVjb3JhdG9ycykgeyByZXR1cm4geyBlbGVtZW50czogbmV3RWxlbWVudHMsIGZpbmlzaGVyczogZmluaXNoZXJzIH07IH0gdmFyIHJlc3VsdCA9IHRoaXMuZGVjb3JhdGVDb25zdHJ1Y3RvcihuZXdFbGVtZW50cywgZGVjb3JhdG9ycyk7IGZpbmlzaGVycy5wdXNoLmFwcGx5KGZpbmlzaGVycywgcmVzdWx0LmZpbmlzaGVycyk7IHJlc3VsdC5maW5pc2hlcnMgPSBmaW5pc2hlcnM7IHJldHVybiByZXN1bHQ7IH0sIGFkZEVsZW1lbnRQbGFjZW1lbnQ6IGZ1bmN0aW9uIGFkZEVsZW1lbnRQbGFjZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cywgc2lsZW50KSB7IHZhciBrZXlzID0gcGxhY2VtZW50c1tlbGVtZW50LnBsYWNlbWVudF07IGlmICghc2lsZW50ICYmIGtleXMuaW5kZXhPZihlbGVtZW50LmtleSkgIT09IC0xKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEdXBsaWNhdGVkIGVsZW1lbnQgKFwiICsgZWxlbWVudC5rZXkgKyBcIilcIik7IH0ga2V5cy5wdXNoKGVsZW1lbnQua2V5KTsgfSwgZGVjb3JhdGVFbGVtZW50OiBmdW5jdGlvbiBkZWNvcmF0ZUVsZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cykgeyB2YXIgZXh0cmFzID0gW107IHZhciBmaW5pc2hlcnMgPSBbXTsgZm9yICh2YXIgZGVjb3JhdG9ycyA9IGVsZW1lbnQuZGVjb3JhdG9ycywgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsgdmFyIGtleXMgPSBwbGFjZW1lbnRzW2VsZW1lbnQucGxhY2VtZW50XTsga2V5cy5zcGxpY2Uoa2V5cy5pbmRleE9mKGVsZW1lbnQua2V5KSwgMSk7IHZhciBlbGVtZW50T2JqZWN0ID0gdGhpcy5mcm9tRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudCk7IHZhciBlbGVtZW50RmluaXNoZXJFeHRyYXMgPSB0aGlzLnRvRWxlbWVudEZpbmlzaGVyRXh0cmFzKCgwLCBkZWNvcmF0b3JzW2ldKShlbGVtZW50T2JqZWN0KSB8fCBlbGVtZW50T2JqZWN0KTsgZWxlbWVudCA9IGVsZW1lbnRGaW5pc2hlckV4dHJhcy5lbGVtZW50OyB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cyk7IGlmIChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpIHsgZmluaXNoZXJzLnB1c2goZWxlbWVudEZpbmlzaGVyRXh0cmFzLmZpbmlzaGVyKTsgfSB2YXIgbmV3RXh0cmFzID0gZWxlbWVudEZpbmlzaGVyRXh0cmFzLmV4dHJhczsgaWYgKG5ld0V4dHJhcykgeyBmb3IgKHZhciBqID0gMDsgaiA8IG5ld0V4dHJhcy5sZW5ndGg7IGorKykgeyB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQobmV3RXh0cmFzW2pdLCBwbGFjZW1lbnRzKTsgfSBleHRyYXMucHVzaC5hcHBseShleHRyYXMsIG5ld0V4dHJhcyk7IH0gfSByZXR1cm4geyBlbGVtZW50OiBlbGVtZW50LCBmaW5pc2hlcnM6IGZpbmlzaGVycywgZXh0cmFzOiBleHRyYXMgfTsgfSwgZGVjb3JhdGVDb25zdHJ1Y3RvcjogZnVuY3Rpb24gZGVjb3JhdGVDb25zdHJ1Y3RvcihlbGVtZW50cywgZGVjb3JhdG9ycykgeyB2YXIgZmluaXNoZXJzID0gW107IGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7IHZhciBvYmogPSB0aGlzLmZyb21DbGFzc0Rlc2NyaXB0b3IoZWxlbWVudHMpOyB2YXIgZWxlbWVudHNBbmRGaW5pc2hlciA9IHRoaXMudG9DbGFzc0Rlc2NyaXB0b3IoKDAsIGRlY29yYXRvcnNbaV0pKG9iaikgfHwgb2JqKTsgaWYgKGVsZW1lbnRzQW5kRmluaXNoZXIuZmluaXNoZXIgIT09IHVuZGVmaW5lZCkgeyBmaW5pc2hlcnMucHVzaChlbGVtZW50c0FuZEZpbmlzaGVyLmZpbmlzaGVyKTsgfSBpZiAoZWxlbWVudHNBbmRGaW5pc2hlci5lbGVtZW50cyAhPT0gdW5kZWZpbmVkKSB7IGVsZW1lbnRzID0gZWxlbWVudHNBbmRGaW5pc2hlci5lbGVtZW50czsgZm9yICh2YXIgaiA9IDA7IGogPCBlbGVtZW50cy5sZW5ndGggLSAxOyBqKyspIHsgZm9yICh2YXIgayA9IGogKyAxOyBrIDwgZWxlbWVudHMubGVuZ3RoOyBrKyspIHsgaWYgKGVsZW1lbnRzW2pdLmtleSA9PT0gZWxlbWVudHNba10ua2V5ICYmIGVsZW1lbnRzW2pdLnBsYWNlbWVudCA9PT0gZWxlbWVudHNba10ucGxhY2VtZW50KSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEdXBsaWNhdGVkIGVsZW1lbnQgKFwiICsgZWxlbWVudHNbal0ua2V5ICsgXCIpXCIpOyB9IH0gfSB9IH0gcmV0dXJuIHsgZWxlbWVudHM6IGVsZW1lbnRzLCBmaW5pc2hlcnM6IGZpbmlzaGVycyB9OyB9LCBmcm9tRWxlbWVudERlc2NyaXB0b3I6IGZ1bmN0aW9uIGZyb21FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50KSB7IHZhciBvYmogPSB7IGtpbmQ6IGVsZW1lbnQua2luZCwga2V5OiBlbGVtZW50LmtleSwgcGxhY2VtZW50OiBlbGVtZW50LnBsYWNlbWVudCwgZGVzY3JpcHRvcjogZWxlbWVudC5kZXNjcmlwdG9yIH07IHZhciBkZXNjID0geyB2YWx1ZTogXCJEZXNjcmlwdG9yXCIsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBTeW1ib2wudG9TdHJpbmdUYWcsIGRlc2MpOyBpZiAoZWxlbWVudC5raW5kID09PSBcImZpZWxkXCIpIG9iai5pbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7IHJldHVybiBvYmo7IH0sIHRvRWxlbWVudERlc2NyaXB0b3JzOiBmdW5jdGlvbiB0b0VsZW1lbnREZXNjcmlwdG9ycyhlbGVtZW50T2JqZWN0cykgeyBpZiAoZWxlbWVudE9iamVjdHMgPT09IHVuZGVmaW5lZCkgcmV0dXJuOyByZXR1cm4gX3RvQXJyYXkoZWxlbWVudE9iamVjdHMpLm1hcChmdW5jdGlvbiAoZWxlbWVudE9iamVjdCkgeyB2YXIgZWxlbWVudCA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KTsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZmluaXNoZXJcIiwgXCJBbiBlbGVtZW50IGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImV4dHJhc1wiLCBcIkFuIGVsZW1lbnQgZGVzY3JpcHRvclwiKTsgcmV0dXJuIGVsZW1lbnQ7IH0sIHRoaXMpOyB9LCB0b0VsZW1lbnREZXNjcmlwdG9yOiBmdW5jdGlvbiB0b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpIHsgdmFyIGtpbmQgPSBTdHJpbmcoZWxlbWVudE9iamVjdC5raW5kKTsgaWYgKGtpbmQgIT09IFwibWV0aG9kXCIgJiYga2luZCAhPT0gXCJmaWVsZFwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0FuIGVsZW1lbnQgZGVzY3JpcHRvclxcJ3MgLmtpbmQgcHJvcGVydHkgbXVzdCBiZSBlaXRoZXIgXCJtZXRob2RcIiBvcicgKyAnIFwiZmllbGRcIiwgYnV0IGEgZGVjb3JhdG9yIGNyZWF0ZWQgYW4gZWxlbWVudCBkZXNjcmlwdG9yIHdpdGgnICsgJyAua2luZCBcIicgKyBraW5kICsgJ1wiJyk7IH0gdmFyIGtleSA9IF90b1Byb3BlcnR5S2V5KGVsZW1lbnRPYmplY3Qua2V5KTsgdmFyIHBsYWNlbWVudCA9IFN0cmluZyhlbGVtZW50T2JqZWN0LnBsYWNlbWVudCk7IGlmIChwbGFjZW1lbnQgIT09IFwic3RhdGljXCIgJiYgcGxhY2VtZW50ICE9PSBcInByb3RvdHlwZVwiICYmIHBsYWNlbWVudCAhPT0gXCJvd25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbiBlbGVtZW50IGRlc2NyaXB0b3JcXCdzIC5wbGFjZW1lbnQgcHJvcGVydHkgbXVzdCBiZSBvbmUgb2YgXCJzdGF0aWNcIiwnICsgJyBcInByb3RvdHlwZVwiIG9yIFwib3duXCIsIGJ1dCBhIGRlY29yYXRvciBjcmVhdGVkIGFuIGVsZW1lbnQgZGVzY3JpcHRvcicgKyAnIHdpdGggLnBsYWNlbWVudCBcIicgKyBwbGFjZW1lbnQgKyAnXCInKTsgfSB2YXIgZGVzY3JpcHRvciA9IGVsZW1lbnRPYmplY3QuZGVzY3JpcHRvcjsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZWxlbWVudHNcIiwgXCJBbiBlbGVtZW50IGRlc2NyaXB0b3JcIik7IHZhciBlbGVtZW50ID0geyBraW5kOiBraW5kLCBrZXk6IGtleSwgcGxhY2VtZW50OiBwbGFjZW1lbnQsIGRlc2NyaXB0b3I6IE9iamVjdC5hc3NpZ24oe30sIGRlc2NyaXB0b3IpIH07IGlmIChraW5kICE9PSBcImZpZWxkXCIpIHsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiaW5pdGlhbGl6ZXJcIiwgXCJBIG1ldGhvZCBkZXNjcmlwdG9yXCIpOyB9IGVsc2UgeyB0aGlzLmRpc2FsbG93UHJvcGVydHkoZGVzY3JpcHRvciwgXCJnZXRcIiwgXCJUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShkZXNjcmlwdG9yLCBcInNldFwiLCBcIlRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIG9mIGEgZmllbGQgZGVzY3JpcHRvclwiKTsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KGRlc2NyaXB0b3IsIFwidmFsdWVcIiwgXCJUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3JcIik7IGVsZW1lbnQuaW5pdGlhbGl6ZXIgPSBlbGVtZW50T2JqZWN0LmluaXRpYWxpemVyOyB9IHJldHVybiBlbGVtZW50OyB9LCB0b0VsZW1lbnRGaW5pc2hlckV4dHJhczogZnVuY3Rpb24gdG9FbGVtZW50RmluaXNoZXJFeHRyYXMoZWxlbWVudE9iamVjdCkgeyB2YXIgZWxlbWVudCA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KTsgdmFyIGZpbmlzaGVyID0gX29wdGlvbmFsQ2FsbGFibGVQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImZpbmlzaGVyXCIpOyB2YXIgZXh0cmFzID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9ycyhlbGVtZW50T2JqZWN0LmV4dHJhcyk7IHJldHVybiB7IGVsZW1lbnQ6IGVsZW1lbnQsIGZpbmlzaGVyOiBmaW5pc2hlciwgZXh0cmFzOiBleHRyYXMgfTsgfSwgZnJvbUNsYXNzRGVzY3JpcHRvcjogZnVuY3Rpb24gZnJvbUNsYXNzRGVzY3JpcHRvcihlbGVtZW50cykgeyB2YXIgb2JqID0geyBraW5kOiBcImNsYXNzXCIsIGVsZW1lbnRzOiBlbGVtZW50cy5tYXAodGhpcy5mcm9tRWxlbWVudERlc2NyaXB0b3IsIHRoaXMpIH07IHZhciBkZXNjID0geyB2YWx1ZTogXCJEZXNjcmlwdG9yXCIsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBTeW1ib2wudG9TdHJpbmdUYWcsIGRlc2MpOyByZXR1cm4gb2JqOyB9LCB0b0NsYXNzRGVzY3JpcHRvcjogZnVuY3Rpb24gdG9DbGFzc0Rlc2NyaXB0b3Iob2JqKSB7IHZhciBraW5kID0gU3RyaW5nKG9iai5raW5kKTsgaWYgKGtpbmQgIT09IFwiY2xhc3NcIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIGNsYXNzIGRlc2NyaXB0b3JcXCdzIC5raW5kIHByb3BlcnR5IG11c3QgYmUgXCJjbGFzc1wiLCBidXQgYSBkZWNvcmF0b3InICsgJyBjcmVhdGVkIGEgY2xhc3MgZGVzY3JpcHRvciB3aXRoIC5raW5kIFwiJyArIGtpbmQgKyAnXCInKTsgfSB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCBcImtleVwiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJwbGFjZW1lbnRcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7IHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiZGVzY3JpcHRvclwiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJpbml0aWFsaXplclwiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTsgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJleHRyYXNcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7IHZhciBmaW5pc2hlciA9IF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkob2JqLCBcImZpbmlzaGVyXCIpOyB2YXIgZWxlbWVudHMgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3JzKG9iai5lbGVtZW50cyk7IHJldHVybiB7IGVsZW1lbnRzOiBlbGVtZW50cywgZmluaXNoZXI6IGZpbmlzaGVyIH07IH0sIHJ1bkNsYXNzRmluaXNoZXJzOiBmdW5jdGlvbiBydW5DbGFzc0ZpbmlzaGVycyhjb25zdHJ1Y3RvciwgZmluaXNoZXJzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgZmluaXNoZXJzLmxlbmd0aDsgaSsrKSB7IHZhciBuZXdDb25zdHJ1Y3RvciA9ICgwLCBmaW5pc2hlcnNbaV0pKGNvbnN0cnVjdG9yKTsgaWYgKG5ld0NvbnN0cnVjdG9yICE9PSB1bmRlZmluZWQpIHsgaWYgKHR5cGVvZiBuZXdDb25zdHJ1Y3RvciAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJGaW5pc2hlcnMgbXVzdCByZXR1cm4gYSBjb25zdHJ1Y3Rvci5cIik7IH0gY29uc3RydWN0b3IgPSBuZXdDb25zdHJ1Y3RvcjsgfSB9IHJldHVybiBjb25zdHJ1Y3RvcjsgfSwgZGlzYWxsb3dQcm9wZXJ0eTogZnVuY3Rpb24gZGlzYWxsb3dQcm9wZXJ0eShvYmosIG5hbWUsIG9iamVjdFR5cGUpIHsgaWYgKG9ialtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7IHRocm93IG5ldyBUeXBlRXJyb3Iob2JqZWN0VHlwZSArIFwiIGNhbid0IGhhdmUgYSAuXCIgKyBuYW1lICsgXCIgcHJvcGVydHkuXCIpOyB9IH0gfTsgcmV0dXJuIGFwaTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudERlc2NyaXB0b3IoZGVmKSB7IHZhciBrZXkgPSBfdG9Qcm9wZXJ0eUtleShkZWYua2V5KTsgdmFyIGRlc2NyaXB0b3I7IGlmIChkZWYua2luZCA9PT0gXCJtZXRob2RcIikgeyBkZXNjcmlwdG9yID0geyB2YWx1ZTogZGVmLnZhbHVlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSB9OyB9IGVsc2UgaWYgKGRlZi5raW5kID09PSBcImdldFwiKSB7IGRlc2NyaXB0b3IgPSB7IGdldDogZGVmLnZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlIH07IH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IFwic2V0XCIpIHsgZGVzY3JpcHRvciA9IHsgc2V0OiBkZWYudmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UgfTsgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gXCJmaWVsZFwiKSB7IGRlc2NyaXB0b3IgPSB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUgfTsgfSB2YXIgZWxlbWVudCA9IHsga2luZDogZGVmLmtpbmQgPT09IFwiZmllbGRcIiA/IFwiZmllbGRcIiA6IFwibWV0aG9kXCIsIGtleToga2V5LCBwbGFjZW1lbnQ6IGRlZltcInN0YXRpY1wiXSA/IFwic3RhdGljXCIgOiBkZWYua2luZCA9PT0gXCJmaWVsZFwiID8gXCJvd25cIiA6IFwicHJvdG90eXBlXCIsIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IgfTsgaWYgKGRlZi5kZWNvcmF0b3JzKSBlbGVtZW50LmRlY29yYXRvcnMgPSBkZWYuZGVjb3JhdG9yczsgaWYgKGRlZi5raW5kID09PSBcImZpZWxkXCIpIGVsZW1lbnQuaW5pdGlhbGl6ZXIgPSBkZWYudmFsdWU7IHJldHVybiBlbGVtZW50OyB9XG5cbmZ1bmN0aW9uIF9jb2FsZXNjZUdldHRlclNldHRlcihlbGVtZW50LCBvdGhlcikgeyBpZiAoZWxlbWVudC5kZXNjcmlwdG9yLmdldCAhPT0gdW5kZWZpbmVkKSB7IG90aGVyLmRlc2NyaXB0b3IuZ2V0ID0gZWxlbWVudC5kZXNjcmlwdG9yLmdldDsgfSBlbHNlIHsgb3RoZXIuZGVzY3JpcHRvci5zZXQgPSBlbGVtZW50LmRlc2NyaXB0b3Iuc2V0OyB9IH1cblxuZnVuY3Rpb24gX2NvYWxlc2NlQ2xhc3NFbGVtZW50cyhlbGVtZW50cykgeyB2YXIgbmV3RWxlbWVudHMgPSBbXTsgdmFyIGlzU2FtZUVsZW1lbnQgPSBmdW5jdGlvbiBpc1NhbWVFbGVtZW50KG90aGVyKSB7IHJldHVybiBvdGhlci5raW5kID09PSBcIm1ldGhvZFwiICYmIG90aGVyLmtleSA9PT0gZWxlbWVudC5rZXkgJiYgb3RoZXIucGxhY2VtZW50ID09PSBlbGVtZW50LnBsYWNlbWVudDsgfTsgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgZWxlbWVudCA9IGVsZW1lbnRzW2ldOyB2YXIgb3RoZXI7IGlmIChlbGVtZW50LmtpbmQgPT09IFwibWV0aG9kXCIgJiYgKG90aGVyID0gbmV3RWxlbWVudHMuZmluZChpc1NhbWVFbGVtZW50KSkpIHsgaWYgKF9pc0RhdGFEZXNjcmlwdG9yKGVsZW1lbnQuZGVzY3JpcHRvcikgfHwgX2lzRGF0YURlc2NyaXB0b3Iob3RoZXIuZGVzY3JpcHRvcikpIHsgaWYgKF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpIHx8IF9oYXNEZWNvcmF0b3JzKG90aGVyKSkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJEdXBsaWNhdGVkIG1ldGhvZHMgKFwiICsgZWxlbWVudC5rZXkgKyBcIikgY2FuJ3QgYmUgZGVjb3JhdGVkLlwiKTsgfSBvdGhlci5kZXNjcmlwdG9yID0gZWxlbWVudC5kZXNjcmlwdG9yOyB9IGVsc2UgeyBpZiAoX2hhc0RlY29yYXRvcnMoZWxlbWVudCkpIHsgaWYgKF9oYXNEZWNvcmF0b3JzKG90aGVyKSkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJEZWNvcmF0b3JzIGNhbid0IGJlIHBsYWNlZCBvbiBkaWZmZXJlbnQgYWNjZXNzb3JzIHdpdGggZm9yIFwiICsgXCJ0aGUgc2FtZSBwcm9wZXJ0eSAoXCIgKyBlbGVtZW50LmtleSArIFwiKS5cIik7IH0gb3RoZXIuZGVjb3JhdG9ycyA9IGVsZW1lbnQuZGVjb3JhdG9yczsgfSBfY29hbGVzY2VHZXR0ZXJTZXR0ZXIoZWxlbWVudCwgb3RoZXIpOyB9IH0gZWxzZSB7IG5ld0VsZW1lbnRzLnB1c2goZWxlbWVudCk7IH0gfSByZXR1cm4gbmV3RWxlbWVudHM7IH1cblxuZnVuY3Rpb24gX2hhc0RlY29yYXRvcnMoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5kZWNvcmF0b3JzICYmIGVsZW1lbnQuZGVjb3JhdG9ycy5sZW5ndGg7IH1cblxuZnVuY3Rpb24gX2lzRGF0YURlc2NyaXB0b3IoZGVzYykgeyByZXR1cm4gZGVzYyAhPT0gdW5kZWZpbmVkICYmICEoZGVzYy52YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGRlc2Mud3JpdGFibGUgPT09IHVuZGVmaW5lZCk7IH1cblxuZnVuY3Rpb24gX29wdGlvbmFsQ2FsbGFibGVQcm9wZXJ0eShvYmosIG5hbWUpIHsgdmFyIHZhbHVlID0gb2JqW25hbWVdOyBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgJ1wiICsgbmFtZSArIFwiJyB0byBiZSBhIGZ1bmN0aW9uXCIpOyB9IHJldHVybiB2YWx1ZTsgfVxuXG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cblxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuXG5mdW5jdGlvbiBfdG9BcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIExlYWYgPSByZXF1aXJlKCcuLi9UcmVlL0xlYWYnKTtcblxudmFyIGluY2lkZW50RnJvbUluZ3JlZGllbnRzID0gcmVxdWlyZSgnLi4vSW5jaWRlbnRGcm9tRGVmaW5pdGlvbi9pbmNpZGVudEZyb21JbmdyZWRpZW50cycpO1xuXG52YXIgZ2V0SW5jaWRlbnRzQnlDaGFubmVsID0gcmVxdWlyZSgnLi4vX2RlY29yYXRvcnMvZ2V0SW5jaWRlbnRzQnlDaGFubmVsJyk7XG5cbnZhciBfQ09OU1QgPSByZXF1aXJlKCcuLi9fY29uZmlndXJhdGlvbi9fQ09OU1QnKTtcblxudmFyIFZhbHVlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmFsdWUoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWYWx1ZSk7XG5cbiAgICB0aGlzW1wiZmluYWxcIl0gPSBwcm9wc1tcImZpbmFsXCJdIHx8IGZhbHNlO1xuICAgIHRoaXMudmFsdWUgPSBwcm9wcy52YWx1ZSB8fCAnJztcblxuICAgIHRoaXMuc3ViID0gcHJvcHMuc3ViIHx8IGZ1bmN0aW9uICgpIHt9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZhbHVlLCBbe1xuICAgIGtleTogXCJmaW5hbGlzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5hbGlzZSh2YWx1ZSkge1xuICAgICAgdGhpc1tcImZpbmFsXCJdID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3ViKHZhbHVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmFsdWU7XG59KCk7XG5cbnZhciBDb250ZXh0QXdhcmVJbmNpZGVudCA9IF9kZWNvcmF0ZShudWxsLCBmdW5jdGlvbiAoX2luaXRpYWxpemUsIF9MZWFmKSB7XG4gIHZhciBDb250ZXh0QXdhcmVJbmNpZGVudCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9MZWFmMikge1xuICAgIF9pbmhlcml0cyhDb250ZXh0QXdhcmVJbmNpZGVudCwgX0xlYWYyKTtcblxuICAgIGZ1bmN0aW9uIENvbnRleHRBd2FyZUluY2lkZW50KGNvbnN0cnVjdGlvbkluZ3JlZGllbnRzLCBjb250ZXh0RGF0YSwgbWNpZCwgYXR0cmlidXRlKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250ZXh0QXdhcmVJbmNpZGVudCk7XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKENvbnRleHRBd2FyZUluY2lkZW50KS5jYWxsKHRoaXMsIHtcbiAgICAgICAgaWQ6IGF0dHJpYnV0ZSAhPT0gbnVsbCA/IFwiXCIuY29uY2F0KGNvbnN0cnVjdGlvbkluZ3JlZGllbnRzLmluY2lkZW50SWQsIFwiX1wiKS5jb25jYXQobWNpZCwgXCJfXCIpLmNvbmNhdChhdHRyaWJ1dGUpIDogXCJcIi5jb25jYXQoY29uc3RydWN0aW9uSW5ncmVkaWVudHMuaW5jaWRlbnRJZCwgXCJfXCIpLmNvbmNhdChtY2lkKVxuICAgICAgfSkpOyAvLyBhIHByb3BlcnR5IHRvIGhvbGQgYWxsIG9mIHRoZSBjb250ZXh0c1xuXG4gICAgICBfaW5pdGlhbGl6ZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG5cbiAgICAgIF90aGlzLmNvbnRleHRzID0ge307XG4gICAgICBfdGhpcy5jb25zdHJ1Y3Rpb25JbmdyZWRpZW50cyA9IGNvbnN0cnVjdGlvbkluZ3JlZGllbnRzO1xuICAgICAgX3RoaXMubWNpZCA9IG1jaWQ7XG4gICAgICBfdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG4gICAgICBfdGhpcy5fZHVyYXRpb24gPSBjb25zdHJ1Y3Rpb25JbmdyZWRpZW50cy5wcm9wcy5kdXJhdGlvbjtcbiAgICAgIF90aGlzLm1jX3BsdWdpbl9ucG1fbmFtZSA9IGNvbnN0cnVjdGlvbkluZ3JlZGllbnRzLnBsdWdpbl9ucG1fbmFtZTtcbiAgICAgIF90aGlzLnBsdWdpbl9jaGFubmVsX2NsYXNzID0gY29uc3RydWN0aW9uSW5ncmVkaWVudHMuQ2hhbm5lbDtcbiAgICAgIF90aGlzLkRlc2NyaXB0aXZlSW5jaWRlbnQgPSBjb25zdHJ1Y3Rpb25JbmdyZWRpZW50cy5EZXNjcmlwdGl2ZUluY2lkZW50O1xuXG4gICAgICBfdGhpcy5hZGRDb250ZXh0KGNvbnRleHREYXRhKTtcblxuICAgICAgaWYgKGF0dHJpYnV0ZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoX3R5cGVvZihfdGhpcy5jb25zdHJ1Y3Rpb25JbmdyZWRpZW50cy5hdHRycy5hbmltYXRlZEF0dHJzW190aGlzLmF0dHJpYnV0ZV0pID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIF90aGlzLm9yaWdpbmFsQW5pbWF0ZWRBdHRyaWJ1dGVWYWx1ZSA9IE9iamVjdC5hc3NpZ24oe30sIF90aGlzLmNvbnN0cnVjdGlvbkluZ3JlZGllbnRzLmF0dHJzLmFuaW1hdGVkQXR0cnNbX3RoaXMuYXR0cmlidXRlXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMub3JpZ2luYWxBbmltYXRlZEF0dHJpYnV0ZVZhbHVlID0gX3RoaXMuY29uc3RydWN0aW9uSW5ncmVkaWVudHMuYXR0cnMuYW5pbWF0ZWRBdHRyc1tfdGhpcy5hdHRyaWJ1dGVdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX3RoaXMuY29uc3RydWN0aW9uSW5ncmVkaWVudHMuYXR0cnMsICdhbmltYXRlZEF0dHJzJykpIHtcbiAgICAgICAgX3RoaXMuZmluYWxWYWx1ZSA9IG5ldyBWYWx1ZSh7XG4gICAgICAgICAgXCJmaW5hbFwiOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiBfdGhpcy5jb25zdHJ1Y3Rpb25JbmdyZWRpZW50cy5hdHRycy5hbmltYXRlZEF0dHJzW190aGlzLmF0dHJpYnV0ZV1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gQ29udGV4dEF3YXJlSW5jaWRlbnQ7XG4gIH0oX0xlYWYpO1xuXG4gIHJldHVybiB7XG4gICAgRjogQ29udGV4dEF3YXJlSW5jaWRlbnQsXG4gICAgZDogW3tcbiAgICAgIGtpbmQ6IFwiZ2V0XCIsXG4gICAgICBrZXk6IFwib3JpZ2luYWxDb250ZXh0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb3JpZ2luYWxDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0c1t0aGlzLm9yaWdpbmFsQ29udGV4dEtleV07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJnZXRcIixcbiAgICAgIGtleTogXCJkdXJhdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGR1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHVyYXRpb247XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJzZXRcIixcbiAgICAgIGtleTogXCJkdXJhdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGR1cmF0aW9uKG1pbGxpc2Vjb25kcykge1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IG1pbGxpc2Vjb25kcztcblxuICAgICAgICBmb3IgKHZhciBjb250ZXh0IGluIHRoaXMuY29udGV4dHMpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRdLmR1cmF0aW9uID0gbWlsbGlzZWNvbmRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJhZGRDb250ZXh0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ29udGV4dChjb250ZXh0RGF0YSkge1xuICAgICAgICB2YXIgZm9yY2VHZXRDb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgICAgLy8gaWYgaXQncyB0aGUgZmlyc3QgY29udGV4dCB0byBiZSBhZGRlZCB0aGVuIGl0J3MgdGhlIG9yaWdpbmFsXG4gICAgICAgIHZhciBpc1RoZU9yaWdpbmFsQ29udGV4dCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmNvbnRleHRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLm9yaWdpbmFsQ29udGV4dEtleSA9IGNvbnRleHREYXRhLmNsaXBJZDtcbiAgICAgICAgICB0aGlzLm9yaWdpbmFsQ2xpcENvbnRleHQgPSBjb250ZXh0RGF0YS5jb250ZXh0O1xuICAgICAgICAgIGlzVGhlT3JpZ2luYWxDb250ZXh0ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmdyZWRpZW50c1RvUGFzcyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uc3RydWN0aW9uSW5ncmVkaWVudHMsIHtcbiAgICAgICAgICBjb250ZXh0OiBjb250ZXh0RGF0YS5jb250ZXh0LFxuICAgICAgICAgIG1jaWQ6IHRoaXMubWNpZFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgd2hhdFRvQWRkID0gaW5jaWRlbnRGcm9tSW5ncmVkaWVudHMoaW5ncmVkaWVudHNUb1Bhc3MpO1xuICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHREYXRhLmNsaXBJZF0gPSB3aGF0VG9BZGQ7IC8vIHdoZW4gd2UgYWRkIGEgbmV3IGNvbnRleHQgd2UgbXVzdCBzZXQgdGhlIGluaXRhbCB2YWx1ZSBvZiB0aGUgbmV3bHkgYWRkZWQgSW5jaWRlbnRzXG5cbiAgICAgICAgaWYgKCFpc1RoZU9yaWdpbmFsQ29udGV4dCkge1xuICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxWYWx1ZVtcImZpbmFsXCJdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHNjcmF0Y2hWYWx1ZSA9IHRoaXMuY29udGV4dHNbY29udGV4dERhdGEuY2xpcElkXS5nZXRTY3JhdGNoVmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFZhbHVlLnN1YihzY3JhdGNoVmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5zZXRJbml0aWFsVmFsdWUobmV3IFZhbHVlKHtcbiAgICAgICAgICAgICAgXCJmaW5hbFwiOiB0cnVlLFxuICAgICAgICAgICAgICB2YWx1ZTogc2NyYXRjaFZhbHVlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dHNbY29udGV4dERhdGEuY2xpcElkXS5zZXRJbml0aWFsVmFsdWUodGhpcy5pbml0aWFsVmFsdWUudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JjZUdldENvbnRleHQgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHREYXRhLmNsaXBJZF0uX29uR2V0Q29udGV4dE9uY2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwiaGFuZGxlQWRkQ29udGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUFkZENvbnRleHQodGFyZ2V0LCBwYXlsb2FkKSB7XG4gICAgICAgIHRoaXMuYWRkQ29udGV4dChwYXlsb2FkLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGRlY29yYXRvcnM6IFtnZXRJbmNpZGVudHNCeUNoYW5uZWxdLFxuICAgICAga2V5OiBcImdldEluY2lkZW50c0J5Q2hhbm5lbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEluY2lkZW50c0J5Q2hhbm5lbCgpIHt9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJvblByb2dyZXNzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcyhmcmFjdGlvbiwgbWlsbGlzZWNvbmRzLCBjb250ZXh0SWQpIHtcbiAgICAgICAgaWYgKGNvbnRleHRJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZm9yICh2YXIgY29udGV4dCBpbiB0aGlzLmNvbnRleHRzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRdLm9uUHJvZ3Jlc3MoZnJhY3Rpb24sIG1pbGxpc2Vjb25kcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRJZF0ub25Qcm9ncmVzcyhmcmFjdGlvbiwgbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCctLS0tLS0tLS0gRVJST1IgLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqIE1FVEhPRFMgVEhBVCBBQ1QgQVMgXCJQUk9YWVwiIFRPIEFMTCBPRiBUSEUgSU5DSURFTlRTIEJFTE9OR0lORyBUT1xuICAgICAgICogVEhFIElOQ0lERU5UUyBDT0xMRUNUSU9OIE9GIFRIRSBDT05URVhUIEFXQVJFIElOQ0lERU5UXG4gICAgICAgKiovXG5cbiAgICB9LCB7XG4gICAgICBraW5kOiBcImdldFwiLFxuICAgICAga2V5OiBcImFuaW1hdGVkQXR0cmlidXRlVmFsdWVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhbmltYXRlZEF0dHJpYnV0ZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5hbFZhbHVlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwiY2FsY0luaXRpYWxWYWx1ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGNJbml0aWFsVmFsdWUoc3ViKSB7XG4gICAgICAgIGlmICh0aGlzLm9yaWdpbmFsQ2xpcENvbnRleHQuaXNIb3N0ZWRDbGlwID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBuZXcgVmFsdWUoe1xuICAgICAgICAgICAgXCJmaW5hbFwiOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLm9yaWdpbmFsQ29udGV4dC5nZXRTY3JhdGNoVmFsdWUoKSxcbiAgICAgICAgICAgIHN1Yjogc3ViXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN2ID0gdGhpcy5vcmlnaW5hbENvbnRleHQuZ2V0U2NyYXRjaFZhbHVlKCk7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV3IFZhbHVlKHtcbiAgICAgICAgICAgIFwiZmluYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBzdlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN1YihuZXdWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IC8vIG1hc3NpdmUgZWRpdGluZyBtZXRob2RzIHRoYXQgYXBwbHkgdGhlIHJlcXVlc3QgbWFzc2l2ZWx5IHRvIGFsbCBvZiB0aGVcbiAgICAgIC8vIEluY2lkZW50cyBvZiBhbGwgb2YgdGhlIGNvbnRleHRzXG5cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAga2V5OiBcImdvdENvbnRleHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnb3RDb250ZXh0KCkge1xuICAgICAgICBmb3IgKHZhciBjb250ZXh0IGluIHRoaXMuY29udGV4dHMpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRdLmdvdENvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwiX29uR2V0Q29udGV4dE9uY2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25HZXRDb250ZXh0T25jZSgpIHtcbiAgICAgICAgZm9yICh2YXIgY29udGV4dCBpbiB0aGlzLmNvbnRleHRzKSB7XG4gICAgICAgICAgdGhpcy5jb250ZXh0c1tjb250ZXh0XS5fb25HZXRDb250ZXh0T25jZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJsYXN0V2lzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxhc3RXaXNoKCkge1xuICAgICAgICBmb3IgKHZhciBjb250ZXh0IGluIHRoaXMuY29udGV4dHMpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRdLmxhc3RXaXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBraW5kOiBcIm1ldGhvZFwiLFxuICAgICAga2V5OiBcIm9uR2V0Q29udGV4dFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uR2V0Q29udGV4dCgpIHtcbiAgICAgICAgZm9yICh2YXIgY29udGV4dCBpbiB0aGlzLmNvbnRleHRzKSB7XG4gICAgICAgICAgdGhpcy5jb250ZXh0c1tjb250ZXh0XS5vbkdldENvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwic2V0SW5pdGlhbFZhbHVlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SW5pdGlhbFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGZvciAodmFyIGNvbnRleHQgaW4gdGhpcy5jb250ZXh0cykge1xuICAgICAgICAgIHRoaXMuY29udGV4dHNbY29udGV4dF0uc2V0SW5pdGlhbFZhbHVlKHZhbHVlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwic2V0Q29tcG9BdHRyS2V5VmFsdWVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb21wb0F0dHJLZXlWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIGZvciAodmFyIGNvbnRleHQgaW4gdGhpcy5jb250ZXh0cykge1xuICAgICAgICAgIHRoaXMuY29udGV4dHNbY29udGV4dF0uYXR0cnMuYW5pbWF0ZWRBdHRyc1t0aGlzLmF0dHJpYnV0ZV1ba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHRoaXMuY29udGV4dHNbY29udGV4dF0ubGFzdFdpc2goKTtcbiAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRdLm9uR2V0Q29udGV4dCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2luZDogXCJtZXRob2RcIixcbiAgICAgIGtleTogXCJwbGF5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGxheShmcmFjdGlvbiwgbXMsIGNvbnRleHRJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0c1tjb250ZXh0SWRdLnBsYXkobXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtpbmQ6IFwibWV0aG9kXCIsXG4gICAgICBrZXk6IFwic3RvcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoY29udGV4dElkKSB7XG4gICAgICAgIHRoaXMuY29udGV4dHNbY29udGV4dElkXS5zdG9wKCk7XG4gICAgICB9XG4gICAgfV1cbiAgfTtcbn0sIExlYWYpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRleHRBd2FyZUluY2lkZW50OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar DWI = __webpack_require__(/*! ./ElementSplitter */ \"../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\");\n\nvar ContextAwareClipIncident = __webpack_require__(/*! ./ContextAwareClipIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareClipIncident.js\");\n\nvar Channel = __webpack_require__(/*! ../Channels/Clip/ClipsChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Clip/ClipsChannel.js\");\n/**\n * This Class acts as the DOM Aware Incident for Clips. When constructed the Incident passed to\n * it is a Clip with FragmentHTML context handler.\n * On addition, edit or deletion of Incidents on the Fragmented Clip's tree, of the\n * Descriptive Clip this ElementClipSplitter implements, all updates on lanes\n * and everything that these clips need in order to run are made directly to the\n * ContextAwareIncidents of the DescriptiveClip's real Clip.\n */\n\n\nvar ElementClipSplitter =\n/*#__PURE__*/\nfunction (_DWI) {\n  _inherits(ElementClipSplitter, _DWI);\n\n  function ElementClipSplitter(descriptiveIncident, contextData) {\n    var _this;\n\n    _classCallCheck(this, ElementClipSplitter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementClipSplitter).call(this, descriptiveIncident, contextData));\n    _this.realClip = descriptiveIncident.realClip;\n    return _this;\n  }\n\n  _createClass(ElementClipSplitter, [{\n    key: \"_createElementIncident\",\n    value: function _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {\n      var constructionArguments = descriptiveIncident.realClip.exportConstructionArguments();\n      var constructionIngredients = {\n        incidentId: descriptiveIncident.id,\n        attrs: constructionArguments.attrs,\n        props: _objectSpread({}, constructionArguments.props, {\n          selector: contextData.context.getElementSelectorByMCID(mcid),\n          runTimeInfo: descriptiveIncident.runTimeInfo\n        }),\n        Incident: descriptiveIncident.constructor.Incident,\n        plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n        Channel: Channel,\n        DescriptiveIncident: descriptiveIncident\n      };\n      var contextAwareClipIncident = new ContextAwareClipIncident(constructionIngredients, contextData, mcid, descriptiveIncident);\n      this.addChild(contextAwareClipIncident, 0);\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return _get(_getPrototypeOf(ElementClipSplitter.prototype), \"duration\", this);\n    }\n    /*\n    ElementClipSplitter split the DescriptiveClip to element ContextAwareIncidents\n    All of the element ContextAwareClipIncidents instantiated share the same\n    DescriptiveClip and thus the same realClip. So ElementClipSplitter are\n    the Node from where a realClip starts to get copies.\n    Resizing though means resizing the realClip. In order to avoid redunduncy we\n    manage the resize here and we don't pass further down to the ContextAwareClipIncidents\n    the resizing command.\n    */\n    ,\n    set: function set(milliseconds) {\n      this.realClip._resize(milliseconds / this.realClip.duration);\n\n      this._duration = milliseconds;\n    }\n  }]);\n\n  return ElementClipSplitter;\n}(DWI);\n\nmodule.exports = ElementClipSplitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementClipSplitter.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Group = __webpack_require__(/*! ../BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/Group.js\");\n\nvar AnimatedAttributeSplitter = __webpack_require__(/*! ./AnimatedAttributeSplitter */ \"../node_modules/@kissmybutton/motorcortex/dist/Splitters/AnimatedAttributeSplitter.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar ContextAwareIncident = __webpack_require__(/*! ./ContextAwareIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/Splitters/ContextAwareIncident.js\");\n\nvar ElementSplitter =\n/*#__PURE__*/\nfunction (_Group) {\n  _inherits(ElementSplitter, _Group);\n\n  function ElementSplitter(descriptiveIncident, contextData) {\n    var _this;\n\n    _classCallCheck(this, ElementSplitter);\n\n    // we make sure the DOMAwareIncident takes the same id as the Descriptive Incident\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementSplitter).call(this, {}, {\n      id: descriptiveIncident.id\n    })); // a property to hold all of the contexts\n\n    _this.contexts = {};\n    _this.contexts[contextData.clipId] = contextData.context;\n    _this.originalContextKey = contextData.clipId;\n    _this.instantiatedCopiesContexts = contextData.instantiatedCopiesContexts;\n\n    _this.setUp(descriptiveIncident, contextData);\n\n    return _this;\n  }\n\n  _createClass(ElementSplitter, [{\n    key: \"setUp\",\n    value: function setUp(descriptiveIncident, contextData) {\n      // the elements of the original context\n      var elements = this.originalContext.getElements(descriptiveIncident.selector()); // the elements for each of the copied contexts\n\n      var copiesElements = {};\n\n      for (var contextKey in this.instantiatedCopiesContexts) {\n        copiesElements[contextKey] = Array.from(this.instantiatedCopiesContexts[contextKey].rootElement.querySelectorAll(descriptiveIncident.props.selector));\n      }\n\n      var totalElements = elements.length;\n\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i]; // set the mcid of the element on index i of the original context\n\n        var mcid = this._getElementMCID(element); // set the same mcid for the elements of the same context in all of the instantiatedCopiesContexts\n\n\n        for (var _contextKey in this.instantiatedCopiesContexts) {\n          this._setElementMCID(this.instantiatedCopiesContexts[_contextKey], this.instantiatedCopiesContexts[_contextKey][i], mcid);\n        }\n\n        this._createElementIncident(element, descriptiveIncident, contextData, i, totalElements, mcid);\n      }\n    }\n  }, {\n    key: \"_getElementMCID\",\n    value: function _getElementMCID(element) {\n      var mcid = this.originalContext.getMCID(element);\n\n      if (!mcid) {\n        mcid = helper.getAnId(true);\n        this.originalContext.setMCID(element, mcid);\n      }\n\n      return mcid;\n    }\n  }, {\n    key: \"_setElementMCID\",\n    value: function _setElementMCID(context, element, mcid) {\n      var existingMCID = context.getMCID(element);\n\n      if (!existingMCID) {\n        context.setMCID(element, mcid);\n      }\n    }\n  }, {\n    key: \"_createElementIncident\",\n    value: function _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {\n      /* elements splitter might handle either attribute Incidents (that have animatedAttrs) or Incidents\n      that do not have animatedAttrs such as MediaPlayback Incidents.\n      In the case of an attributed Incident we proceed by creating one AttributeSplitter for each\n      while on the case of an non-attribured Incident we go ahead and\n      */\n      if (Object.prototype.hasOwnProperty.call(descriptiveIncident.attrs, 'animatedAttrs')) {\n        var animatedAttributeSplitter = new AnimatedAttributeSplitter(descriptiveIncident, contextData, mcid, contextData.context.getElementSelectorByMCID(mcid));\n        this.addChild(animatedAttributeSplitter, 0);\n      } else {\n        var attrsToPass = descriptiveIncident.attrs;\n\n        var propsToPass = _objectSpread({}, descriptiveIncident.props, {\n          selector: this.selector\n        });\n\n        var constructionIngredients = {\n          incidentId: descriptiveIncident.id,\n          attrs: attrsToPass,\n          props: propsToPass,\n          Incident: descriptiveIncident.constructor.Incident,\n          plugin_npm_name: descriptiveIncident.constructor.plugin_npm_name,\n          Channel: descriptiveIncident.constructor.Channel,\n          DescriptiveIncident: descriptiveIncident\n        };\n        var contextAwareIncident = new ContextAwareIncident(constructionIngredients, contextData, mcid, null);\n        this.addChild(contextAwareIncident, 0);\n      }\n    }\n  }, {\n    key: \"originalContext\",\n    get: function get() {\n      return this.contexts[this.originalContextKey];\n    }\n  }]);\n\n  return ElementSplitter;\n}(Group);\n\nmodule.exports = ElementSplitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Splitters/ElementSplitter.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar systoleDiastole = __webpack_require__(/*! ./decorators/systoleDiastole */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\");\n\nvar Leaf = _decorate(null, function (_initialize) {\n  var Leaf = function Leaf() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Leaf);\n\n    _initialize(this);\n\n    // parentNode is a reference to the parent Node the Leaf is attached to (if any)\n    this.parentNode = null;\n    this.isNode = false;\n\n    if (Object.prototype.hasOwnProperty.call(props, \"id\")) {\n      this.id = props.id;\n    } else {\n      this.id = helper.getAnId();\n    }\n\n    this.props = props;\n  };\n\n  return {\n    F: Leaf,\n    d: [{\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this.props.duration;\n      }\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(milliseconds) {\n        this.props.duration = milliseconds;\n      }\n    }, {\n      kind: \"method\",\n      key: \"setNewDuration\",\n      value: function setNewDuration(newDuration) {\n        this.duration = newDuration;\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: false,\n          direction: _CONST._DIRECTIONS._UP\n        });\n      }\n    }, {\n      kind: \"method\",\n      decorators: [systoleDiastole],\n      key: \"systoleDiastole\",\n      value: function systoleDiastole() {}\n    }, {\n      kind: \"get\",\n      key: \"hasParent\",\n      value: function hasParent() {\n        if (this.parentNode === null) {\n          return false;\n        }\n\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"attachToNode\",\n      value: function attachToNode(node) {\n        this.parentNode = node;\n      }\n    }, {\n      kind: \"method\",\n      key: \"detachFromParent\",\n      value: function detachFromParent() {\n        this.parentNode = null;\n      }\n      /**\n      @param {string} name - the name of the message\n      @param {object} payload - the payload of the message\n      @param {object} target - specifies the target of the message in a key-value pairs object\n      @param {object} options - in the form:\n      {\n          direction (either _UP or _DOWN)\n          selfExecute (either true which means the Leaf should try to handle the message itself or\n              false which means the Leaf should directly forward the message to its parent)\n      }\n      @returns The expected result of this method is on the form:\n      {\n          response: an object the structure of which depends on the name of the message\n              and maybe even on the payload\n          responder: a direct reference to the lead that actually responded\n          (only valid for direaction _DOWN) positionDelta: the position delta of the responder compared to the requester\n      }\n      **/\n\n    }, {\n      kind: \"method\",\n      key: \"putMessageOnPipe\",\n      value: function putMessageOnPipe(name, payload, target) {\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n        // default direction: _DOWN\n        if (!Object.prototype.hasOwnProperty.call(options, \"direction\")) {\n          options.direction = _CONST._DIRECTIONS._DOWN;\n        } // default positionDelta = 0\n\n\n        if (options.direction === _CONST._DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, \"positionDelta\")) {\n          options.positionDelta = 0;\n        }\n\n        if (options.selfExecute === true) {\n          // if the Leaf has a \"handle<name>\" method with the first letter of\n          // name in Capital it runs it\n          var handlingMethodName = \"handle\".concat(helper.jsUcfirst(name));\n          var capable = typeof this[handlingMethodName] === 'function';\n\n          if (capable) {\n            var response = this[handlingMethodName](target, payload);\n\n            if (response !== _CONST._BYPASS) {\n              var result = {\n                response: response,\n                responder: this\n              };\n\n              if (options.direction === _CONST._DIRECTIONS._UP) {\n                return result;\n              } else {\n                return [_objectSpread({}, result, {\n                  positionDelta: options.positionDelta\n                })];\n              }\n            }\n          }\n        }\n\n        if (options.direction === _CONST._DIRECTIONS._UP) {\n          if (this.hasParent) {\n            return this.parentNode.putMessageOnPipe(name, payload, target, {\n              selfExecute: true,\n              direction: _CONST._DIRECTIONS._UP\n            });\n          } else {\n            // if the message reaches the top of the tree without finding any liable target\n            return {\n              response: false,\n              responder: null\n            };\n          }\n        } else {\n          // _CONST._DIRECTIONS._DOWN\n          return [];\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"bypass\",\n      value: function bypass() {\n        return _CONST._BYPASS;\n      }\n    }]\n  };\n});\n\nmodule.exports = Leaf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }\n\nfunction _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [[\"method\"], [\"field\"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === \"own\") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; [\"method\", \"field\"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === \"static\" || placement === \"prototype\")) { var receiver = placement === \"static\" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === \"field\") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { \"static\": [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError(\"Duplicated element (\" + element.key + \")\"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError(\"Duplicated element (\" + elements[j].key + \")\"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === \"field\") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return _toArray(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, \"finisher\", \"An element descriptor\"); this.disallowProperty(elementObject, \"extras\", \"An element descriptor\"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== \"method\" && kind !== \"field\") { throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or' + ' \"field\", but a decorator created an element descriptor with' + ' .kind \"' + kind + '\"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== \"static\" && placement !== \"prototype\" && placement !== \"own\") { throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\",' + ' \"prototype\" or \"own\", but a decorator created an element descriptor' + ' with .placement \"' + placement + '\"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, \"elements\", \"An element descriptor\"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== \"field\") { this.disallowProperty(elementObject, \"initializer\", \"A method descriptor\"); } else { this.disallowProperty(descriptor, \"get\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"set\", \"The property descriptor of a field descriptor\"); this.disallowProperty(descriptor, \"value\", \"The property descriptor of a field descriptor\"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, \"finisher\"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: \"class\", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: \"Descriptor\", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== \"class\") { throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator' + ' created a class descriptor with .kind \"' + kind + '\"'); } this.disallowProperty(obj, \"key\", \"A class descriptor\"); this.disallowProperty(obj, \"placement\", \"A class descriptor\"); this.disallowProperty(obj, \"descriptor\", \"A class descriptor\"); this.disallowProperty(obj, \"initializer\", \"A class descriptor\"); this.disallowProperty(obj, \"extras\", \"A class descriptor\"); var finisher = _optionalCallableProperty(obj, \"finisher\"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== \"function\") { throw new TypeError(\"Finishers must return a constructor.\"); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + \" can't have a .\" + name + \" property.\"); } } }; return api; }\n\nfunction _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === \"method\") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === \"get\") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"set\") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === \"field\") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === \"field\" ? \"field\" : \"method\", key: key, placement: def[\"static\"] ? \"static\" : def.kind === \"field\" ? \"own\" : \"prototype\", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === \"field\") element.initializer = def.value; return element; }\n\nfunction _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }\n\nfunction _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === \"method\" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === \"method\" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError(\"Duplicated methods (\" + element.key + \") can't be decorated.\"); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError(\"Decorators can't be placed on different accessors with for \" + \"the same property (\" + element.key + \").\"); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }\n\nfunction _hasDecorators(element) { return element.decorators && element.decorators.length; }\n\nfunction _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }\n\nfunction _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== \"function\") { throw new TypeError(\"Expected '\" + name + \"' to be a function\"); } return value; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Leaf = __webpack_require__(/*! ./Leaf */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/Leaf.js\");\n\nvar _CONST = __webpack_require__(/*! ./_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\");\n\nvar _COPY = __webpack_require__(/*! ./_copy */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js\");\n\nvar systoleDiastole = __webpack_require__(/*! ./decorators/systoleDiastole */ \"../node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\");\n\nvar Node = _decorate(null, function (_initialize, _Leaf) {\n  var Node =\n  /*#__PURE__*/\n  function (_Leaf2) {\n    _inherits(Node, _Leaf2);\n\n    function Node() {\n      var _this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, Node);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, props));\n\n      _initialize(_assertThisInitialized(_this));\n\n      _this.isNode = true;\n      /**\n        The object holds the Incidents of the Scene on the format:\n        {\n            <id>: {\n                  id // the id of the Incident object\n                  leaf // the incident object\n                  position // the position of the incident\n            },\n            ...\n        }\n         */\n\n      _this.children = {};\n      _this.calculatedDuration = 0;\n      return _this;\n    }\n\n    return Node;\n  }(_Leaf);\n\n  return {\n    F: Node,\n    d: [{\n      kind: \"get\",\n      key: \"duration\",\n      value: function duration() {\n        return this.calculatedDuration;\n      }\n    }, {\n      kind: \"set\",\n      key: \"duration\",\n      value: function duration(newDuration) {\n        var durationFraction = newDuration / this.duration;\n\n        if (this.props) {\n          if (Object.prototype.hasOwnProperty.call(this.props, \"duration\")) {\n            this.props.duration = newDuration;\n          }\n        }\n\n        this.calculatedDuration = newDuration;\n\n        for (var childKey in this.children) {\n          var child = this.children[childKey];\n          this.editPosition(child.id, child.position * durationFraction, true);\n          child.leaf.systoleDiastole(durationFraction);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"setNewDuration\",\n      value: function setNewDuration(newDuration) {\n        this.duration = newDuration;\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: false,\n          direction: _CONST._DIRECTIONS._UP\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_calculateDuration\",\n      value: function _calculateDuration() {\n        var duration = 0;\n\n        for (var childKey in this.children) {\n          var child = this.children[childKey];\n\n          if (child.position + child.leaf.duration > duration) {\n            duration = child.position + child.leaf.duration;\n          }\n        }\n\n        if (duration === this.calculatedDuration) {\n          return false;\n        }\n\n        if (this.props) {\n          if (Object.prototype.hasOwnProperty.call(this.props, \"duration\")) {\n            this.props.duration = duration;\n          }\n        }\n\n        this.calculatedDuration = duration;\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      decorators: [systoleDiastole],\n      key: \"systoleDiastole\",\n      value: function systoleDiastole() {}\n    }, {\n      kind: \"method\",\n      key: \"handleRecalcDuration\",\n      value: function handleRecalcDuration(target, payload) {\n        // eslint-disable-line no-unused-vars\n        if (this._calculateDuration()) {\n          return this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n            selfExecute: false,\n            direction: _CONST._DIRECTIONS._UP\n          });\n        }\n\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"getLeafById\",\n      value: function getLeafById(id) {\n        var onlyDirectChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return this.children[id].leaf;\n        } else if (onlyDirectChild === false) {\n          for (var child in this.children) {\n            var childLeaf = this.children[child].leaf;\n\n            if (childLeaf.isNode) {\n              var leaf = childLeaf.getLeafById(id);\n\n              if (leaf != null) {\n                return leaf;\n              }\n            }\n          }\n        } else {\n          return null;\n        }\n\n        return null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"getLeafPosition\",\n      value: function getLeafPosition(id) {\n        return this.children[id].position;\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkAddition\",\n      value: function checkAddition(leaf, position) {\n        if (leaf.hasParent) {\n          return {\n            result: false,\n            reason: _COPY._LEAFALREADYASSIGNED\n          };\n        }\n\n        if (position < 0) {\n          return {\n            result: false,\n            reason: _COPY._NEGATIVEPOSITIONNOTALLOWED\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"addChild\",\n      value: function addChild(leaf, position) {\n        // this hasParent check occurs here as an extra security check so it\n        // gets executed regardless if the user wants to perform checks or not\n        if (leaf.hasParent) {\n          return {\n            result: false,\n            reason: _COPY._LEAFALREADYASSIGNED\n          };\n        }\n\n        this.children[leaf.id] = {\n          id: leaf.id,\n          leaf: leaf,\n          position: position\n        };\n        leaf.attachToNode(this);\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _CONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkRemoveChild\",\n      value: function checkRemoveChild(id) {\n        if (!Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return {\n            result: false,\n            reason: _COPY._LEAFNOTFOUND\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"removeChild\",\n      value: function removeChild(id) {\n        this.children[id].leaf.detachFromParent();\n        delete this.children[id];\n        this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n          selfExecute: true,\n          direction: _CONST._DIRECTIONS._UP\n        });\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkEditPosition\",\n      value: function checkEditPosition(id, position) {\n        if (position < 0) {\n          return {\n            result: false,\n            reason: _COPY._NEGATIVEPOSITIONNOTALLOWED\n          };\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(this.children, id)) {\n          return {\n            result: false,\n            reason: _COPY._LEAFNOTFOUND\n          };\n        }\n\n        return {\n          result: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"editPosition\",\n      value: function editPosition(id, position) {\n        var bypassRecalcDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (Object.prototype.hasOwnProperty.call(this.children, id)) {\n          this.children[id].position = position;\n\n          if (bypassRecalcDuration === false) {\n            this.putMessageOnPipe('recalcDuration', {}, 'Groups', {\n              selfExecute: true,\n              direction: _CONST._DIRECTIONS._UP\n            });\n          }\n\n          return {\n            result: true\n          };\n        }\n      }\n      /**\n      The expected result of this method depends on the direction of the message\n      The direction might either be _UP or _DOWN.\n      In the case of _UP the expected result is identical as on Leaf:\n      {\n          response: an object the structure of which depends on the name of the message\n              and maybe even on the payload\n          responder: a direct reference to the lead that actually responded\n      }\n      In the case of _DOWN though, where multiple Leafs might be eligible in the tree\n      for handling the message the result is on the form:\n      [\n          {\n              response: an object the structure of which depends on the name of the message\n                  and maybe even on the payload\n              responder: a direct reference to the lead that actually responded\n              positionDelta: the position delta of the responder compared to the requester\n          }\n      ]\n      */\n\n    }, {\n      kind: \"method\",\n      key: \"putMessageOnPipe\",\n      value: function putMessageOnPipe(name, payload, target) {\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n        // default direction: _DOWN\n        if (!Object.prototype.hasOwnProperty.call(options, 'direction')) {\n          options.direction = _CONST._DIRECTIONS._DOWN;\n        } // default positionDelta = 0\n\n\n        if (options.direction === _CONST._DIRECTIONS._DOWN && !Object.prototype.hasOwnProperty.call(options, 'positionDelta')) {\n          options.positionDelta = 0;\n        }\n\n        if (options.direction === _CONST._DIRECTIONS._UP) {\n          // if the direction is up\n          return _get(_getPrototypeOf(Node.prototype), \"putMessageOnPipe\", this).call(this, name, payload, target, options); // act exactly as any other Leaf\n        } else {\n          var result = _get(_getPrototypeOf(Node.prototype), \"putMessageOnPipe\", this).call(this, name, payload, target, options);\n\n          if (result.length > 0) {\n            return result;\n          }\n\n          for (var child in this.children) {\n            var leaf = this.children[child].leaf;\n\n            var newOptions = _objectSpread({}, options, {\n              selfExecute: true,\n              positionDelta: options.positionDelta + this.children[child].position\n            });\n\n            result = result.concat(leaf.putMessageOnPipe(name, payload, target, newOptions));\n          }\n\n          return result;\n        }\n      }\n    }]\n  };\n}, Leaf);\n\nmodule.exports = Node;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Tree/Node.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _STATE: {\n    _ROOTOFTREE: \"root_of_descriptive_clip\",\n    // this Descriptive Incident is directly attached to a real Clip\n    _FREE: \"free\" // this DI is neither attached to a real Clip nor has a parent on the Descriptive Tree\n\n  },\n  _DIRECTIONS: {\n    _UP: \"up\",\n    _DOWN: \"down\"\n  },\n  _TARGETTYPES: {\n    _ROOTOFTREE: \"native.tree.rootoftree\"\n  },\n  _BYPASS: \"native.tree.bypass\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9UcmVlL19DT05TVC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L1RyZWUvX0NPTlNULmpzP2YzZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBfU1RBVEU6IHtcbiAgICBfUk9PVE9GVFJFRTogXCJyb290X29mX2Rlc2NyaXB0aXZlX2NsaXBcIixcbiAgICAvLyB0aGlzIERlc2NyaXB0aXZlIEluY2lkZW50IGlzIGRpcmVjdGx5IGF0dGFjaGVkIHRvIGEgcmVhbCBDbGlwXG4gICAgX0ZSRUU6IFwiZnJlZVwiIC8vIHRoaXMgREkgaXMgbmVpdGhlciBhdHRhY2hlZCB0byBhIHJlYWwgQ2xpcCBub3IgaGFzIGEgcGFyZW50IG9uIHRoZSBEZXNjcmlwdGl2ZSBUcmVlXG5cbiAgfSxcbiAgX0RJUkVDVElPTlM6IHtcbiAgICBfVVA6IFwidXBcIixcbiAgICBfRE9XTjogXCJkb3duXCJcbiAgfSxcbiAgX1RBUkdFVFRZUEVTOiB7XG4gICAgX1JPT1RPRlRSRUU6IFwibmF0aXZlLnRyZWUucm9vdG9mdHJlZVwiXG4gIH0sXG4gIF9CWVBBU1M6IFwibmF0aXZlLnRyZWUuYnlwYXNzXCJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Tree/_CONST.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js":
/*!********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  _LEAFALREADYASSIGNED: \"Leaf has already been attached to another Node\",\n  _NEGATIVEPOSITIONNOTALLOWED: \"Negative positioning of childs on nodes is not allowed\",\n  _LEAFNOTFOUND: \"The Leaf with the requested id couldn't be found on the Tree\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9UcmVlL19jb3B5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvVHJlZS9fY29weS5qcz85ZjJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgX0xFQUZBTFJFQURZQVNTSUdORUQ6IFwiTGVhZiBoYXMgYWxyZWFkeSBiZWVuIGF0dGFjaGVkIHRvIGFub3RoZXIgTm9kZVwiLFxuICBfTkVHQVRJVkVQT1NJVElPTk5PVEFMTE9XRUQ6IFwiTmVnYXRpdmUgcG9zaXRpb25pbmcgb2YgY2hpbGRzIG9uIG5vZGVzIGlzIG5vdCBhbGxvd2VkXCIsXG4gIF9MRUFGTk9URk9VTkQ6IFwiVGhlIExlYWYgd2l0aCB0aGUgcmVxdWVzdGVkIGlkIGNvdWxkbid0IGJlIGZvdW5kIG9uIHRoZSBUcmVlXCJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Tree/_copy.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction systoleDiastole(payload) {\n  payload.descriptor.value = function (durationFraction) {\n    this.duration = this.duration * durationFraction;\n  };\n}\n\nmodule.exports = systoleDiastole;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9UcmVlL2RlY29yYXRvcnMvc3lzdG9sZURpYXN0b2xlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvVHJlZS9kZWNvcmF0b3JzL3N5c3RvbGVEaWFzdG9sZS5qcz9hNDVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBzeXN0b2xlRGlhc3RvbGUocGF5bG9hZCkge1xuICBwYXlsb2FkLmRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoZHVyYXRpb25GcmFjdGlvbikge1xuICAgIHRoaXMuZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uICogZHVyYXRpb25GcmFjdGlvbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzeXN0b2xlRGlhc3RvbGU7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/Tree/decorators/systoleDiastole.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  'atTheEndOfTheGroup': {\n    value: 'end',\n    purpose: \"It's used on Groups and more specifically on the addIncident (and thus also on addPassiveIncident) methods. It\\n            implies that the millisecond for the new incident to be added should be at the end of the Group\"\n  },\n  notCalculateableScratchValue: \"motorcortex2__notCalculateableScratchValue\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fY29uZmlndXJhdGlvbi9fQ09OU1QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fY29uZmlndXJhdGlvbi9fQ09OU1QuanM/ZjMzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICdhdFRoZUVuZE9mVGhlR3JvdXAnOiB7XG4gICAgdmFsdWU6ICdlbmQnLFxuICAgIHB1cnBvc2U6IFwiSXQncyB1c2VkIG9uIEdyb3VwcyBhbmQgbW9yZSBzcGVjaWZpY2FsbHkgb24gdGhlIGFkZEluY2lkZW50IChhbmQgdGh1cyBhbHNvIG9uIGFkZFBhc3NpdmVJbmNpZGVudCkgbWV0aG9kcy4gSXRcXG4gICAgICAgICAgICBpbXBsaWVzIHRoYXQgdGhlIG1pbGxpc2Vjb25kIGZvciB0aGUgbmV3IGluY2lkZW50IHRvIGJlIGFkZGVkIHNob3VsZCBiZSBhdCB0aGUgZW5kIG9mIHRoZSBHcm91cFwiXG4gIH0sXG4gIG5vdENhbGN1bGF0ZWFibGVTY3JhdGNoVmFsdWU6IFwibW90b3Jjb3J0ZXgyX19ub3RDYWxjdWxhdGVhYmxlU2NyYXRjaFZhbHVlXCJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_configuration/_CONST.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\nknown events:\n- state-change / meta: the name of the new state\n- attribute-rejection / meta: animationID, attributes\n- animation-rejection / meta: animationID\n- conflicts-on-edit\n*/\nvar conf = {\n  keyframe_sec_key: 'sec_',\n  elements_data_attribute_name: 'data-motorcortex2-id',\n  selfContainedContextHandler: 'closed',\n  logLevel: 1,\n  testMode: true,\n  logTypes: [{\n    key: 'info',\n    style: 'color: #666;',\n    level: 5\n  }, {\n    key: 'notice',\n    style: 'background: rgba(0, 0, 0, 0.8); color:white; padding:8px;',\n    level: 4\n  }, {\n    key: 'warning',\n    style: 'color: black; background: orange;',\n    level: 2\n  }, {\n    key: 'error',\n    style: 'color: black; background: red;',\n    level: 1\n  }]\n};\nmodule.exports = conf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19jb25maWd1cmF0aW9uL2dlbmVyYWxDb25mLmpzP2MzMTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG5rbm93biBldmVudHM6XG4tIHN0YXRlLWNoYW5nZSAvIG1ldGE6IHRoZSBuYW1lIG9mIHRoZSBuZXcgc3RhdGVcbi0gYXR0cmlidXRlLXJlamVjdGlvbiAvIG1ldGE6IGFuaW1hdGlvbklELCBhdHRyaWJ1dGVzXG4tIGFuaW1hdGlvbi1yZWplY3Rpb24gLyBtZXRhOiBhbmltYXRpb25JRFxuLSBjb25mbGljdHMtb24tZWRpdFxuKi9cbnZhciBjb25mID0ge1xuICBrZXlmcmFtZV9zZWNfa2V5OiAnc2VjXycsXG4gIGVsZW1lbnRzX2RhdGFfYXR0cmlidXRlX25hbWU6ICdkYXRhLW1vdG9yY29ydGV4Mi1pZCcsXG4gIHNlbGZDb250YWluZWRDb250ZXh0SGFuZGxlcjogJ2Nsb3NlZCcsXG4gIGxvZ0xldmVsOiAxLFxuICB0ZXN0TW9kZTogdHJ1ZSxcbiAgbG9nVHlwZXM6IFt7XG4gICAga2V5OiAnaW5mbycsXG4gICAgc3R5bGU6ICdjb2xvcjogIzY2NjsnLFxuICAgIGxldmVsOiA1XG4gIH0sIHtcbiAgICBrZXk6ICdub3RpY2UnLFxuICAgIHN0eWxlOiAnYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjgpOyBjb2xvcjp3aGl0ZTsgcGFkZGluZzo4cHg7JyxcbiAgICBsZXZlbDogNFxuICB9LCB7XG4gICAga2V5OiAnd2FybmluZycsXG4gICAgc3R5bGU6ICdjb2xvcjogYmxhY2s7IGJhY2tncm91bmQ6IG9yYW5nZTsnLFxuICAgIGxldmVsOiAyXG4gIH0sIHtcbiAgICBrZXk6ICdlcnJvcicsXG4gICAgc3R5bGU6ICdjb2xvcjogYmxhY2s7IGJhY2tncm91bmQ6IHJlZDsnLFxuICAgIGxldmVsOiAxXG4gIH1dXG59O1xubW9kdWxlLmV4cG9ydHMgPSBjb25mOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** @classdesc Helper maintains a number of helpful functions in a single point  */\nvar conf = __webpack_require__(/*! ../_configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/_configuration/generalConf.js\"); // audio context initialisation\n\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\nvar audioContext = new window.AudioContext();\n\nvar Helper =\n/*#__PURE__*/\nfunction () {\n  function Helper(configuration) {\n    _classCallCheck(this, Helper);\n\n    var logLevel = conf.logLevel;\n\n    if (configuration) {\n      if (Object.prototype.hasOwnProperty.call(configuration, \"logLevel\")) {\n        logLevel = configuration.logLevel;\n      }\n    }\n\n    this.lanesMCIDattrsSeperator = '___';\n\n    for (var i = 0; i < conf.logTypes.length; i++) {\n      var logType = conf.logTypes[i];\n\n      if (logLevel >= logType.level) {\n        if (conf.testMode === true) {\n          this[logType.key] = window.console.log.bind(window.console, \"MotorCortex - \".concat(logType.key, \": \"));\n        } else {\n          this[logType.key] = window.console.log.bind(window.console, \"MotorCortex - %c%s\", logType.style);\n        }\n      } else this[logType.key] = function () {};\n    }\n\n    if (logLevel >= 3) {\n      this.log = window.console.log.bind(window.console, \"MotorCortex - \");\n    } else this.log = function () {};\n  }\n\n  _createClass(Helper, [{\n    key: \"getAudioContext\",\n    value: function getAudioContext() {\n      return audioContext;\n    }\n  }, {\n    key: \"renderTemplate\",\n    value: function renderTemplate(templateString, templateVars) {\n      return new Function(\"return `\" + templateString + \"`;\").call(templateVars);\n    }\n    /**\n     * @returns {string} in the form \"1bc45f78-ab23-jl59\"\n     */\n\n  }, {\n    key: \"getAnId\",\n    value: function getAnId() {\n      var underscore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var specialChar = '-';\n\n      if (underscore) {\n        specialChar = '_';\n      }\n\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n\n      return s4() + s4() + specialChar + s4() + specialChar + s4();\n    }\n  }, {\n    key: \"getLaneKey\",\n    value: function getLaneKey(mcid, attribute) {\n      return mcid + this.lanesMCIDattrsSeperator + attribute;\n    }\n  }, {\n    key: \"getMCIDandAttrOutOfLaneKey\",\n    value: function getMCIDandAttrOutOfLaneKey(laneKey) {\n      var laneArray = laneKey.split(this.lanesMCIDattrsSeperator);\n      return {\n        mcid: laneArray[0],\n        attribute: laneArray[1]\n      };\n    }\n  }, {\n    key: \"getElementByMCID\",\n    value: function getElementByMCID(context, mcid) {\n      return context.rootElement.querySelectorAll('[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]')[0];\n    }\n    /**\n    subdivision might be rounding the number to its:\n    - units (subdivision = 1)\n    - tenths (subdivision = 10)\n    - hundreds (subdivision = 100)\n    - thousands (subdivision = 1000)\n     @param {string} int\n     @param {subdivision} int\n     @returns {int} the rounded number\n    */\n\n  }, {\n    key: \"roundNumberTo\",\n    value: function roundNumberTo(number, subdivision) {\n      return Math.round(number / subdivision) * subdivision;\n    }\n  }, {\n    key: \"isInteger\",\n    value: function isInteger(number) {\n      if (number === parseInt(number, 10)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"isString\",\n    value: function isString(test) {\n      if (typeof test === 'string' || test instanceof String) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"isObject\",\n    value: function isObject(test) {\n      return _typeof(test) === \"object\";\n    }\n  }, {\n    key: \"isArray\",\n    value: function isArray(test) {\n      return Array.isArray(test);\n    }\n  }, {\n    key: \"isFunction\",\n    value: function isFunction(functionToCheck) {\n      return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n    }\n    /**\n     * systole / diastole of the projections\n     * @returns {array} - collection of objects with keys: {id, start, end, startDelta}\n     **/\n\n  }, {\n    key: \"systoleDiastoleProjections\",\n    value: function systoleDiastoleProjections(projections, durationFraction, anchorPoint) {\n      var alteredProjections = [];\n\n      for (var i = 0; i < projections.length; i++) {\n        var projectedIncident = projections[i];\n        var msInResizedPortion = projectedIncident.parentMillisecond - anchorPoint;\n\n        if (durationFraction != 1) {\n          alteredProjections.push({\n            id: projectedIncident.incident.id,\n            start: msInResizedPortion * durationFraction + anchorPoint,\n            end: msInResizedPortion * durationFraction + anchorPoint + projectedIncident.incident.duration * durationFraction,\n            startDelta: msInResizedPortion * durationFraction + anchorPoint - projectedIncident.millisecond\n          });\n        }\n      }\n\n      return alteredProjections;\n    }\n  }, {\n    key: \"jsUcfirst\",\n    value: function jsUcfirst(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n  }]);\n\n  return Helper;\n}();\n\nmodule.exports = Helper;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper();\n\nvar Journey =\n/*#__PURE__*/\nfunction () {\n  function Journey(props) {\n    _classCallCheck(this, Journey);\n\n    if (!Object.prototype.hasOwnProperty.call(props, \"incident\")) {\n      helper.error('Journey constructor expects an Incident on its properties on the key \"incident\"');\n      return false;\n    }\n\n    this.memory = props.calpuleMemory;\n    this.stations = [];\n    this.incident = props.incident;\n    this.startMillisecond = this.incident.runTimeInfo.currentMillisecond * 1;\n    this.startState = this.incident.runTimeInfo.state + \"\";\n    this.incident.stop();\n  }\n\n  _createClass(Journey, [{\n    key: \"station\",\n    value: function station(millisecond) {\n      var props = {};\n\n      if (this.stations.length > 0) {\n        props.previousStop = this.stations[this.stations.length - 1];\n      }\n\n      this.stations.push(millisecond); // helper.log(`CAPSULE passes as previousStop: ${props.previousStop}`);\n      // helper.log(this.stations);\n\n      this.incident.playableProgress(millisecond / this.incident.duration, millisecond);\n    }\n  }, {\n    key: \"destination\",\n    value: function destination() {\n      var millisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (millisecond != null) {\n        this.station(millisecond);\n      } else {\n        millisecond = this.stations[this.stations.length - 1];\n      }\n\n      this.incident.playableProgress(millisecond / this.incident.duration, millisecond); // if the clip was playing start it again\n\n      if (this.startState === 'playing' || this.startState === \"blocked\" && this.incident.statusBeforeBlock === \"playing\") {\n        this.incident.play();\n      } else {\n        if (millisecond >= this.incident.duration) {\n          this.incident.complete();\n        } else {\n          this.incident.arm();\n        }\n      }\n\n      this.memory.push(this.exportJourneyLog);\n    }\n  }, {\n    key: \"exportJourneyLog\",\n    value: function exportJourneyLog() {\n      return {\n        startMillisecond: this.startMillisecond,\n        startState: this.startState,\n        stations: this.stations\n      };\n    }\n  }]);\n\n  return Journey;\n}();\n\nvar TimeCapsule =\n/*#__PURE__*/\nfunction () {\n  function TimeCapsule() {\n    _classCallCheck(this, TimeCapsule);\n\n    this.memory = [];\n  }\n\n  _createClass(TimeCapsule, [{\n    key: \"startJourney\",\n    value: function startJourney(incident) {\n      if (!incident) {\n        helper.error('startJourney expects an Incident as an argument');\n        return false;\n      }\n\n      return new Journey({\n        incident: incident,\n        calpuleMemory: this.memory\n      });\n    }\n  }]);\n\n  return TimeCapsule;\n}();\n\nmodule.exports = TimeCapsule;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fY29yZVV0aWxzL1RpbWVDYXBzdWxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvX2NvcmVVdGlscy9UaW1lQ2Fwc3VsZS5qcz9kNTRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi9fY29yZVV0aWxzL0hlbHBlcicpO1xuXG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuXG52YXIgSm91cm5leSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEpvdXJuZXkocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSm91cm5leSk7XG5cbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgXCJpbmNpZGVudFwiKSkge1xuICAgICAgaGVscGVyLmVycm9yKCdKb3VybmV5IGNvbnN0cnVjdG9yIGV4cGVjdHMgYW4gSW5jaWRlbnQgb24gaXRzIHByb3BlcnRpZXMgb24gdGhlIGtleSBcImluY2lkZW50XCInKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLm1lbW9yeSA9IHByb3BzLmNhbHB1bGVNZW1vcnk7XG4gICAgdGhpcy5zdGF0aW9ucyA9IFtdO1xuICAgIHRoaXMuaW5jaWRlbnQgPSBwcm9wcy5pbmNpZGVudDtcbiAgICB0aGlzLnN0YXJ0TWlsbGlzZWNvbmQgPSB0aGlzLmluY2lkZW50LnJ1blRpbWVJbmZvLmN1cnJlbnRNaWxsaXNlY29uZCAqIDE7XG4gICAgdGhpcy5zdGFydFN0YXRlID0gdGhpcy5pbmNpZGVudC5ydW5UaW1lSW5mby5zdGF0ZSArIFwiXCI7XG4gICAgdGhpcy5pbmNpZGVudC5zdG9wKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSm91cm5leSwgW3tcbiAgICBrZXk6IFwic3RhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0aW9uKG1pbGxpc2Vjb25kKSB7XG4gICAgICB2YXIgcHJvcHMgPSB7fTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBwcm9wcy5wcmV2aW91c1N0b3AgPSB0aGlzLnN0YXRpb25zW3RoaXMuc3RhdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhdGlvbnMucHVzaChtaWxsaXNlY29uZCk7IC8vIGhlbHBlci5sb2coYENBUFNVTEUgcGFzc2VzIGFzIHByZXZpb3VzU3RvcDogJHtwcm9wcy5wcmV2aW91c1N0b3B9YCk7XG4gICAgICAvLyBoZWxwZXIubG9nKHRoaXMuc3RhdGlvbnMpO1xuXG4gICAgICB0aGlzLmluY2lkZW50LnBsYXlhYmxlUHJvZ3Jlc3MobWlsbGlzZWNvbmQgLyB0aGlzLmluY2lkZW50LmR1cmF0aW9uLCBtaWxsaXNlY29uZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3RpbmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3RpbmF0aW9uKCkge1xuICAgICAgdmFyIG1pbGxpc2Vjb25kID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuXG4gICAgICBpZiAobWlsbGlzZWNvbmQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnN0YXRpb24obWlsbGlzZWNvbmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWlsbGlzZWNvbmQgPSB0aGlzLnN0YXRpb25zW3RoaXMuc3RhdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5jaWRlbnQucGxheWFibGVQcm9ncmVzcyhtaWxsaXNlY29uZCAvIHRoaXMuaW5jaWRlbnQuZHVyYXRpb24sIG1pbGxpc2Vjb25kKTsgLy8gaWYgdGhlIGNsaXAgd2FzIHBsYXlpbmcgc3RhcnQgaXQgYWdhaW5cblxuICAgICAgaWYgKHRoaXMuc3RhcnRTdGF0ZSA9PT0gJ3BsYXlpbmcnIHx8IHRoaXMuc3RhcnRTdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgdGhpcy5pbmNpZGVudC5zdGF0dXNCZWZvcmVCbG9jayA9PT0gXCJwbGF5aW5nXCIpIHtcbiAgICAgICAgdGhpcy5pbmNpZGVudC5wbGF5KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobWlsbGlzZWNvbmQgPj0gdGhpcy5pbmNpZGVudC5kdXJhdGlvbikge1xuICAgICAgICAgIHRoaXMuaW5jaWRlbnQuY29tcGxldGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmluY2lkZW50LmFybSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWVtb3J5LnB1c2godGhpcy5leHBvcnRKb3VybmV5TG9nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXhwb3J0Sm91cm5leUxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHBvcnRKb3VybmV5TG9nKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnRNaWxsaXNlY29uZDogdGhpcy5zdGFydE1pbGxpc2Vjb25kLFxuICAgICAgICBzdGFydFN0YXRlOiB0aGlzLnN0YXJ0U3RhdGUsXG4gICAgICAgIHN0YXRpb25zOiB0aGlzLnN0YXRpb25zXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBKb3VybmV5O1xufSgpO1xuXG52YXIgVGltZUNhcHN1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUaW1lQ2Fwc3VsZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZUNhcHN1bGUpO1xuXG4gICAgdGhpcy5tZW1vcnkgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUaW1lQ2Fwc3VsZSwgW3tcbiAgICBrZXk6IFwic3RhcnRKb3VybmV5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0Sm91cm5leShpbmNpZGVudCkge1xuICAgICAgaWYgKCFpbmNpZGVudCkge1xuICAgICAgICBoZWxwZXIuZXJyb3IoJ3N0YXJ0Sm91cm5leSBleHBlY3RzIGFuIEluY2lkZW50IGFzIGFuIGFyZ3VtZW50Jyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBKb3VybmV5KHtcbiAgICAgICAgaW5jaWRlbnQ6IGluY2lkZW50LFxuICAgICAgICBjYWxwdWxlTWVtb3J5OiB0aGlzLm1lbW9yeVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbWVDYXBzdWxlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbWVDYXBzdWxlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction getIncidentsByChannel(pld) {\n  pld.descriptor.value = function () {\n    var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var parentMillisecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var incidentsByPlugin = {};\n    incidentsByPlugin[this.mc_plugin_npm_name] = [{\n      millisecond: adjustMillisecond,\n      parentMillisecond: parentMillisecond,\n      incident: this,\n      id: this.id\n    }];\n    return incidentsByPlugin;\n  };\n}\n\nmodule.exports = getIncidentsByChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fZGVjb3JhdG9ycy9nZXRJbmNpZGVudHNCeUNoYW5uZWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fZGVjb3JhdG9ycy9nZXRJbmNpZGVudHNCeUNoYW5uZWwuanM/NTQ2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZ2V0SW5jaWRlbnRzQnlDaGFubmVsKHBsZCkge1xuICBwbGQuZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYWRqdXN0TWlsbGlzZWNvbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgdmFyIHBhcmVudE1pbGxpc2Vjb25kID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgIHZhciBpbmNpZGVudHNCeVBsdWdpbiA9IHt9O1xuICAgIGluY2lkZW50c0J5UGx1Z2luW3RoaXMubWNfcGx1Z2luX25wbV9uYW1lXSA9IFt7XG4gICAgICBtaWxsaXNlY29uZDogYWRqdXN0TWlsbGlzZWNvbmQsXG4gICAgICBwYXJlbnRNaWxsaXNlY29uZDogcGFyZW50TWlsbGlzZWNvbmQsXG4gICAgICBpbmNpZGVudDogdGhpcyxcbiAgICAgIGlkOiB0aGlzLmlkXG4gICAgfV07XG4gICAgcmV0dXJuIGluY2lkZW50c0J5UGx1Z2luO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEluY2lkZW50c0J5Q2hhbm5lbDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_decorators/getIncidentsByChannel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/main.js":
/*!**************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/main.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar Validator = __webpack_require__(/*! fastest-validator */ \"../node_modules/fastest-validator/dist/index.min.js\");\n\nvar DescriptiveIncident = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveIncident.js\");\n\nvar DescriptiveGroup = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveGroup */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveGroup.js\");\n\nvar DescriptiveClip = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveClip */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveClip.js\");\n\nvar DescriptiveAudioClip = __webpack_require__(/*! ./DescriptiveIncidents/DescriptiveAudioClip */ \"../node_modules/@kissmybutton/motorcortex/dist/DescriptiveIncidents/DescriptiveAudioClip.js\");\n\nvar MonoIncident = __webpack_require__(/*! ./BaseClasses/MonoIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MonoIncident.js\");\n\nvar MediaPlayback = __webpack_require__(/*! ./BaseClasses/MediaPlayIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/BaseClasses/MediaPlayIncident.js\");\n\nvar AudioPlaybackChannel = __webpack_require__(/*! ./Channels/Media/AudioPlaybackChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Media/AudioPlaybackChannel.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./Clip/ExtendableClip */ \"../node_modules/@kissmybutton/motorcortex/dist/Clip/ExtendableClip.js\");\n\nvar AttributeChannel = __webpack_require__(/*! ./Channels/Attribute/AttributeChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/Channels/Attribute/AttributeChannel.js\");\n\nvar TimeCapsule = __webpack_require__(/*! ./_coreUtils/TimeCapsule */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\");\n\nvar Helper = __webpack_require__(/*! ./_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\n\nvar helper = new Helper({\n  logLevel: 0\n});\n\nvar checkPlugin = function checkPlugin(main) {\n  if (Object.prototype.hasOwnProperty.call(main, \"default\")) {\n    main = main[\"default\"];\n  }\n\n  var plugin_name = main.npm_name;\n  var check = true;\n\n  if (!Object.prototype.hasOwnProperty.call(main, \"name\")) {\n    helper.error(\"Warning on plugin \".concat(plugin_name, \". A plugin is always good to have its name on\\n        its main.js file, under the key \\\"name\\\". It's missing from this plugin\"));\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(main, \"incidents\")) {\n    helper.error(\"Error on plugin \".concat(plugin_name, \". A plugin must expose at least one Incident.\\n        Exposed plugin Incidents should be defined on the \\\"incidents\\\" key of the main.js file.\"));\n    check = false;\n  }\n\n  if (!helper.isArray(main.incidents)) {\n    helper.error(\"Error on plugin \".concat(plugin_name, \". thePlugin exposed Incidents are defined on the \\\"incidents\\\" key of the main.js file in array format.\\n        Please refer to the documentation\"));\n    check = false;\n  } else {\n    for (var i = 0; i < main.incidents.length; i++) {\n      var exposedIncidentDefinition = main.incidents[i];\n\n      if (_typeof(exposedIncidentDefinition.exportable) === \"object\") {\n        if (Object.prototype.hasOwnProperty.call(exposedIncidentDefinition.exportable, \"default\")) {\n          exposedIncidentDefinition.exportable = exposedIncidentDefinition.exportable[\"default\"];\n        }\n      }\n\n      if (!(exposedIncidentDefinition.exportable.prototype instanceof DescriptiveGroup) && !(exposedIncidentDefinition.exportable.prototype instanceof DescriptiveClip) && !(exposedIncidentDefinition.exportable.prototype instanceof MonoIncident) && !(exposedIncidentDefinition.exportable.prototype instanceof MediaPlayback)) {\n        helper.error(\"Error on plugin \".concat(plugin_name, \". Exportable Incidents by any plugin must extend one of the base classes provided by MotorCortex.\\n                \").concat(exposedIncidentDefinition.exportable.constructor.name, \" doesn't.\\n                Please refer to documentation\"));\n        check = false;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(exposedIncidentDefinition, \"name\")) {\n        helper.error(\"Error on plugin \".concat(plugin_name, \". Exportable Incidents by any plugin must have the \\\"name\\\" key which defines the name of the exported Incident.\\n                Please refer to documentation\"));\n        check = false;\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(exposedIncidentDefinition, \"propTypes\")) {\n        helper.log(\"Warning on plugin \".concat(plugin_name, \".\\n                It's always good for plugins to define the supported propTypes of their exposed Incidents' supported properties.\\n                \").concat(exposedIncidentDefinition.exportable.constructor.name, \" doesn't.\\n                Please refer to documentation\"), 'warning');\n      }\n    }\n  }\n\n  return check;\n}; // plugin_name is the unique name of the plugin\n\n\nfunction loadPlugin(plugin) {\n  if (Object.prototype.hasOwnProperty.call(plugin, \"default\")) {\n    plugin = plugin[\"default\"];\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(plugin, \"npm_name\")) {\n    plugin.npm_name = \"plugin_\".concat(new Date().getTime());\n  }\n\n  if (!checkPlugin(plugin)) {\n    return false;\n  } else {\n    // thePlugin is the plugin object which will hold on its keys\n    // the names of the exposed Incidents of its. The keys of this object\n    // are going to be identical with the names of the classes exposed\n    var thePlugin = {};\n\n    if (Object.prototype.hasOwnProperty.call(plugin, \"Clip\")) {\n      var _class, _temp;\n\n      var DynamicDescriptiveClip = (_temp = _class =\n      /*#__PURE__*/\n      function (_DescriptiveClip) {\n        _inherits(DynamicDescriptiveClip, _DescriptiveClip);\n\n        function DynamicDescriptiveClip() {\n          _classCallCheck(this, DynamicDescriptiveClip);\n\n          return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveClip).apply(this, arguments));\n        }\n\n        return DynamicDescriptiveClip;\n      }(DescriptiveClip), _defineProperty(_class, \"Incident\", plugin.Clip), _defineProperty(_class, \"audio\", plugin.audio ? \"only\" : \"off\"), _temp);\n      thePlugin.Clip = DynamicDescriptiveClip;\n    } // if the plugin definition has compositeAttributes then we dynamically\n    // create a new Channel class extending AttributeChannel setting the\n    // composite Attributes on the fly. We can then use this Channel class\n    // for all Incidents exposed by the plugin\n\n\n    var AttributeChannelToUse = AttributeChannel;\n\n    if (Object.prototype.hasOwnProperty.call(plugin, \"compositeAttributes\")) {\n      AttributeChannelToUse =\n      /*#__PURE__*/\n      function (_AttributeChannel) {\n        _inherits(AttributeChannelToUse, _AttributeChannel);\n\n        function AttributeChannelToUse(props) {\n          _classCallCheck(this, AttributeChannelToUse);\n\n          props.comboAttributes = plugin.compositeAttributes;\n          return _possibleConstructorReturn(this, _getPrototypeOf(AttributeChannelToUse).call(this, props));\n        }\n\n        return AttributeChannelToUse;\n      }(AttributeChannel);\n    } // for each of the exposed Incidents\n\n\n    var _loop = function _loop(i) {\n      var incidentClass = plugin.incidents[i].exportable;\n      var DynamicDescriptiveIncident = void 0; // the exportable Incident can be either a Clip, a Compo or an Incident\n      // if it is an Incident\n\n      if (incidentClass.prototype instanceof MonoIncident) {\n        var _class2, _temp2;\n\n        DynamicDescriptiveIncident = (_temp2 = _class2 =\n        /*#__PURE__*/\n        function (_DescriptiveIncident) {\n          _inherits(DynamicDescriptiveIncident, _DescriptiveIncident);\n\n          function DynamicDescriptiveIncident() {\n            _classCallCheck(this, DynamicDescriptiveIncident);\n\n            return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n          }\n\n          return DynamicDescriptiveIncident;\n        }(DescriptiveIncident), _defineProperty(_class2, \"Incident\", incidentClass), _defineProperty(_class2, \"plugin_npm_name\", plugin.npm_name), _defineProperty(_class2, \"plugin\", plugin.name), _defineProperty(_class2, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class2, \"Channel\", AttributeChannelToUse), _defineProperty(_class2, \"audio\", plugin.audio ? \"only\" : \"off\"), _temp2);\n      } // if it is an Incident\n      else if (incidentClass.prototype instanceof MediaPlayback) {\n          var _class3, _temp3;\n\n          DynamicDescriptiveIncident = (_temp3 = _class3 =\n          /*#__PURE__*/\n          function (_DescriptiveIncident2) {\n            _inherits(DynamicDescriptiveIncident, _DescriptiveIncident2);\n\n            function DynamicDescriptiveIncident() {\n              _classCallCheck(this, DynamicDescriptiveIncident);\n\n              return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n            }\n\n            return DynamicDescriptiveIncident;\n          }(DescriptiveIncident), _defineProperty(_class3, \"Incident\", incidentClass), _defineProperty(_class3, \"plugin_npm_name\", '@kissmybutton/media-playback'), _defineProperty(_class3, \"plugin\", plugin.name), _defineProperty(_class3, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class3, \"Channel\", plugin.audio ? AudioPlaybackChannel : null), _defineProperty(_class3, \"audio\", plugin.audio ? \"only\" : \"off\"), _temp3);\n        } // else if it is a Clip\n        else if (incidentClass.prototype instanceof DescriptiveClip) {\n            var _class4, _temp4;\n\n            DynamicDescriptiveIncident = (_temp4 = _class4 =\n            /*#__PURE__*/\n            function (_incidentClass) {\n              _inherits(DynamicDescriptiveIncident, _incidentClass);\n\n              function DynamicDescriptiveIncident() {\n                _classCallCheck(this, DynamicDescriptiveIncident);\n\n                return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n              }\n\n              return DynamicDescriptiveIncident;\n            }(incidentClass), _defineProperty(_class4, \"plugin\", plugin.name), _defineProperty(_class4, \"ClassName\", plugin.incidents[i].name), _defineProperty(_class4, \"audio\", plugin.audio ? \"only\" : \"on\"), _temp4);\n          } else if (incidentClass.prototype instanceof DescriptiveGroup) {\n            var _class5, _temp5;\n\n            DynamicDescriptiveIncident = (_temp5 = _class5 =\n            /*#__PURE__*/\n            function (_incidentClass2) {\n              _inherits(DynamicDescriptiveIncident, _incidentClass2);\n\n              function DynamicDescriptiveIncident() {\n                _classCallCheck(this, DynamicDescriptiveIncident);\n\n                return _possibleConstructorReturn(this, _getPrototypeOf(DynamicDescriptiveIncident).apply(this, arguments));\n              }\n\n              return DynamicDescriptiveIncident;\n            }(incidentClass), _defineProperty(_class5, \"plugin\", plugin.name), _defineProperty(_class5, \"ClassName\", plugin.incidents[i].name), _temp5);\n          }\n\n      Object.defineProperty(thePlugin, plugin.incidents[i].name, {\n        get: function get() {\n          // the getter will construct a wrapper class which on the constructor will instantiate an object of the\n          // exposed class, set to it the plugin name and channel class parameters and return\n          // it from the constructor\n          var WrapperClass = function WrapperClass(attrs, props) {\n            _classCallCheck(this, WrapperClass);\n\n            var instantiatedIncident = new DynamicDescriptiveIncident(attrs, props);\n\n            if (Object.prototype.hasOwnProperty.call(plugin.incidents[i], \"attributesValidationRules\")) {\n              var v = new Validator();\n              var validationResult = v.validate(attrs, plugin.incidents[i].attributesValidationRules);\n\n              if (validationResult.length > 0) {\n                return {\n                  result: false,\n                  errors: validationResult\n                };\n              }\n            } else {\n              helper.warning(\"It's always good to provide attributesValidationRules to the exported incidents. \".concat(plugin.npm_name, \".\").concat(instantiatedIncident.constructor.name, \" doesn't provide it\"));\n            }\n\n            return instantiatedIncident;\n          };\n\n          return WrapperClass;\n        }\n      });\n    };\n\n    for (var i = 0; i < plugin.incidents.length; i++) {\n      _loop(i);\n    }\n\n    return thePlugin;\n  }\n}\n\nvar audioPluginMain = __webpack_require__(/*! ./Audio/main */ \"../node_modules/@kissmybutton/motorcortex/dist/Audio/main.js\");\n\nvar AudioPlugin = loadPlugin(audioPluginMain);\nmodule.exports = {\n  API: {\n    MonoIncident: MonoIncident,\n    Group: DescriptiveGroup,\n    Clip: DescriptiveClip,\n    AudioClip: DescriptiveAudioClip,\n    MediaPlayback: MediaPlayback,\n    ExtendableClip: ExtendableClip\n  },\n  Group: DescriptiveGroup,\n  Clip: DescriptiveClip,\n  loadPlugin: loadPlugin,\n  AudioClip: AudioPlugin.Clip,\n  AudioPlayback: AudioPlugin.AudioPlayback,\n  TimeCapsule: TimeCapsule\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/main.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = filter;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = findIndex;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = sortBy;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\n");

/***/ }),

/***/ "../node_modules/fastest-validator/dist/index.min.js":
/*!***********************************************************!*\
  !*** ../node_modules/fastest-validator/dist/index.min.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {function t(){function e(e){return\"number\"!=typeof e&&\"string\"!=typeof e?this.makeError(\"string\"):(\"string\"!=typeof e&&(e=String(e)),e=e.replace(/\\D+/g,\"\"),function(e){return function(t){for(var r=t?t.length:0,n=1,i=0;r--;)i+=(n^=1)?e[t[r]]:parseInt(t[r],10);return 0==i%10&&0<i}}([0,2,4,6,8,1,3,5,7,9])(e)||this.makeError(\"luhn\"))}function t(e){return\"string\"!=typeof e?this.makeError(\"string\"):(e=e.toLowerCase(),!!w.test(e)||this.makeError(\"mac\"))}function r(e,t){if(\"string\"!=typeof e)return this.makeError(\"string\");if(e=e.toLowerCase(),!M.test(e))return this.makeError(\"uuid\");var r=0|e.charAt(14);if(t.version&&t.version!==r)return this.makeError(\"uuidVersion\",t.version,r);switch(r){case 1:case 2:return!0;case 3:case 4:case 5:return-1!==[\"8\",\"9\",\"a\",\"b\"].indexOf(e.charAt(19))||this.makeError(\"uuid\")}}function n(e){return\"string\"!=typeof e?this.makeError(\"string\"):!!j.test(e)||this.makeError(\"url\")}function i(e,t){if(\"string\"!=typeof e)return this.makeError(\"string\");var r=e.length;return!1===t.empty&&0===r?this.makeError(\"stringEmpty\"):null!=t.min&&r<t.min?this.makeError(\"stringMin\",t.min,r):null!=t.max&&r>t.max?this.makeError(\"stringMax\",t.max,r):null!=t.length&&r!==t.length?this.makeError(\"stringLength\",t.length,r):null==t.pattern||(r=\"string\"==typeof t.pattern?new RegExp(t.pattern,t.patternFlags):t.pattern).test(e)?null!=t.contains&&-1===e.indexOf(t.contains)?this.makeError(\"stringContains\",t.contains):null!=t.enum&&-1===t.enum.indexOf(e)?this.makeError(\"stringEnum\",t.enum):!0!==t.numeric||O.test(e)?!0!==t.alpha||_.test(e)?!0!==t.alphanum||A.test(e)?!(!0===t.alphadash&&!T.test(e))||this.makeError(\"stringAlphadash\",\"An alphadash string\",e):this.makeError(\"stringAlphanum\",\"An alphanumeric string\",e):this.makeError(\"stringAlpha\",\"An alphabetic string\",e):this.makeError(\"stringNumeric\",\"A numeric string\",e):this.makeError(\"stringPattern\",r)}function a(e,t){if(\"object\"!=typeof e||null===e||Array.isArray(e))return this.makeError(\"object\");if(!0===t.strict&&t.props){t=Object.keys(t.props);var r=[];e=Object.keys(e);for(var n=0;n<e.length;n++)-1===t.indexOf(e[n])&&r.push(e[n]);if(0!==r.length)return this.makeError(\"objectStrict\",void 0,r.join(\", \"))}return!0}function o(e,t){return!0===t.convert&&\"number\"!=typeof e&&(e=Number(e)),\"number\"!=typeof e||isNaN(e)||!isFinite(e)?this.makeError(\"number\"):null!=t.min&&e<t.min?this.makeError(\"numberMin\",t.min,e):null!=t.max&&e>t.max?this.makeError(\"numberMax\",t.max,e):null!=t.equal&&e!==t.equal?this.makeError(\"numberEqual\",t.equal,e):null!=t.notEqual&&e===t.notEqual?this.makeError(\"numberNotEqual\",t.notEqual):!0===t.integer&&0!=e%1?this.makeError(\"numberInteger\",e):!0===t.positive&&0>=e?this.makeError(\"numberPositive\",e):!(!0===t.negative&&0<=e)||this.makeError(\"numberNegative\",e)}function s(e){return\"function\"==typeof e||this.makeError(\"function\")}function u(e){return null===e||void 0===e||this.makeError(\"forbidden\")}function l(e,t){return null==t.values||-1!==t.values.indexOf(e)||this.makeError(\"enumValue\",t.values,e)}function f(e,t){return\"string\"!=typeof e?this.makeError(\"string\"):!!(\"precise\"==t.mode?S:x).test(e)||this.makeError(\"email\")}function c(e,t){return!0!==t.convert||e instanceof Date||(e=new Date(e)),e instanceof Date&&!isNaN(e.getTime())||this.makeError(\"date\")}function h(e,t){return t.check.call(this,e,t)}function p(e,t){return!0===t.convert&&\"boolean\"!=typeof e&&(1===e||0===e||\"true\"===e||\"false\"===e||\"1\"===e||\"0\"===e||\"on\"===e||\"off\"===e)||(\"boolean\"==typeof e||this.makeError(\"boolean\"))}function m(e,t){if(!Array.isArray(e))return this.makeError(\"array\");var r=e.length;if(!1===t.empty&&0===r)return this.makeError(\"arrayEmpty\");if(null!=t.min&&r<t.min)return this.makeError(\"arrayMin\",t.min,r);if(null!=t.max&&r>t.max)return this.makeError(\"arrayMax\",t.max,r);if(null!=t.length&&r!==t.length)return this.makeError(\"arrayLength\",t.length,r);if(null!=t.contains&&-1===e.indexOf(t.contains))return this.makeError(\"arrayContains\",t.contains);if(null!=t.enum)for(r=0;r<e.length;r++)if(-1===t.enum.indexOf(e[r]))return this.makeError(\"arrayEnum\",e[r],t.enum);return!0}function d(){return!0}function y(e,t){t=t||[];for(var r=0;r<e.length;++r)Array.isArray(e[r])?y(e[r],t):t.push(e[r]);return t}function g(e,t){for(var r in t)\"object\"==typeof t[r]&&null!==t[r]?(e[r]=e[r]||{},g(e[r],t[r])):e[r]=t[r];return e}function b(e){return e.replace(R,function(e){switch(e){case'\"':case\"'\":case\"\\\\\":return\"\\\\\"+e;case\"\\n\":return\"\\\\n\";case\"\\r\":return\"\\\\r\";case\"\\u2028\":return\"\\\\u2028\";case\"\\u2029\":return\"\\\\u2029\"}})}function v(y){this.opts={messages:E({},k)},y&&E(this.opts,y),this.messages=this.opts.messages,this.messageKeys=Object.keys(this.messages),this.rules={any:d,array:m,boolean:p,custom:h,date:c,email:f,enum:l,forbidden:u,function:s,number:o,object:a,string:i,url:n,uuid:r,mac:t,luhn:e},this.cache=new Map}var E=g,k={required:\"The '{field}' field is required!\",string:\"The '{field}' field must be a string!\",stringEmpty:\"The '{field}' field must not be empty!\",stringMin:\"The '{field}' field length must be greater than or equal to {expected} characters long!\",stringMax:\"The '{field}' field length must be less than or equal to {expected} characters long!\",stringLength:\"The '{field}' field length must be {expected} characters long!\",stringPattern:\"The '{field}' field fails to match the required pattern!\",stringContains:\"The '{field}' field must contain the '{expected}' text!\",stringEnum:\"The '{field}' field does not match any of the allowed values!\",stringNumeric:\"The '{field}' field must be a numeric string\",stringAlpha:\"The '{field}' field must be an alphabetic string\",stringAlphanum:\"The '{field}' field must be an alphanumeric string\",stringAlphadash:\"The '{field}' field must be an alphadash string\",number:\"The '{field}' field must be a number!\",numberMin:\"The '{field}' field must be greater than or equal to {expected}!\",numberMax:\"The '{field}' field must be less than or equal to {expected}!\",numberEqual:\"The '{field}' field must be equal with {expected}!\",numberNotEqual:\"The '{field}' field can't be equal with {expected}!\",numberInteger:\"The '{field}' field must be an integer!\",numberPositive:\"The '{field}' field must be a positive number!\",numberNegative:\"The '{field}' field must be a negative number!\",array:\"The '{field}' field must be an array!\",arrayEmpty:\"The '{field}' field must not be an empty array!\",arrayMin:\"The '{field}' field must contain at least {expected} items!\",arrayMax:\"The '{field}' field must contain less than or equal to {expected} items!\",arrayLength:\"The '{field}' field must contain {expected} items!\",arrayContains:\"The '{field}' field must contain the '{expected}' item!\",arrayEnum:\"The '{field} field value '{expected}' does not match any of the allowed values!\",boolean:\"The '{field}' field must be a boolean!\",function:\"The '{field}' field must be a function!\",date:\"The '{field}' field must be a Date!\",dateMin:\"The '{field}' field must be greater than or equal to {expected}!\",dateMax:\"The '{field}' field must be less than or equal to {expected}!\",forbidden:\"The '{field}' field is forbidden!\",email:\"The '{field}' field must be a valid e-mail!\",url:\"The '{field}' field must be a valid URL!\",enumValue:\"The '{field} field value '{expected}' does not match any of the allowed values!\",object:\"The '{field}' must be an Object!\",objectStrict:\"The object '{field}' contains invalid keys: '{actual}'!\",uuid:\"The {field} field must be a valid UUID\",uuidVersion:\"The {field} field must be a valid version provided\",mac:\"The {field} field must be a valid MAC address\",luhn:\"The {field} field must be a valid checksum luhn\"},S=/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,x=/^\\S+@\\S+\\.\\S+$/,O=/^-?[0-9]\\d*(\\.\\d+)?$/,_=/^[a-zA-Z]+$/,A=/^[a-zA-Z0-9]+$/,T=/^[a-zA-Z0-9_-]+$/,j=/^https?:\\/\\/\\S+/,M=/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i,w=/^((([a-f0-9][a-f0-9]+[-]){5}|([a-f0-9][a-f0-9]+[:]){5})([a-f0-9][a-f0-9])$)|(^([a-f0-9][a-f0-9][a-f0-9][a-f0-9]+[.]){2}([a-f0-9][a-f0-9][a-f0-9][a-f0-9]))$/i,P=/^[_$a-zA-Z][_$a-zA-Z0-9]*$/,R=/[\"'\\\\\\n\\r\\u2028\\u2029]/g;return v.prototype.validate=function(e,t){return this.compile(t)(e)},v.prototype.compile=function(e){var t=this;if(Array.isArray(e)){if(0==e.length)throw Error(\"If the schema is an Array, must contain at least one element!\");var r=this.compileSchemaType(e);return this.cache.clear(),function(e,n,i){return t.checkSchemaType(e,r,n,i||null)}}var n=this.compileSchemaObject(e);return this.cache.clear(),function(e,r,i){return t.checkSchemaObject(e,n,r,i||null)}},v.prototype.compileSchemaObject=function(e){var t=this;if(null===e||\"object\"!=typeof e||Array.isArray(e))throw Error(\"Invalid schema!\");var r=this.cache.get(e);if(r)return r.cycle=!0,r;r={cycle:!1,properties:null,compiledObjectFunction:null,objectStack:[]},this.cache.set(e,r),r.properties=Object.keys(e).filter(function(e){return\"$$strict\"!==e}).map(function(r){return{name:r,compiledType:t.compileSchemaType(e[r])}});var n=[];n.push(\"let res;\"),n.push(\"let propertyPath;\"),n.push(\"const errors = [];\"),!0===e.$$strict&&n.push(\"const givenProps = new Map(Object.keys(value).map(key => [key, true]));\");for(var i=0;i<r.properties.length;i++){var a=r.properties[i],o=b(a.name),s=P.test(o)?\"value.\"+o:'value[\"'+o+'\"]';n.push('propertyPath = (path !== undefined ? path + \".'+o+'\" : \"'+o+'\");'),Array.isArray(a.compiledType)?n.push(\"res = this.checkSchemaType(\"+s+\", properties[\"+i+\"].compiledType, propertyPath, value);\"):n.push(\"res = this.checkSchemaRule(\"+s+\", properties[\"+i+\"].compiledType, propertyPath, value);\"),n.push(\"if (res !== true) {\"),n.push(\"\\tthis.handleResult(errors, propertyPath, res, properties[\"+i+\"].compiledType.messages);\"),n.push(\"}\"),!0===e.$$strict&&n.push('givenProps.delete(\"'+o+'\");')}return!0===e.$$strict&&(n.push(\"if (givenProps.size !== 0) {\"),n.push(\"\\tthis.handleResult(errors, path || 'rootObject', this.makeError('objectStrict', undefined, [...givenProps.keys()].join(', ')), this.messages);\"),n.push(\"}\")),n.push(\"return errors.length === 0 ? true : errors;\"),r.compiledObjectFunction=new Function(\"value\",\"properties\",\"path\",\"parent\",n.join(\"\\n\")),r},v.prototype.compileSchemaType=function(e){var t=this;return Array.isArray(e)?(e=y(e.map(function(e){return t.compileSchemaType(e)})),1==e.length?e[0]:e):this.compileSchemaRule(e)},v.prototype.compileMessages=function(e){return e.messages?Object.assign({},this.messages,e.messages):this.messages},v.prototype.compileSchemaRule=function(e){\"string\"==typeof e&&(e={type:e});var t=this.rules[e.type];if(!t)throw Error(\"Invalid '\"+e.type+\"' type in validator schema!\");var r=this.compileMessages(e),n=null,i=null;return\"object\"===e.type&&e.props?(n=this.compileSchemaObject(e.props),i=this.checkSchemaObject):\"array\"===e.type&&e.items&&(n=this.compileSchemaType(e.items),i=this.checkSchemaArray),{messages:r,schemaRule:e,ruleFunction:t,dataFunction:i,dataParameter:n}},v.prototype.checkSchemaObject=function(e,t,r,n){return t.cycle?-1!==t.objectStack.indexOf(e)||(t.objectStack.push(e),e=this.checkSchemaObjectInner(e,t,r,n),t.objectStack.pop(),e):this.checkSchemaObjectInner(e,t,r,n)},v.prototype.checkSchemaObjectInner=function(e,t,r,n){return t.compiledObjectFunction.call(this,e,t.properties,r,n)},v.prototype.checkSchemaType=function(e,t,r,n){if(Array.isArray(t)){for(var i=[],a=t.length,o=0;o<a;o++){var s=this.checkSchemaRule(e,t[o],r,n);if(!0===s)return!0;this.handleResult(i,r,s,t.messages)}return i}return this.checkSchemaRule(e,t,r,n)},v.prototype.checkSchemaArray=function(e,t,r,n){for(var i=[],a=e.length,o=0;o<a;o++){var s=(void 0!==r?r:\"\")+\"[\"+o+\"]\",u=this.checkSchemaType(e[o],t,s,e,n);!0!==u&&this.handleResult(i,s,u,t.messages)}return 0===i.length||i},v.prototype.checkSchemaRule=function(e,t,r,n){var i=t.schemaRule;return void 0===e||null===e?\"forbidden\"===i.type||!0===i.optional||(e=[],this.handleResult(e,r,this.makeError(\"required\"),t.messages),e):(i=t.ruleFunction.call(this,e,i,r,n),!0!==i?(e=[],this.handleResult(e,r,i,t.messages),e):null===t.dataFunction||t.dataFunction.call(this,e,t.dataParameter,r,n))},v.prototype.handleResult=function(e,t,r,n){var i=this;(Array.isArray(r)?r:[r]).forEach(function(r){r.field||(r.field=t),r.message||(r.message=i.resolveMessage(r,n[r.type])),e.push(r)})},v.prototype.makeError=function(e,t,r){return{type:e,expected:t,actual:r}},v.prototype.resolveMessage=function(e,t){if(void 0===t&&(t=null),null!=t){var r=null!=e.expected?e.expected:\"\",n=null!=e.actual?e.actual:\"\";return t.replace(/\\{field\\}/g,e.field).replace(/\\{expected\\}/g,r).replace(/\\{actual\\}/g,n)}},v.prototype.add=function(e,t){this.rules[e]=t},v}var f=f||{};f.scope={},f.ASSUME_ES5=!1,f.ASSUME_NO_NATIVE_MAP=!1,f.ASSUME_NO_NATIVE_SET=!1,f.defineProperty=f.ASSUME_ES5||\"function\"==typeof Object.defineProperties?Object.defineProperty:function(e,t,r){e!=Array.prototype&&e!=Object.prototype&&(e[t]=r.value)},f.getGlobal=function(e){return\"undefined\"!=typeof window&&window===e?e:\"undefined\"!=typeof global&&null!=global?global:e},f.global=f.getGlobal(this),f.SYMBOL_PREFIX=\"jscomp_symbol_\",f.initSymbol=function(){f.initSymbol=function(){},f.global.Symbol||(f.global.Symbol=f.Symbol)},f.Symbol=function(){var e=0;return function(t){return f.SYMBOL_PREFIX+(t||\"\")+e++}}(),f.initSymbolIterator=function(){f.initSymbol();var e=f.global.Symbol.iterator;e||(e=f.global.Symbol.iterator=f.global.Symbol(\"iterator\")),\"function\"!=typeof Array.prototype[e]&&f.defineProperty(Array.prototype,e,{configurable:!0,writable:!0,value:function(){return f.arrayIterator(this)}}),f.initSymbolIterator=function(){}},f.arrayIterator=function(e){var t=0;return f.iteratorPrototype(function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}})},f.iteratorPrototype=function(e){return f.initSymbolIterator(),e={next:e},e[f.global.Symbol.iterator]=function(){return this},e},f.iteratorFromArray=function(e,t){f.initSymbolIterator(),e instanceof String&&(e+=\"\");var r=0,n={next:function(){if(r<e.length){var i=r++;return{value:t(i,e[i]),done:!1}}return n.next=function(){return{done:!0,value:void 0}},n.next()}};return n[Symbol.iterator]=function(){return n},n},f.polyfill=function(e,t){if(t){var r=f.global;e=e.split(\".\");for(var n=0;n<e.length-1;n++){var i=e[n];i in r||(r[i]={}),r=r[i]}(t=t(n=r[e=e[e.length-1]]))!=n&&null!=t&&f.defineProperty(r,e,{configurable:!0,writable:!0,value:t})}},f.polyfill(\"Array.prototype.keys\",function(e){return e||function(){return f.iteratorFromArray(this,function(e){return e})}},\"es6\",\"es3\"),f.checkEs6ConformanceViaProxy=function(){try{var e={},t=Object.create(new f.global.Proxy(e,{get:function(r,n,i){return r==e&&\"q\"==n&&i==t}}));return!0===t.q}catch(e){return!1}},f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS=!1,f.ES6_CONFORMANCE=f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS&&f.checkEs6ConformanceViaProxy(),f.makeIterator=function(e){f.initSymbolIterator();var t=e[Symbol.iterator];return t?t.call(e):f.arrayIterator(e)},f.owns=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},f.polyfill(\"WeakMap\",function(e){function t(e){if(this.id_=(a+=Math.random()+1).toString(),e){f.initSymbol(),f.initSymbolIterator(),e=f.makeIterator(e);for(var t;!(t=e.next()).done;)t=t.value,this.set(t[0],t[1])}}function r(e){f.owns(e,i)||f.defineProperty(e,i,{value:{}})}function n(e){var t=Object[e];t&&(Object[e]=function(e){return r(e),t(e)})}if(f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(e&&f.ES6_CONFORMANCE)return e}else if(function(){if(!e||!Object.seal)return!1;try{var t=Object.seal({}),r=Object.seal({}),n=new e([[t,2],[r,3]]);return 2==n.get(t)&&3==n.get(r)&&(n.delete(t),n.set(r,4),!n.has(t)&&4==n.get(r))}catch(e){return!1}}())return e;var i=\"$jscomp_hidden_\"+Math.random();n(\"freeze\"),n(\"preventExtensions\"),n(\"seal\");var a=0;return t.prototype.set=function(e,t){if(r(e),!f.owns(e,i))throw Error(\"WeakMap key fail: \"+e);return e[i][this.id_]=t,this},t.prototype.get=function(e){return f.owns(e,i)?e[i][this.id_]:void 0},t.prototype.has=function(e){return f.owns(e,i)&&f.owns(e[i],this.id_)},t.prototype.delete=function(e){return!(!f.owns(e,i)||!f.owns(e[i],this.id_))&&delete e[i][this.id_]},t},\"es6\",\"es3\"),f.MapEntry=function(){},f.polyfill(\"Map\",function(e){function t(){var e={};return e.previous=e.next=e.head=e}function r(e,t){var r=e.head_;return f.iteratorPrototype(function(){if(r){for(;r.head!=e.head_;)r=r.previous;for(;r.next!=r.head;)return r=r.next,{done:!1,value:t(r)};r=null}return{done:!0,value:void 0}})}function n(e,t){var r=t&&typeof t;\"object\"==r||\"function\"==r?a.has(t)?r=a.get(t):(r=\"\"+ ++o,a.set(t,r)):r=\"p_\"+t;var n=e.data_[r];if(n&&f.owns(e.data_,r))for(e=0;e<n.length;e++){var i=n[e];if(t!==t&&i.key!==i.key||t===i.key)return{id:r,list:n,index:e,entry:i}}return{id:r,list:n,index:-1,entry:void 0}}function i(e){if(this.data_={},this.head_=t(),this.size=0,e){e=f.makeIterator(e);for(var r;!(r=e.next()).done;)r=r.value,this.set(r[0],r[1])}}if(f.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(e&&f.ES6_CONFORMANCE)return e}else if(function(){if(f.ASSUME_NO_NATIVE_MAP||!e||\"function\"!=typeof e||!e.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var t=Object.seal({x:4}),r=new e(f.makeIterator([[t,\"s\"]]));if(\"s\"!=r.get(t)||1!=r.size||r.get({x:4})||r.set({x:4},\"t\")!=r||2!=r.size)return!1;var n=r.entries(),i=n.next();return!i.done&&i.value[0]==t&&\"s\"==i.value[1]&&!((i=n.next()).done||4!=i.value[0].x||\"t\"!=i.value[1]||!n.next().done)}catch(e){return!1}}())return e;f.initSymbol(),f.initSymbolIterator();var a=new WeakMap;i.prototype.set=function(e,t){var r=n(this,e);return r.list||(r.list=this.data_[r.id]=[]),r.entry?r.entry.value=t:(r.entry={next:this.head_,previous:this.head_.previous,head:this.head_,key:e,value:t},r.list.push(r.entry),this.head_.previous.next=r.entry,this.head_.previous=r.entry,this.size++),this},i.prototype.delete=function(e){return!(!(e=n(this,e)).entry||!e.list)&&(e.list.splice(e.index,1),e.list.length||delete this.data_[e.id],e.entry.previous.next=e.entry.next,e.entry.next.previous=e.entry.previous,e.entry.head=null,this.size--,!0)},i.prototype.clear=function(){this.data_={},this.head_=this.head_.previous=t(),this.size=0},i.prototype.has=function(e){return!!n(this,e).entry},i.prototype.get=function(e){return(e=n(this,e).entry)&&e.value},i.prototype.entries=function(){return r(this,function(e){return[e.key,e.value]})},i.prototype.keys=function(){return r(this,function(e){return e.key})},i.prototype.values=function(){return r(this,function(e){return e.value})},i.prototype.forEach=function(e,t){for(var r,n=this.entries();!(r=n.next()).done;)r=r.value,e.call(t,r[1],r[0],this)},i.prototype[Symbol.iterator]=i.prototype.entries;var o=0;return i},\"es6\",\"es3\"),f.assign=\"function\"==typeof Object.assign?Object.assign:function(e,t){for(var r=1;r<arguments.length;r++){var n=arguments[r];if(n)for(var i in n)f.owns(n,i)&&(e[i]=n[i])}return e},f.polyfill(\"Object.assign\",function(e){return e||f.assign},\"es6\",\"es3\");var r=this; true?module.exports=t():undefined;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/fastest-validator/dist/index.min.js\n");

/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanM/YTQyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "../node_modules/webpack/buildin/module.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/module.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanM/NDY4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "../src/Player.js":
/*!************************!*\
  !*** ../src/Player.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar timeCapsule = new MC.TimeCapsule();\n\nvar _require = __webpack_require__(/*! ./helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    eltag = _require.eltag,\n    elcreate = _require.elcreate;\n\nvar svg = __webpack_require__(/*! ./html/svg */ \"../src/html/svg.js\");\n\nvar config = __webpack_require__(/*! ./config */ \"../src/config.js\");\n\nvar confStyle = __webpack_require__(/*! ./html/style */ \"../src/html/style.js\");\n\nvar confThemes = __webpack_require__(/*! ./html/themes */ \"../src/html/themes.js\");\n\nvar setElements = __webpack_require__(/*! ./html/setElements */ \"../src/html/setElements.js\");\n\nvar volumeListener = __webpack_require__(/*! ./listeners/volume */ \"../src/listeners/volume.js\");\n\nvar loopBarStartListener = __webpack_require__(/*! ./listeners/loopBarStart */ \"../src/listeners/loopBarStart.js\");\n\nvar loopBarEndListener = __webpack_require__(/*! ./listeners/loopBarEnd */ \"../src/listeners/loopBarEnd.js\");\n\nvar loopStartEndListener = __webpack_require__(/*! ./listeners/loopStartEnd */ \"../src/listeners/loopStartEnd.js\");\n\nvar progressBarListener = __webpack_require__(/*! ./listeners/progressBar */ \"../src/listeners/progressBar.js\");\n\nvar statusBtnListener = __webpack_require__(/*! ./listeners/statusBtn */ \"../src/listeners/statusBtn.js\");\n\nvar settingsListener = __webpack_require__(/*! ./listeners/settings */ \"../src/listeners/settings.js\");\n\nvar speedListener = __webpack_require__(/*! ./listeners/speed */ \"../src/listeners/speed.js\");\n\nvar loopBtnListener = __webpack_require__(/*! ./listeners/loopBtn */ \"../src/listeners/loopBtn.js\");\n\nvar controlsListener = __webpack_require__(/*! ./listeners/controls */ \"../src/listeners/controls.js\");\n\nvar fullscreenListener = __webpack_require__(/*! ./listeners/fullscreen */ \"../src/listeners/fullscreen.js\");\n\nvar donkeyclipListener = __webpack_require__(/*! ./listeners/donkeyclip */ \"../src/listeners/donkeyclip.js\");\n\nvar previewListener = __webpack_require__(/*! ./listeners/preview */ \"../src/listeners/preview.js\");\n\nvar bodyListener = __webpack_require__(/*! ./listeners/body */ \"../src/listeners/body.js\");\n/**\n * @classdesc\n * Timer's purpose is to provide an interface through which any TimedIncident\n * (such as a Scene or a Clip) can both privide info regarding their timing\n * state but also provide an interface for interacting/altering the timing of it\n */\n\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  function Player(options) {\n    var _this = this;\n\n    _classCallCheck(this, Player);\n\n    // set defaults\n    options.id = options.id || Date.now();\n    options.preview = options.preview || false;\n    options.showVolume = options.showVolume || false;\n    options.theme = options.theme || \"transparent on-top\";\n    options.host = options.host || options.clip.props.host;\n    options.buttons = options.buttons || {};\n\n    if (options.pointerEvents === undefined || options.pointerEvents === null) {\n      options.pointerEvents = true;\n    } else {\n      options.pointerEvents = Boolean(options.pointerEvents);\n    }\n\n    options.onMillisecondChange = options.onMillisecondChange || null;\n    options.speedValues = options.speedValues || [-4, -2, -1, -0.5, 0, 0.5, 1, 2, 4]; // remove strings\n\n    for (var i in options.speedValues) {\n      if (!isFinite(options.speedValues[i])) {\n        options.speedValues.splice(i, 1);\n      }\n    }\n\n    options.speedValues.sort(function (a, b) {\n      return a - b;\n    });\n    this.className = config.name;\n    config.playerName = options.id;\n    this.options = options;\n    this.id = this.options.id;\n    this.name = config.name;\n    this.previewClip = null;\n    this.clip = options.clip; // host to apply the timer\n\n    this.clipClass = options.clipClass;\n    this.state = this.clip.runTimeInfo.state;\n    this.listeners = {};\n    this.previewScale = 0.25;\n    this.settings = {\n      volume: 1,\n      journey: null,\n      previousVolume: 1,\n      volumeMute: false,\n      needsUpdate: true,\n      resizeLoop: false,\n      loopJourney: false,\n      previewJourney: null,\n      loopActivated: false,\n      requestingLoop: false,\n      playAfterResize: false,\n      loopStartMillisecond: 0,\n      loopLastPositionXPxls: 0,\n      loopLastPositionXPercentage: 0,\n      loopEndMillisecond: this.clip.duration\n    };\n    this.functions = {\n      millisecondChange: this.millisecondChange,\n      createJourney: this.createJourney\n    }; // create the timer controls main div\n\n    setElements(this);\n    this.setTheme();\n    this.setSpeed();\n    this.subscribeToTimer();\n    this.subscribeToDurationChange();\n    this.addEventListeners();\n\n    if (this.options.preview) {\n      this.createPreviewDisplay();\n    }\n\n    window.addEventListener(\"resize\", function () {\n      if (_this.options.preview) {\n        _this.setPreviewDimentions();\n      }\n    });\n  }\n\n  _createClass(Player, [{\n    key: \"createJourney\",\n    value: function createJourney(clip, millisecond) {\n      var _this2 = this;\n\n      var clipCommands = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      setTimeout(function () {\n        var def = null;\n        var _clipCommands$before = clipCommands.before,\n            before = _clipCommands$before === void 0 ? def : _clipCommands$before,\n            _clipCommands$after = clipCommands.after,\n            after = _clipCommands$after === void 0 ? def : _clipCommands$after;\n        before ? clip[before]() : null;\n        _this2.settings.journey = timeCapsule.startJourney(clip);\n\n        _this2.settings.journey.station(millisecond);\n\n        _this2.settings.journey.destination();\n\n        after ? clip[after]() : null;\n      }, 0);\n    }\n  }, {\n    key: \"millisecondChange\",\n    value: function millisecondChange(millisecond, state, roundTo, makeJouney) {\n      var executeOnMillisecondChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n      if (this.state !== state) {\n        this.state = state;\n        this.eventBroadcast(\"state-change\", state);\n      }\n\n      if (!this.settings.needsUpdate) {\n        this.clip.pause();\n        return 1;\n      }\n\n      var clip = this.clip;\n      var _this$settings = this.settings,\n          loopActivated = _this$settings.loopActivated,\n          loopEndMillisecond = _this$settings.loopEndMillisecond,\n          loopStartMillisecond = _this$settings.loopStartMillisecond;\n      var duration = this.clip.duration;\n      var _this$elements = this.elements,\n          totalBar = _this$elements.totalBar,\n          loopBar = _this$elements.loopBar;\n      var loopBarWidth = loopBar.offsetWidth;\n      var loopBarLeft = loopBar.offsetLeft / totalBar.offsetWidth;\n      var localMillisecond = millisecond - duration * loopBarLeft;\n      var localDuration = duration / totalBar.offsetWidth * loopBarWidth;\n\n      if (millisecond >= loopEndMillisecond && loopActivated && this.clip.speed >= 0) {\n        this.createJourney(clip, loopStartMillisecond + 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond >= loopEndMillisecond && loopActivated && this.clip.speed < 0) {\n        this.createJourney(clip, loopEndMillisecond - 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond <= loopStartMillisecond && loopActivated && this.clip.speed >= 0) {\n        this.createJourney(clip, loopStartMillisecond + 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      } else if (millisecond <= loopStartMillisecond && loopActivated && this.clip.speed < 0) {\n        this.createJourney(clip, loopEndMillisecond - 1, {\n          after: this.settings.playAfterResize || this.clip.runTimeInfo.state == \"playing\" ? \"play\" : null\n        });\n        return 1;\n      }\n\n      if (makeJouney) {\n        this.createJourney(clip, millisecond, {\n          after: this.settings.playAfterResize ? \"play\" : null\n        });\n      }\n\n      this.elements.runningBar.style.width = localMillisecond / localDuration * 100 + \"%\";\n      this.elements.currentTime.innerHTML = millisecond;\n\n      if (this.options.onMillisecondChange && executeOnMillisecondChange) {\n        this.options.onMillisecondChange(millisecond);\n      }\n    }\n  }, {\n    key: \"eventBroadcast\",\n    value: function eventBroadcast(eventName, state) {\n      if (eventName === \"state-change\") {\n        if (state === \"paused\" || state === \"idle\" || state === \"transitional\" || state === \"armed\" || state === \"blocked\") {\n          this.elements.statusButton.innerHTML = svg.playSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"\".concat(state.charAt(0).toUpperCase() + state.slice(1));\n\n          if (state === \"blocked\") {\n            this.elements.pointerEventPanel.innerHTML = \"\\n            <div style=\\\"width:100%;height:100%;background:rgba(0,0,0,0.5);display:flex;justify-content:center;align-items:center;\\\">\".concat(svg.loadingSVG, \"</div>\");\n          }\n        } else {\n          this.elements.statusButton.innerHTML = svg.pauseSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"Playing\";\n          this.elements.pointerEventPanel.innerHTML = \"\";\n\n          if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === this.clip.duration && this.clip.speed >= 0) {\n            this.createJourney(this.clip, 1, {\n              after: \"play\"\n            });\n          } else if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === 0 && this.clip.speed < 0) {\n            this.createJourney(this.clip, this.clip.duration - 1, {\n              after: \"play\"\n            });\n          } else if (state === \"playing\" && this.clip.runTimeInfo.currentMillisecond === this.clip.duration && this.clip.speed < 0) {\n            this.createJourney(this.clip, this.clip.duration - 1, {\n              after: \"play\"\n            });\n          }\n        }\n      } else if (eventName === \"duration-change\") {\n        this.elements.totalTime.innerHTML = this.clip.duration;\n        this.settings.loopEndMillisecond = this.clip.duration;\n        this.elements.pointerEventPanel.innerHTML = \"\";\n        this.millisecondChange(this.clip.runTimeInfo.currentMillisecond);\n      }\n    }\n  }, {\n    key: \"subscribeToDurationChange\",\n    value: function subscribeToDurationChange() {\n      this.clip.subscribeToDurationChange(this.id, this.eventBroadcast.bind(this));\n    }\n  }, {\n    key: \"subscribeToTimer\",\n    value: function subscribeToTimer() {\n      this.clip.subscribe(this.id, this.millisecondChange.bind(this));\n    }\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart() {\n      this.settings.needsUpdate = true;\n      this.settings.journey = timeCapsule.startJourney(this.clip);\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag(loopBarPositionX) {\n      var executeOnMillisecondChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!isFinite(loopBarPositionX)) {\n        loopBarPositionX = 0;\n      }\n\n      var duration = this.clip.duration;\n      var journey = this.settings.journey;\n      var _this$elements2 = this.elements,\n          loopBar = _this$elements2.loopBar,\n          totalBar = _this$elements2.totalBar,\n          runningBar = _this$elements2.runningBar,\n          currentTime = _this$elements2.currentTime;\n      var totalBarPositionX = loopBarPositionX + loopBar.offsetLeft;\n      var millisecond = Math.round(duration * totalBarPositionX / totalBar.offsetWidth);\n      currentTime.innerHTML = millisecond;\n      runningBar.style.width = loopBarPositionX / loopBar.offsetWidth * 100 + \"%\";\n      journey.station(millisecond);\n\n      if (this.options.onMillisecondChange && executeOnMillisecondChange) {\n        this.options.onMillisecondChange(millisecond);\n      }\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd() {\n      this.settings.journey.destination();\n    }\n  }, {\n    key: \"createProgressDrag\",\n    value: function createProgressDrag(loopBarPositionX) {\n      this.handleDragStart();\n      this.handleDrag(loopBarPositionX);\n      this.handleDragEnd();\n    }\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      loopBarEndListener(this);\n      progressBarListener(this);\n      loopBarStartListener(this);\n      loopStartEndListener(this);\n      volumeListener(this);\n      statusBtnListener(this);\n      settingsListener(this);\n      speedListener(this);\n      loopBtnListener(this);\n      controlsListener(this);\n      fullscreenListener(this);\n      donkeyclipListener(this);\n      previewListener(this);\n      bodyListener(this);\n    }\n  }, {\n    key: \"launchIntoFullscreen\",\n    value: function launchIntoFullscreen(element) {\n      if (this.options.preview) {\n        this.setPreviewDimentions();\n      }\n\n      this.elements.mcPlayer.classList.toggle(\"full-screen\");\n\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      }\n    }\n  }, {\n    key: \"exitFullscreen\",\n    value: function exitFullscreen() {\n      if (this.options.preview) {\n        this.setPreviewDimentions();\n      }\n\n      this.elements.mcPlayer.classList.toggle(\"full-screen\");\n\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      }\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme() {\n      // replace multiple spaces with one space\n      this.options.theme.replace(/\\s\\s+/g, \" \");\n      this.options.theme.trim();\n\n      if (!this.options.theme.includes(\"on-top\") && !this.options.theme.includes(\"position-default\")) {\n        this.options.theme += \" position-default\";\n      }\n\n      var theme = {};\n\n      for (var i in this.options.theme.split(\" \")) {\n        var confTheme = confThemes(this.options.theme.split(\" \")[i]);\n\n        for (var q in confTheme || {}) {\n          theme[q] = confTheme[q];\n        }\n      }\n\n      var css = confStyle(theme, this.name, this.options);\n      var style = elcreate(\"style\");\n      style.styleSheet ? style.styleSheet.cssText = css : style.appendChild(document.createTextNode(css)); // append player style to document\n\n      eltag(\"head\")[0].appendChild(style);\n    }\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed() {\n      var _this3 = this;\n\n      var currentSpeed;\n      this.clip.speed == 1 ? currentSpeed = \"Normal\" : currentSpeed = this.clip.speed;\n      this.elements.speedCurrent.innerHTML = currentSpeed;\n\n      var targetZone = function () {\n        for (var i = 0; i < _this3.options.speedValues.length - 1; i++) {\n          if (_this3.options.speedValues[i] <= _this3.clip.speed && _this3.options.speedValues[i + 1] > _this3.clip.speed) {\n            return i + Math.abs((_this3.clip.speed - _this3.options.speedValues[i]) / (_this3.options.speedValues[i] - _this3.options.speedValues[i + 1]));\n          }\n        }\n      }();\n\n      var step = 1 / (this.options.speedValues.length - 1);\n      var positionY = (targetZone * step - 1) * -1 * (this.options.speedValues.length - 1) * 16;\n      elid(\"\".concat(this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    }\n  }, {\n    key: \"calculateSpeed\",\n    value: function calculateSpeed(step, arrayOfValues, currentPercentage) {\n      var botLimitIndex = Math.floor(currentPercentage / step);\n\n      if (botLimitIndex === arrayOfValues.length - 1) {\n        return arrayOfValues[botLimitIndex].toFixed(1);\n      }\n\n      var limitZonePercentage = currentPercentage / step % 1;\n      var limitZoneLength = Math.abs(arrayOfValues[botLimitIndex] - arrayOfValues[botLimitIndex + 1]);\n      var realZoneSpeed = limitZonePercentage * limitZoneLength;\n      var realSpeed = (realZoneSpeed + arrayOfValues[botLimitIndex]).toFixed(1);\n\n      if (realSpeed == 0) {\n        return \"0.0\";\n      }\n\n      return realSpeed;\n    }\n  }, {\n    key: \"createPreviewDisplay\",\n    value: function createPreviewDisplay() {\n      this.previewClip = this.clip.paste(elid(\"\".concat(this.name, \"-hover-display\")));\n      var previewClip = elid(\"\".concat(this.name, \"-hover-display\"));\n      previewClip.style.position = \"absolute\";\n      previewClip.style.zIndex = 1;\n      this.setPreviewDimentions();\n    }\n  }, {\n    key: \"setPreviewDimentions\",\n    value: function setPreviewDimentions() {\n      var clip = this.clip.props.host;\n      var previewClip = this.previewClip.ownClip.props.host;\n      var clipWidth = clip.offsetWidth;\n      var clipHeight = clip.offsetHeight;\n      var previewWidth = clipWidth * this.previewScale; // max width is 300\n\n      if (previewWidth > 300) {\n        // previewWidth = parseFloat(\n        //   elid(`${this.name}-hover-display`).style.maxWidth\n        // );\n        previewWidth = 300;\n        this.previewScale = previewWidth / clipWidth;\n      }\n\n      elid(\"\".concat(this.name, \"-hover-display\")).style.width = clipWidth + \"px\";\n      elid(\"\".concat(this.name, \"-hover-display\")).style.height = clipHeight + \"px\";\n      previewClip.style.transform = \"scale(\".concat(this.previewScale, \")\");\n      previewClip.style.transformOrigin = \"center bottom\";\n      previewClip.style.boxSizing = \"border-box\";\n    }\n  }]);\n\n  return Player;\n}();\n\nmodule.exports = Player;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/Player.js\n");

/***/ }),

/***/ "../src/config.js":
/*!************************!*\
  !*** ../src/config.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  // the players start name\n  name: \"mc-player\",\n\n  // set the players total name\n  set playerName(name) {\n    this.name += \"-\" + name;\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2NvbmZpZy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvY29uZmlnLmpzPzEyMDYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIHRoZSBwbGF5ZXJzIHN0YXJ0IG5hbWVcbiAgbmFtZTogXCJtYy1wbGF5ZXJcIixcblxuICAvLyBzZXQgdGhlIHBsYXllcnMgdG90YWwgbmFtZVxuICBzZXQgcGxheWVyTmFtZShuYW1lKSB7XG4gICAgdGhpcy5uYW1lICs9IFwiLVwiICsgbmFtZTtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/config.js\n");

/***/ }),

/***/ "../src/helpers.js":
/*!*************************!*\
  !*** ../src/helpers.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  el: function el(selector) {\n    return document.querySelectorAll(selector);\n  },\n  elid: function elid(id) {\n    return document.getElementById(id);\n  },\n  eltag: function eltag(tag) {\n    return document.getElementsByTagName(tag);\n  },\n  elcreate: function elcreate(tag) {\n    return document.createElement(tag);\n  },\n  addListener: function addListener() {\n    var _document;\n\n    return (_document = document).addEventListener.apply(_document, arguments);\n  },\n  removeListener: function removeListener() {\n    var _document2;\n\n    return (_document2 = document).removeEventListener.apply(_document2, arguments);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2hlbHBlcnMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2hlbHBlcnMuanM/YmMxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWw6IHNlbGVjdG9yID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLFxuICBlbGlkOiBpZCA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksXG4gIGVsdGFnOiB0YWcgPT4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKSxcbiAgZWxjcmVhdGU6IHRhZyA9PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyksXG4gIGFkZExpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciguLi5hcmd1bWVudHMpO1xuICB9LFxuICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoLi4uYXJndW1lbnRzKTtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQVZBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/helpers.js\n");

/***/ }),

/***/ "../src/html/playerHTML.js":
/*!*********************************!*\
  !*** ../src/html/playerHTML.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (config) {\n  return \"\\n  <div\\n    class=\\\"pointer-event-panel\\\"\\n    id=\\\"\".concat(config.name, \"-pointer-event-panel\\\"\\n  ></div>\\n  <div\\n    class=\\\"pointer-event-panel\\\"\\n    id=\\\"\").concat(config.name, \"-listener-helper\\\"\\n  ></div>\\n  <div class=\\\"grad\\\"></div>\\n  <div class=\\\"background\\\"></div>\\n  <div id=\\\"\").concat(config.name, \"-controls\\\">\\n    <div id=\\\"\").concat(config.name, \"-totalbar\\\">\\n      <div id=\\\"\").concat(config.name, \"-hover-display\\\">\\n        <div id=\\\"\").concat(config.name, \"-hover-millisecond\\\"></div>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-loopbar\\\">\\n        <div\\n          class=\\\"\").concat(config.name, \"-loop-boundaries\\\"\\n          id=\\\"\").concat(config.name, \"-loopbar-start\\\"\\n        ></div>\\n        <div\\n          class=\\\"\").concat(config.name, \"-loop-boundaries\\\"\\n          id=\\\"\").concat(config.name, \"-loopbar-end\\\"\\n        ></div>\\n        <div id=\\\"\").concat(config.name, \"-helperbar\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-runningbar\\\">\\n          <div id=\\\"\").concat(config.name, \"-cursor\\\"></div>\\n        </div>\\n      </div>\\n    </div>\\n    <div id=\\\"\").concat(config.name, \"-left-controls\\\">\\n      <div id=\\\"\").concat(config.name, \"-status-btn\\\">\\n        \").concat(config.svg.playSVG, \"\\n        <span id=\\\"\").concat(config.name, \"-indicator\\\"></span>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-volume\\\">\\n        <div id=\\\"\").concat(config.name, \"-volume-btn\\\">\\n          \").concat(config.svg.volumeSVG, \"\\n        </div>\\n        <div id=\\\"\").concat(config.name, \"-volumebar-helper\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-volumebar\\\">\\n            <div id=\\\"\").concat(config.name, \"-volumebar-active\\\">\\n              <div id=\\\"\").concat(config.name, \"-volume-cursor\\\"></div>\\n            </div>\\n        </div>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-time-display\\\">\\n        <span id=\\\"\").concat(config.name, \"-time-current\\\"></span>\\n        <span id=\\\"\").concat(config.name, \"-time-separator\\\"></span>\\n        <span id=\\\"\").concat(config.name, \"-time-total\\\"></span>\\n      </div>\\n    </div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-full-screen-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\").concat(config.svg.fullScreenSVG, \"</div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-settings-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\").concat(config.svg.settingsSVG, \"</div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-dc-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\\n      \").concat(config.svg.dcSVG, \"\\n    </div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-loop-btn-container\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\\n      <div\\n        id=\\\"\").concat(config.name, \"-loop-btn\\\"\\n        class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n      >\").concat(config.svg.loopSVG, \"</div>\\n      <div\\n        id=\\\"\").concat(config.name, \"-loop-time\\\"\\n        class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n      >\\n        <span\\n          id=\\\"\").concat(config.name, \"-loopbar-start-time\\\"\\n          class=\\\"\").concat(config.name, \"-loopbar-time\\\"\\n        ></span>\\n        <span>:</span>\\n        <span\\n          id=\\\"\").concat(config.name, \"-loopbar-end-time\\\"\\n          class=\\\"\").concat(config.name, \"-loopbar-time\\\"\\n        ></span>\\n      </div>\\n    </div>\\n\\n  </div>\\n  <div id=\\\"\").concat(config.name, \"-settings-panel\\\">\\n    <ul id=\\\"\").concat(config.name, \"-main-settings\\\">\\n      <li id=\\\"\").concat(config.name, \"-settings-pointer-events\\\">\\n        <label>Pointer Events</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-pointer-events-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-preview\\\">\\n        <label>Show Preview</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-preview-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-indicator\\\">\\n        <label>Show Indicator</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-indicator-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-volume\\\">\\n        <label>Show Volume</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-volume-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-speed-show\\\">\\n        <label>Speed</label>\\n        <div class=\\\"\").concat(config.name, \"-speed-btn\\\">\").concat(config.svg.arrowRightSVG, \"</div>\\n        <span id=\\\"\").concat(config.name, \"-speed-current\\\"></span>\\n      </li>\\n    </ul>\\n    <ul id=\\\"\").concat(config.name, \"-speed-settings\\\">\\n      <li id=\\\"\").concat(config.name, \"-settings-speed-hide\\\">\\n        <div class=\\\"\").concat(config.name, \"-speed-btn\\\">\").concat(config.svg.arrowLeftSVG, \"</div>\\n        <label id=\").concat(config.name, \"-speed-runtime>Speed</label>\\n      </li>\\n      <li>\\n        <div id=\\\"\").concat(config.name, \"-speed-value-helperbar\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-speed-value-bar\\\">\\n          <div\\n            class=\\\"\").concat(config.name, \"-speed-value-step\\\"\\n            id=\\\"\").concat(config.name, \"-speed-cursor\\\"\\n          >\\n            <div></div>\\n          </div>\\n        </div>\\n        <div id=\\\"\").concat(config.name, \"-speed-value\\\">\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2h0bWwvcGxheWVySFRNTC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvaHRtbC9wbGF5ZXJIVE1MLmpzPzNkMDUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBjb25maWcgPT4gYFxuICA8ZGl2XG4gICAgY2xhc3M9XCJwb2ludGVyLWV2ZW50LXBhbmVsXCJcbiAgICBpZD1cIiR7Y29uZmlnLm5hbWV9LXBvaW50ZXItZXZlbnQtcGFuZWxcIlxuICA+PC9kaXY+XG4gIDxkaXZcbiAgICBjbGFzcz1cInBvaW50ZXItZXZlbnQtcGFuZWxcIlxuICAgIGlkPVwiJHtjb25maWcubmFtZX0tbGlzdGVuZXItaGVscGVyXCJcbiAgPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiZ3JhZFwiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiYmFja2dyb3VuZFwiPjwvZGl2PlxuICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tY29udHJvbHNcIj5cbiAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tdG90YWxiYXJcIj5cbiAgICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS1ob3Zlci1kaXNwbGF5XCI+XG4gICAgICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS1ob3Zlci1taWxsaXNlY29uZFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tbG9vcGJhclwiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9XCIke2NvbmZpZy5uYW1lfS1sb29wLWJvdW5kYXJpZXNcIlxuICAgICAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tbG9vcGJhci1zdGFydFwiXG4gICAgICAgID48L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbG9vcC1ib3VuZGFyaWVzXCJcbiAgICAgICAgICBpZD1cIiR7Y29uZmlnLm5hbWV9LWxvb3BiYXItZW5kXCJcbiAgICAgICAgPjwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0taGVscGVyYmFyXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS1ydW5uaW5nYmFyXCI+XG4gICAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LWN1cnNvclwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS1sZWZ0LWNvbnRyb2xzXCI+XG4gICAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tc3RhdHVzLWJ0blwiPlxuICAgICAgICAke2NvbmZpZy5zdmcucGxheVNWR31cbiAgICAgICAgPHNwYW4gaWQ9XCIke2NvbmZpZy5uYW1lfS1pbmRpY2F0b3JcIj48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS12b2x1bWVcIj5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZS1idG5cIj5cbiAgICAgICAgICAke2NvbmZpZy5zdmcudm9sdW1lU1ZHfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZWJhci1oZWxwZXJcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZWJhclwiPlxuICAgICAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZWJhci1hY3RpdmVcIj5cbiAgICAgICAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZS1jdXJzb3JcIj48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXRpbWUtZGlzcGxheVwiPlxuICAgICAgICA8c3BhbiBpZD1cIiR7Y29uZmlnLm5hbWV9LXRpbWUtY3VycmVudFwiPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4gaWQ9XCIke2NvbmZpZy5uYW1lfS10aW1lLXNlcGFyYXRvclwiPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4gaWQ9XCIke2NvbmZpZy5uYW1lfS10aW1lLXRvdGFsXCI+PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdlxuICAgICAgaWQ9XCIke2NvbmZpZy5uYW1lfS1mdWxsLXNjcmVlbi1idG5cIlxuICAgICAgY2xhc3M9XCIke2NvbmZpZy5uYW1lfS1tYy1yaWdodC1jb250cm9sc1wiXG4gICAgPiR7Y29uZmlnLnN2Zy5mdWxsU2NyZWVuU1ZHfTwvZGl2PlxuICAgIDxkaXZcbiAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3MtYnRuXCJcbiAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbWMtcmlnaHQtY29udHJvbHNcIlxuICAgID4ke2NvbmZpZy5zdmcuc2V0dGluZ3NTVkd9PC9kaXY+XG4gICAgPGRpdlxuICAgICAgaWQ9XCIke2NvbmZpZy5uYW1lfS1kYy1idG5cIlxuICAgICAgY2xhc3M9XCIke2NvbmZpZy5uYW1lfS1tYy1yaWdodC1jb250cm9sc1wiXG4gICAgPlxuICAgICAgJHtjb25maWcuc3ZnLmRjU1ZHfVxuICAgIDwvZGl2PlxuICAgIDxkaXZcbiAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tbG9vcC1idG4tY29udGFpbmVyXCJcbiAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbWMtcmlnaHQtY29udHJvbHNcIlxuICAgID5cbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9XCIke2NvbmZpZy5uYW1lfS1sb29wLWJ0blwiXG4gICAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbWMtcmlnaHQtY29udHJvbHNcIlxuICAgICAgPiR7Y29uZmlnLnN2Zy5sb29wU1ZHfTwvZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBpZD1cIiR7Y29uZmlnLm5hbWV9LWxvb3AtdGltZVwiXG4gICAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbWMtcmlnaHQtY29udHJvbHNcIlxuICAgICAgPlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tbG9vcGJhci1zdGFydC10aW1lXCJcbiAgICAgICAgICBjbGFzcz1cIiR7Y29uZmlnLm5hbWV9LWxvb3BiYXItdGltZVwiXG4gICAgICAgID48L3NwYW4+XG4gICAgICAgIDxzcGFuPjo8L3NwYW4+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgaWQ9XCIke2NvbmZpZy5uYW1lfS1sb29wYmFyLWVuZC10aW1lXCJcbiAgICAgICAgICBjbGFzcz1cIiR7Y29uZmlnLm5hbWV9LWxvb3BiYXItdGltZVwiXG4gICAgICAgID48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICA8L2Rpdj5cbiAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXNldHRpbmdzLXBhbmVsXCI+XG4gICAgPHVsIGlkPVwiJHtjb25maWcubmFtZX0tbWFpbi1zZXR0aW5nc1wiPlxuICAgICAgPGxpIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3MtcG9pbnRlci1ldmVudHNcIj5cbiAgICAgICAgPGxhYmVsPlBvaW50ZXIgRXZlbnRzPC9sYWJlbD5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoIHNldHRpbmdzLXN3aXRjaFwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7Y29uZmlnLm5hbWV9LXBvaW50ZXItZXZlbnRzLWNoZWNrYm94XCIgdHlwZT1cImNoZWNrYm94XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJzbGlkZXIgcm91bmRcIj48L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2xpPlxuICAgICAgPGxpIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3MtcHJldmlld1wiPlxuICAgICAgICA8bGFiZWw+U2hvdyBQcmV2aWV3PC9sYWJlbD5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoIHNldHRpbmdzLXN3aXRjaFwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7Y29uZmlnLm5hbWV9LXNob3ctcHJldmlldy1jaGVja2JveFwiIHR5cGU9XCJjaGVja2JveFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2xpZGVyIHJvdW5kXCI+PC9zcGFuPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9saT5cbiAgICAgIDxsaSBpZD1cIiR7Y29uZmlnLm5hbWV9LXNldHRpbmdzLWluZGljYXRvclwiPlxuICAgICAgICA8bGFiZWw+U2hvdyBJbmRpY2F0b3I8L2xhYmVsPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJzd2l0Y2ggc2V0dGluZ3Mtc3dpdGNoXCI+XG4gICAgICAgICAgPGlucHV0IGlkPVwiJHtjb25maWcubmFtZX0tc2hvdy1pbmRpY2F0b3ItY2hlY2tib3hcIiB0eXBlPVwiY2hlY2tib3hcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInNsaWRlciByb3VuZFwiPjwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvbGk+XG4gICAgICA8bGkgaWQ9XCIke2NvbmZpZy5uYW1lfS1zZXR0aW5ncy12b2x1bWVcIj5cbiAgICAgICAgPGxhYmVsPlNob3cgVm9sdW1lPC9sYWJlbD5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoIHNldHRpbmdzLXN3aXRjaFwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7Y29uZmlnLm5hbWV9LXNob3ctdm9sdW1lLWNoZWNrYm94XCIgdHlwZT1cImNoZWNrYm94XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJzbGlkZXIgcm91bmRcIj48L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2xpPlxuICAgICAgPGxpIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3Mtc3BlZWQtc2hvd1wiPlxuICAgICAgICA8bGFiZWw+U3BlZWQ8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiJHtjb25maWcubmFtZX0tc3BlZWQtYnRuXCI+JHtjb25maWcuc3ZnLmFycm93UmlnaHRTVkd9PC9kaXY+XG4gICAgICAgIDxzcGFuIGlkPVwiJHtjb25maWcubmFtZX0tc3BlZWQtY3VycmVudFwiPjwvc3Bhbj5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgICA8dWwgaWQ9XCIke2NvbmZpZy5uYW1lfS1zcGVlZC1zZXR0aW5nc1wiPlxuICAgICAgPGxpIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3Mtc3BlZWQtaGlkZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiJHtjb25maWcubmFtZX0tc3BlZWQtYnRuXCI+JHtjb25maWcuc3ZnLmFycm93TGVmdFNWR308L2Rpdj5cbiAgICAgICAgPGxhYmVsIGlkPSR7Y29uZmlnLm5hbWV9LXNwZWVkLXJ1bnRpbWU+U3BlZWQ8L2xhYmVsPlxuICAgICAgPC9saT5cbiAgICAgIDxsaT5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXNwZWVkLXZhbHVlLWhlbHBlcmJhclwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tc3BlZWQtdmFsdWUtYmFyXCI+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCIke2NvbmZpZy5uYW1lfS1zcGVlZC12YWx1ZS1zdGVwXCJcbiAgICAgICAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tc3BlZWQtY3Vyc29yXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXNwZWVkLXZhbHVlXCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbmA7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/html/playerHTML.js\n");

/***/ }),

/***/ "../src/html/setElements.js":
/*!**********************************!*\
  !*** ../src/html/setElements.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    elcreate = _require.elcreate;\n\nvar svg = __webpack_require__(/*! ./svg */ \"../src/html/svg.js\");\n\nvar playerHTML = __webpack_require__(/*! ./playerHTML */ \"../src/html/playerHTML.js\");\n\nmodule.exports = function (_this) {\n  _this.elements = {};\n  var clipIframe = _this.clip.props.host; // console.log(_this.clip);\n  // set _this.clip position to relative\n\n  clipIframe.style.display = \"flex\";\n  clipIframe.style.justifyContent = \"center\";\n  clipIframe.style.alignItems = \"center\";\n  _this.clip.props.host.style.position = \"relative\";\n  _this.clip.props.host.style.zIndex = \"0\";\n  _this.elements.mcPlayer = elcreate(\"div\");\n  _this.elements.mcPlayer.id = \"\".concat(_this.name);\n  _this.elements.mcPlayer.className = \"\".concat(_this.className);\n  _this.elements.mcPlayer.innerHTML = playerHTML({\n    svg: svg,\n    name: _this.name\n  });\n\n  _this.options.host.appendChild(_this.elements.mcPlayer);\n\n  _this.elements.pointerEventPanel = elid(\"\".concat(_this.name, \"-pointer-event-panel\"));\n  _this.elements.listenerHelper = elid(\"\".concat(_this.name, \"-listener-helper\"));\n  _this.elements.loopBar = elid(\"\".concat(_this.name, \"-loopbar\"));\n  _this.elements.totalBar = elid(\"\".concat(_this.name, \"-totalbar\"));\n  _this.elements.indicator = elid(\"\".concat(_this.name, \"-indicator\"));\n  _this.elements.loopButton = elid(\"\".concat(_this.name, \"-loop-btn\"));\n  _this.elements.volumeBar = elid(\"\".concat(_this.name, \"-volumebar\"));\n  _this.elements.totalTime = elid(\"\".concat(_this.name, \"-time-total\"));\n  _this.elements.volumeControl = elid(\"\".concat(_this.name, \"-volume\"));\n  _this.elements.volumeBtn = elid(\"\".concat(_this.name, \"-volume-btn\"));\n  _this.elements.runningBar = elid(\"\".concat(_this.name, \"-runningbar\"));\n  _this.elements.loopBarEnd = elid(\"\".concat(_this.name, \"-loopbar-end\"));\n  _this.elements.statusButton = elid(\"\".concat(_this.name, \"-status-btn\"));\n  _this.elements.speedBar = elid(\"\".concat(_this.name, \"-speed-value-bar\"));\n  _this.elements.currentTime = elid(\"\".concat(_this.name, \"-time-current\"));\n  _this.elements.timeDisplay = elid(\"\".concat(_this.name, \"-time-display\"));\n  _this.elements.speedCurrent = elid(\"\".concat(_this.name, \"-speed-current\"));\n  _this.elements.loopBarStart = elid(\"\".concat(_this.name, \"-loopbar-start\"));\n  _this.elements.volumeCursor = elid(\"\".concat(_this.name, \"-volume-cursor\"));\n  _this.elements.settingsButton = elid(\"\".concat(_this.name, \"-settings-btn\"));\n  _this.elements.donkeyclipButton = elid(\"\".concat(_this.name, \"-dc-btn\"));\n  _this.elements.timeSeparator = elid(\"\".concat(_this.name, \"-time-separator\"));\n  _this.elements.settingsPanel = elid(\"\".concat(_this.name, \"-settings-panel\"));\n  _this.elements.settingsMainPanel = elid(\"\".concat(_this.name, \"-main-settings\"));\n  _this.elements.fullScreenButton = elid(\"\".concat(_this.name, \"-full-screen-btn\"));\n  _this.elements.volumeBarHelper = elid(\"\".concat(_this.name, \"-volumebar-helper\"));\n  _this.elements.volumeBarActive = elid(\"\".concat(_this.name, \"-volumebar-active\"));\n  _this.elements.settingsSpeedPanel = elid(\"\".concat(_this.name, \"-speed-settings\"));\n  _this.elements.settingsShowVolume = elid(\"\".concat(_this.name, \"-settings-volume\"));\n  _this.elements.settingsShowPreview = elid(\"\".concat(_this.name, \"-settings-preview\"));\n  _this.elements.settingsPointerEvents = elid(\"\".concat(_this.name, \"-settings-pointer-events\"));\n  _this.elements.speedBarHelper = elid(\"\".concat(_this.name, \"-speed-value-helperbar\"));\n  _this.elements.settingsShowIndicator = elid(\"\".concat(_this.name, \"-settings-indicator\"));\n  _this.elements.settingsSpeedButtonShow = elid(\"\".concat(_this.name, \"-settings-speed-show\"));\n  _this.elements.settingsSpeedButtonHide = elid(\"\".concat(_this.name, \"-settings-speed-hide\"));\n  _this.elements.volumeBarActive.style.width = _this.settings.volume * 100 + \"%\";\n  _this.elements.currentTime.innerHTML = 0;\n  _this.elements.totalTime.innerHTML = _this.clip.duration;\n  _this.elements.timeSeparator.innerHTML = \"/\";\n\n  _this.elements.settingsPanel.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.indicator.style.visibility = \"hidden\";\n  _this.elements.indicator.innerHTML = _this.clip.runTimeInfo.state;\n  _this.elements.settingsSpeedPanel.style.display = \"none\";\n\n  _this.elements.settingsSpeedPanel.getElementsByTagName(\"li\")[1].classList.add(\"no-hover\");\n\n  _this.elements.loopBarStart.style.left = \"0%\";\n\n  _this.elements.loopBarStart.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.loopBarEnd.style.left = \"100%\";\n\n  _this.elements.loopBarEnd.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.loopStartTime = elid(\"\".concat(_this.name, \"-loopbar-start-time\"));\n  _this.elements.loopEndTime = elid(\"\".concat(_this.name, \"-loopbar-end-time\"));\n  _this.elements.editableLoopStartTime = document.createElement(\"input\");\n  _this.elements.editableLoopStartTime.type = \"text\";\n  _this.elements.editableLoopStartTime.size = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length + 1;\n  _this.elements.editableLoopStartTime.maxLength = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length;\n  _this.elements.editableLoopStartTime.style.height = elid(\"\".concat(_this.name, \"-time-total\")).offsetHeight;\n  _this.elements.editableLoopStartTime.value = elid(\"\".concat(_this.name, \"-loopbar-start-time\")).innerHTML;\n  _this.elements.editableLoopStartTime.style.fontSize = \"8px\";\n  _this.elements.editableLoopEndTime = document.createElement(\"input\");\n  _this.elements.editableLoopEndTime.type = \"text\";\n  _this.elements.editableLoopEndTime.size = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length + 1;\n  _this.elements.editableLoopEndTime.maxLength = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length;\n  _this.elements.editableLoopEndTime.style.height = elid(\"\".concat(_this.name, \"-time-total\")).offsetHeight;\n  _this.elements.editableLoopEndTime.value = elid(\"\".concat(_this.name, \"-loopbar-start-time\")).innerHTML;\n  _this.elements.editableLoopEndTime.pattern = \"d*\";\n  _this.elements.editableLoopEndTime.style.fontSize = \"8px\";\n  elid(\"\".concat(_this.name, \"-loop-time\")).classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n  elid(\"\".concat(_this.name, \"-hover-display\")).classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n  elid(\"\".concat(_this.name, \"-show-volume-checkbox\")).checked = _this.options.showVolume;\n  elid(\"\".concat(_this.name, \"-show-preview-checkbox\")).checked = _this.options.preview;\n  elid(\"\".concat(_this.name, \"-pointer-events-checkbox\")).checked = _this.options.pointerEvents;\n\n  if (_this.options.pointerEvents) {\n    _this.elements.mcPlayer.style.pointerEvents = \"none\";\n    _this.elements.pointerEventPanel.style.pointerEvents = \"auto\";\n    elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n    _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n  } else {\n    _this.elements.mcPlayer.style.pointerEvents = \"none\";\n    _this.elements.pointerEventPanel.style.pointerEvents = \"none\";\n    elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n    _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n  }\n\n  _this.elements.listenerHelper.style.pointerEvents = \"none\";\n\n  if (!_this.options.showVolume) {\n    _this.elements.timeDisplay.style.left = \"45px\";\n    _this.elements.volumeControl.style.visibility = \"hidden\";\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n  } else {\n    _this.elements.timeDisplay.style.left = \"\";\n    _this.elements.volumeControl.style.visibility = \"visible\";\n  }\n\n  for (var i in _this.options.speedValues) {\n    var barDiv = elcreate(\"div\");\n    barDiv.className = \"\".concat(_this.name, \"-speed-value-step\");\n    var valueDiv = elcreate(\"div\");\n    valueDiv.className = \"\".concat(_this.name, \"-speed-value\");\n    valueDiv.dataset.speedValue = _this.options.speedValues[i];\n    valueDiv.innerHTML = _this.options.speedValues[i];\n    valueDiv.dataset.zone = i;\n    elid(\"\".concat(_this.name, \"-speed-value\")).prepend(valueDiv);\n\n    _this.elements.speedBar.prepend(barDiv);\n  } // show hide buttons\n\n\n  if (_this.options.buttons.fullScreen === false) {\n    _this.elements.fullScreenButton.remove();\n  }\n\n  if (_this.options.buttons.settings === false) {\n    _this.elements.settingsButton.remove();\n  }\n\n  if (_this.options.buttons.donkeyclip === false) {\n    _this.elements.donkeyclipButton.remove();\n  }\n\n  if (_this.options.buttons.loop === false) {\n    _this.elements.loopButton.remove();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/html/setElements.js\n");

/***/ }),

/***/ "../src/html/style.js":
/*!****************************!*\
  !*** ../src/html/style.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (theme, name, options) {\n  return \"\\n.background {\\n  background-color: black;\\n  width:100%;\\n  height:\".concat(theme[\"background-height\"], \";;\\n  position:absolute;\\n  top:0px;\\n  left:0px;\\n  z-index:-2000;\\n}\\n\\n.full-screen #\").concat(name, \"-controls {\\n  position:fixed;\\n  left:0px;\\n  bottom:0px;\\n}\\n\\n.full-screen #\").concat(name, \"-settings-panel {\\n  position:fixed;\\n  bottom: 45px;\\n}\\n\\n.svg {\\n  fill: \").concat(theme[\"svg-color\"], \";\\n  stroke: \").concat(theme[\"svg-color\"], \";\\n}\\n\\n.pointer-event-panel {\\n  height: \").concat(theme[\"pointer-event-panel-height\"], \";\\n  display:flex;\\n  align-items:center;\\n  justify-content:center;\\n}\\n#\").concat(name, \"-pointer-event-panel{\\n  width:100%;\\n  position:absolute;\\n  z-index:100;\\n}\\n#\").concat(name, \"-listener-helper{\\n  width:100%;\\n  height:calc( 100% - 45px );\\n  position:absolute;\\n  z-index:110;\\n}\\n.svg-selected svg{\\n  fill: \").concat(theme[\"svg-selected-color\"], \";\\n  stroke: \").concat(theme[\"svg-selected-color\"], \";\\n}\\n#\").concat(name, \"-hover-display{\\n    border: \").concat(theme[\"preview-border\"], \";\\n    display: flex;\\n    overflow:hidden;\\n    background-color: black;\\n    position: absolute;\\n    bottom: 14px;\\n    left: 0px;\\n    align-items: flex-end;\\n    justify-content: center;\\n}\\n\\n#\").concat(name, \"-hover-millisecond {\\n  background-color: \").concat(theme[\"hms-background-color\"], \";\\n  padding:3px;\\n  height:18px;\\n  margin:0px;\\n  line-height:12px;\\n  font-size:10px;\\n  text-align: center;\\n  min-width:20px;\\n  max-width:100px;\\n  z-index:2;\\n}\\n#\").concat(name, \",\\n#\").concat(name, \" ::before,\\n#\").concat(name, \" ::after,\\n#\").concat(name, \" div,\\n#\").concat(name, \" p,\\n#\").concat(name, \" span,\\n#\").concat(name, \" ul,\\n#\").concat(name, \" li {\\n  font-weight: 400;\\n  line-height: 1.9 !important;\\n  color: \").concat(theme[\"color\"], \";\\n  font-family: \\\"Century Gothic\\\", CenturyGothic, AppleGothic, sans-serif;\\n  box-sizing:border-box;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n}\\n#\").concat(name, \" {\\n  line-height: 1.9;\\n  font-size: 12px;\\n  overflow:hidden;\\n  height: calc(100% + \").concat(theme[\"controls-position\"], \");\\n  width:100%;\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  \\n}\\n\\n#\").concat(name, \"-settings-speed-hide {\\n  text-align:right;\\n}\\n\\n.grad {\\n  background-image: linear-gradient(\\n    rgba(100,100,100,00.01),\\n    rgba(100,100,100,00.02),\\n    rgba(100,100,100,00.03),\\n    rgba(100,100,100,0.04),\\n    rgba(100,100,100,0.05),\\n    rgba(0,0,0,0.06),\\n    rgba(0,0,0,0.07),\\n    rgba(0,0,0,0.08),\\n    rgba(0,0,0,0.09),\\n    rgba(0,0,0,0.1),\\n    rgba(0,0,0,0.2),\\n    rgba(0,0,0,0.3),\\n    rgba(0,0,0,0.4),\\n    rgba(0,0,0,0.4),\\n    rgba(0,0,0,0.5),\\n    rgba(0,0,0,0.6),\\n    rgba(0,0,0,0.7),\\n    rgba(0,0,0,0.8),\\n    rgba(0,0,0,0.9),\\n    rgba(0,0,0,1)\\n  );\\n  position:absolute;\\n  width:100%;\\n  height:\").concat(theme[\"grad-height\"], \";\\n  left:0px;\\n  bottom:0px;\\n  z-index:100;\\n}\\n\\n#\").concat(name, \"-controls {\\n  touch-action: none;\\n  background-color: \").concat(theme[\"background-color\"], \";\\n  border: \").concat(theme[\"controls-border\"], \";\\n  position: absolute;\\n  bottom: \").concat(theme[\"controls-bottom\"], \";\\n  left: 0px;\\n  width: 100%;\\n  height: 40px;\\n  z-index:100;\\n}\\n\\n#\").concat(name, \"-totalbar {\\n  width: calc(100% - 20px);\\n  height: 5px;\\n  margin: 0px 10px 0px 10px;\\n  background-color: #505056;\\n  position: relative;\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n#\").concat(name, \"-loopbar {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n  top: 0px;\\n  left: 0px;\\n  background-color: \").concat(theme[\"loopbar-color\"], \";\\n}\\n\\n.\").concat(name, \"-loop-boundaries {\\n  transform:translate(-50%,-37%);\\n  position:absolute;\\n  width:18px;\\n  background-color:\").concat(theme[\"loopbar-color\"], \";\\n  height:18px;\\n  border-radius:10px;\\n  z-index:40;\\n}\\n\\n#\").concat(name, \"-helperbar {\\n  position: absolute;\\n  height: 20px;\\n  top: -10px;\\n  left: 0px;\\n  right: 0px;\\n  z-index:2;\\n}\\n\\n#\").concat(name, \"-runningbar {\\n  position: relative;\\n  width: 0px;\\n  max-width:100%;\\n  height: 100%;\\n  background-color: \").concat(theme[\"runningbar-color\"], \";\\n}\\n\\n#\").concat(name, \"-cursor {\\n  transform:translate(50%,-36%);\\n  right: 0px;\\n  top: 0px;\\n  width: 0px;\\n  height: 0px;\\n  position: absolute;\\n  background-color: \").concat(theme[\"cursor-color\"], \";\\n  border-radius: 10px;\\n  z-index: 5;\\n}\\n\\n#\").concat(name, \"-left-controls {\\n  display:inline-block;\\n  width:200px;\\n  height:35px;\\n}\\n#\").concat(name, \"-time-display {\\n  display: table;\\n  text-align: center;\\n  width: auto;\\n  height: 34px;\\n  position: absolute;\\n  left: 90px;\\n  -webkit-transition: left 0.1s ease;\\n  -moz-transition: left 0.1s ease;\\n  transition: left 0.1s ease;\\n}\\n\\n#\").concat(name, \"-time-display span {\\n  display: table-cell;\\n  vertical-align: middle;\\n}\\n\\n#\").concat(name, \"-status-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 40px;\\n  height: 25px;\\n  position: absolute;\\n  overflow:visible;\\n  left: 0px;\\n  bottom: 0px;\\n  margin: 10px 5px 5px 5px;\\n  text-align: center;\\n  z-index:3;\\n}\\n\\n#\").concat(name, \"-volume {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  position: absolute;\\n  left: 45px;\\n  bottom: 5px;\\n  margin: 10px 5px 5px 5px;\\n  text-align: center;\\n  z-index:3;\\n}\\n#\").concat(name, \"-volume-btn {\\n  width: 20px;\\n  height: 15px;\\n}\\n\\n#\").concat(name, \"-volumebar {\\n  width: 0px;\\n  height: 3px;\\n  background-color: \").concat(theme[\"loopbar-color\"], \";\\n  position:absolute;\\n  left:25px;\\n  bottom:6px;\\n  -webkit-transition: left 0.1s ease;\\n  -moz-transition: left 0.1s ease;\\n  transition: left 0.1s ease;\\n}\\n\\n#\").concat(name, \"-volumebar-helper {\\n  position: absolute;\\n  width: 0px;\\n  height: 15px;\\n  left:25px;\\n  bottom:0px;\\n  z-index:10;\\n}\\n\\n#\").concat(name, \"-volumebar-active {\\n  position: relative;\\n  width: 0%;\\n  height: 100%;\\n  background-color: \").concat(theme[\"color\"], \";\\n  position:relative;\\n  left:0px;\\n  bottom:0px;\\n}\\n\\n#\").concat(name, \"-volume-cursor {\\n  transform:translate(50%,-36%);\\n  right: 0px;\\n  top: 0px;\\n  width: 0px;\\n  height: 0px;\\n  position: absolute;\\n  background-color: \").concat(theme[\"color\"], \";\\n  border-radius: 10px;\\n  z-index: 5;\\n}\\n\\n.\").concat(name, \"-loopbar-time {\\n  width:auto;\\n  height:12px;\\n  background-color:\").concat(theme[\"background-color\"], \";\\n  line-height:10px;\\n  font-size:10px;\\n}\\n\\n#\").concat(name, \"-loop-time {\\n  margin: 7px;\\n}\\n\\n#\").concat(name, \"-dc-btn {\\n    opacity: 0.8;\\n    background-repeat: no-repeat;\\n    background-size: 100% 100%;\\n    width: 20px;\\n    height: 15px;\\n    margin: 7px 10px 5px 0px;\\n    transform: scale(1.5,1.5);\\n}\\n\\n#\").concat(name, \"-loop-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n\\n#\").concat(name, \"-settings-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n#\").concat(name, \"-full-screen-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n.\").concat(name, \"-speed-btn {\\n  position: relative;\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  width: 10px;\\n  height: 10px;\\n  display: inline-block;\\n}\\n\\n#\").concat(name, \"-settings-panel {\\n  touch-action: none;\\n  box-sizing: border-box;\\n  position: absolute;\\n  z-index:101;\\n  background-color: \").concat(theme[\"settings-background-color\"], \";\\n  bottom: \").concat(theme[\"settings-panel-bottom\"], \";\\n  border: \").concat(theme[\"border\"], \";\\n  right: 5px;\\n  width: 164px;\\n  height: 175px;\\n  padding: 5px;\\n  margin: 0px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n.\").concat(name, \"-mc-right-controls {\\n  float: right;\\n}\\n\\n.\").concat(name, \"-hide {\\n  display:none !important;\\n}\\n\\n#\").concat(name, \"-speed-value-bar {\\n  position: relative;\\n  width: 5px;\\n  background-color: \").concat(theme[\"speedbar-color\"], \";\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  float: left;\\n  margin-right:15px;\\n}\\n\\n#\").concat(name, \"-speed-value-helperbar {\\n  position: absolute;\\n  width: 25px;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  float: left;\\n  left: -5px;\\n  z-index:10;\\n}\\n\\n\\n#\").concat(name, \"-speed-value-bar:hover,\\n#\").concat(name, \"-speed-value-helperbar {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-volumebar:hover,\\n#\").concat(name, \"-volumebar-helper:hover,\\n#\").concat(name, \"-volume-btn:hover,\\n#\").concat(name, \"-volumebar:active,\\n#\").concat(name, \"-volumebar-helper:active,\\n#\").concat(name, \"-volume-btn:active {\\n  cursor:pointer;\\n}\\n\\n#\").concat(name, \"-speed-cursor {\\n  position: absolute;\\n  background-color: \").concat(theme[\"speedbar-cursor-color\"], \";\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n#\").concat(name, \"-speed-cursor div {\\n  position: absolute;\\n  background-color: \").concat(theme[\"speedbar-cursor-color\"], \";\\n  left: -2.5px;\\n  top: -4px;\\n  width: 10px;\\n  height: 10px;\\n  border-radius: 5px;\\n}\\n\\n#\").concat(name, \"-speed-cursor:hover {\\n  cursor: pointer;\\n}\\n\\n.\").concat(name, \"-speed-value-step {\\n  width: 16px;\\n  background-color: \").concat(theme[\"speedbar-color\"], \";\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: 2px;\\n  margin-top: 7px;\\n  margin-bottom: 7px;\\n  float: left;\\n}\\n\\n#\").concat(name, \"-speed-value {\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  text-align: left;\\n}\\n\\n.\").concat(name, \"-speed-value {\\n  box-sizing: border-box;\\n  height: 16px;\\n  font-size: 12px;\\n}\\n\\n#\").concat(name, \"-indicator {\\n  font-size: 8px !important;\\n  position: relative;\\n  bottom: 15px;\\n  color: \").concat(theme[\"color\"], \";\\n  white-space: nowrap;\\n}\\n\\n#\").concat(name, \"-speed-settings {\\n  height: \").concat(options.speedValues.length * 16 + 32 + 10 - 2, \"px;\\n}\\n\\n#\").concat(name, \"-speed-settings li.no-hover { \\n  height: \").concat(options.speedValues.length * 16 + 10 - 2, \"px; \\n}\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel {\\n  overflow: hidden;\\n  width: 80px;\\n  height: \").concat(options.speedValues.length * 16 + 32 + 20, \"px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel .\").concat(name, \"-speed-btn {\\n  float: left;\\n}\\n\\n.\").concat(name, \"-settings-speed-panel ul:first-child {\\n  text-align: right;\\n}\\n\\n#\").concat(name, \"-speed-current {\\n  float: right;\\n  padding-right: 10px\\n}\\n\\n#\").concat(name, \"-settings-panel .\").concat(name, \"-speed-btn {\\n  float: right;\\n}\\n\\n#\").concat(name, \"-settings-panel ul {\\n  width: 100%;\\n  margin: 0px;\\n  padding: 0px;\\n  overflow: hidden;\\n}\\n\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel ul li {\\n  min-width: 70px;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li.no-hover:hover {\\n  background-color: transparent;\\n  cursor: default;\\n}\\n\\ndiv.\").concat(name, \"-speed-value:hover {\\n  background-color: \").concat(theme[\"hover-color\"], \";\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li {\\n  position: relative;\\n  width: 100%;\\n  min-width: 154px;\\n  list-style-type: none;\\n  margin: 0px;\\n  padding: 5px;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li label {\\n  margin: 0px;\\n}\\n\\n.switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 35px;\\n  height: 18px;\\n}\\n\\n.switch input {\\n  display: none;\\n}\\n\\n.settings-switch {\\n  float: right;\\n}\\n\\n.settings-switch:after {\\n  clear: both;\\n}\\n\\n.slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: \").concat(theme[\"slider-off-color\"], \";\\n  -webkit-transition: .4s;\\n  transition: .4s;\\n}\\n\\n.slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 16px;\\n  width: 16px;\\n  left: 1px;\\n  bottom: 1px;\\n  background-color: white;\\n  -webkit-transition: .4s;\\n  transition: .4s;\\n}\\n\\ninput:checked+.slider {\\n  background-color: \").concat(theme[\"slider-on-color\"], \";\\n}\\n\\ninput:focus+.slider {\\n  box-shadow: 0 0 1px \").concat(theme[\"slider-on-color\"], \";\\n}\\n\\ninput:checked+.slider:before {\\n  -webkit-transform: translateX(16px);\\n  -ms-transform: translateX(16px);\\n  transform: translateX(16px);\\n}\\n\\n\\n/* Rounded sliders */\\n\\n.slider.round {\\n  border-radius: 34px;\\n}\\n\\n.slider.round:before {\\n  border-radius: 50%;\\n}\\n\\n\\n.m-fadeOut {\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 300ms, opacity 300ms;\\n}\\n\\n.m-fadeIn {\\n  visibility: visible;\\n  opacity: 1;\\n  transition: visibility 0s linear 0s, opacity 300ms;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li:hover {\\n  background-color: \").concat(theme[\"hover-color\"], \";\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li label:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-loopbar:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-status-btn:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-controls:active #\").concat(name, \"-cursor,\\n#\").concat(name, \"-controls:hover #\").concat(name, \"-cursor  {\\n  width: 16px;\\n  height: 16px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-volume .\").concat(name, \"-volume-cursor-transition {\\n  width: 12px;\\n  height: 12px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-volume .\").concat(name, \"-volume-width-transition\\n {\\n  width: 50px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-time-display.\").concat(name, \"-time-width-transition {\\n  left: 140px;\\n  -webkit-transition: left 0.3s ease;\\n  -moz-transition: left 0.3s ease;\\n  transition: left 0.3s ease;\\n}\\n\\n#\").concat(name, \"-settings-speed:hover .\").concat(name, \"-speed-btn {\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-status-btn:hover {\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-loop-btn:hover,\\n#\").concat(name, \"-dc-btn:hover\\n {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n#\").concat(name, \"-settings-btn:hover {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-full-screen-btn:hover {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/html/style.js\n");

/***/ }),

/***/ "../src/html/svg.js":
/*!**************************!*\
  !*** ../src/html/svg.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var svg = module.exports = {};\nsvg.playSVG = \"\\n  <svg width=\\\"100%\\\" class=\\\"svg\\\" height=\\\"100%\\\" viewBox=\\\"0 0 36 36\\\" >\\n    <path id=\\\"play-icon\\\" data-state=\\\"paused\\\"  d=\\\"M11,10 L18,13.74 18,22.28 11,26 M18,13.74 L26,18 26,18 18,22.28\\\" />\\n  </svg>\\n\";\nsvg.dcSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 400 400\\\" style=\\\"enable-background:new 0 0 286.374 286.374;\\\" xml:space=\\\"preserve\\\">\\n<path stroke-width=\\\"10.00\\\" stroke-linecap=\\\"butt\\\" stroke-linejoin=\\\"miter\\\" opacity=\\\"1\\\" d=\\\"M 120.17407989501953 162.04714965820312 L 121.16549682617188 320.6739196777344 Q 279.79229736328125 321.66534423828125 280.78369140625 241.36053466796875 Q 281.77508544921875 161.05572509765625 439.41046142578125 160.06431579589844 L 439.41046142578125 200.71243286132812 Q 281.7751159667969 163.03857421875 280.78369140625 241.36053466796875 Q 279.7922668457031 319.6824951171875 159.8307647705078 281.0172424316406 L 158.83935546875 198.72959899902344 Q 281.7751159667969 161.05572509765625 280.78369140625 241.36053466796875 Q 279.7922668457031 321.66534423828125 440.40185546875 320.6739196777344 L 440.40185546875 280.02581787109375 Q 280.78369140625 321.66534423828125 280.78369140625 241.36053466796875 C 280.78369140625 161.05572509765625 161.8135986328125 161.05572509765625 120.17407989501953 162.04714965820312 Z\\\" selected=\\\"true\\\" transform=\\\"matrix(1 0 0 1 0 0)\\\"></path></svg>\";\nsvg.pauseSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 36 36\\\" >\\n    <path id=\\\"pause-icon\\\" data-state=\\\"playing\\\" d=\\\"M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26\\\" />\\n  </svg>\\n\";\nsvg.replaySVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1000 1000\\\" enable-background=\\\"new 0 0 1000 1000\\\" xml:space=\\\"preserve\\\">\\n    <metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>\\n    <g><g transform=\\\"translate(0.000000,511.000000) scale(0.100000,-0.100000)\\\">\\n      <path d=\\\"M5356.3,4203.8c-1247.8-153.1-2324.2-811.3-3000.7-1839.7c-379.4-578.2-596.5-1209-660.5-1933.4l-27.4-294.8H883.9c-431.9,0-783.9-6.9-783.9-18.3c0-9.2,477.6-493.7,1062.7-1078.7l1062.7-1062.7L3288.1-961.1C3873.1-376,4350.8,108.5,4350.8,117.6c0,11.4-356.5,18.3-790.7,18.3h-793l18.3,189.7C2831,876.3,2991,1338,3288.1,1779.1C4122.3,3026.9,5706,3472.5,7065.8,2841.8C7639.4,2578.9,8197,2035,8487.3,1461.4C8581,1274,8709,896.9,8754.7,666.1c48-246.8,54.8-811.3,9.1-1055.8C8567.3-1491.3,7788-2394,6720.7-2750.5c-315.4-107.4-541.6-139.4-941.6-139.4c-287.9,0-415.9,11.4-598.8,50.3c-523.3,112-973.6,335.9-1371.2,681c-75.4,68.6-148.5,123.4-160,123.4c-9.1,0-187.4-169.1-393.1-374.8c-434.2-434.2-420.5-363.4-105.1-628.5c852.4-710.7,1972.3-1055.8,3046.4-937c1627.2,176,2977.8,1257,3489.8,2790.4c457.1,1368.9,169.1,2843-777,3969.7C8322.7,3484,7417.8,4000.4,6503.6,4160.4C6197.4,4213,5619.2,4235.8,5356.3,4203.8z\\\"/>\\n      <path d=\\\"M4990.7,124.5c0-1503.8,4.6-1794,32-1778c16,9.1,505.1,413.6,1085.6,895.8C7113.8,78.8,7161.8,122.2,7122.9,161c-80,75.4-2109.4,1757.5-2120.8,1757.5C4995.3,1918.5,4990.7,1111.8,4990.7,124.5z\\\"/>\\n    </g></g>\\n  </svg>\\n\";\nsvg.volumeSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 286.374 286.374\\\" style=\\\"enable-background:new 0 0 286.374 286.374;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Volume_2\\\">\\n      <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M233.636,26.767l-33.372,28.5c25.659,21.07,42.006,52.616,42.006,87.92\\n        c0,35.305-16.347,66.851-42.006,87.921l33.372,28.499c32.324-28.869,52.738-70.268,52.738-116.421\\n        C286.374,97.034,265.96,55.635,233.636,26.767z M177.737,74.513l-34.69,29.64c15.14,6.818,27.19,21.681,27.19,39.034\\n        s-12.05,32.216-27.19,39.034l34.69,29.64c21.294-15.717,36.051-40.586,36.051-68.674C213.788,115.099,199.03,90.23,177.737,74.513z\\n         M108.672,48.317L44.746,98.441H17.898C4.671,98.441,0,103.268,0,116.34v53.695c0,13.072,4.951,17.898,17.898,17.898h26.848\\n        l63.926,50.068c7.668,4.948,16.558,6.505,16.558-7.365V55.683C125.23,41.813,116.34,43.37,108.672,48.317z\\\"/>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.volumeMuteSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 286.277 286.277\\\" style=\\\"enable-background:new 0 0 286.277 286.277;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Volume_none\\\">\\n      <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M245.102,143.151l36.98-37.071c5.593-5.605,5.593-14.681,0-20.284\\n        l-10.124-10.142c-5.593-5.604-14.655-5.604-20.247,0l-36.98,37.071l-36.977-37.043c-5.594-5.603-14.654-5.603-20.247,0\\n        l-10.124,10.143c-5.594,5.603-5.594,14.679,0,20.282l36.987,37.053l-36.961,37.051c-5.591,5.604-5.591,14.681,0,20.284\\n        l10.126,10.141c5.593,5.604,14.654,5.604,20.247,0l36.96-37.05l36.97,37.035c5.592,5.605,14.654,5.605,20.247,0l10.124-10.141\\n        c5.593-5.603,5.593-14.68,0-20.282L245.102,143.151z M108.674,48.296L44.747,98.42H17.9c-13.228,0-17.899,4.826-17.899,17.898\\n        L0,142.719l0.001,27.295c0,13.072,4.951,17.898,17.899,17.898h26.847l63.927,50.068c7.667,4.948,16.557,6.505,16.557-7.365V55.662\\n        C125.23,41.792,116.341,43.349,108.674,48.296z\\\"/>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.settingsSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 268.765 268.765\\\" style=\\\"enable-background:new 0 0 268.765 268.765;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Settings\\\">\\n      <g>\\n        <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M267.92,119.461c-0.425-3.778-4.83-6.617-8.639-6.617\\n          c-12.315,0-23.243-7.231-27.826-18.414c-4.682-11.454-1.663-24.812,7.515-33.231c2.889-2.641,3.24-7.062,0.817-10.133\\n          c-6.303-8.004-13.467-15.234-21.289-21.5c-3.063-2.458-7.557-2.116-10.213,0.825c-8.01,8.871-22.398,12.168-33.516,7.529\\n          c-11.57-4.867-18.866-16.591-18.152-29.176c0.235-3.953-2.654-7.39-6.595-7.849c-10.038-1.161-20.164-1.197-30.232-0.08\\n          c-3.896,0.43-6.785,3.786-6.654,7.689c0.438,12.461-6.946,23.98-18.401,28.672c-10.985,4.487-25.272,1.218-33.266-7.574\\n          c-2.642-2.896-7.063-3.252-10.141-0.853c-8.054,6.319-15.379,13.555-21.74,21.493c-2.481,3.086-2.116,7.559,0.802,10.214\\n          c9.353,8.47,12.373,21.944,7.514,33.53c-4.639,11.046-16.109,18.165-29.24,18.165c-4.261-0.137-7.296,2.723-7.762,6.597\\n          c-1.182,10.096-1.196,20.383-0.058,30.561c0.422,3.794,4.961,6.608,8.812,6.608c11.702-0.299,22.937,6.946,27.65,18.415\\n          c4.698,11.454,1.678,24.804-7.514,33.23c-2.875,2.641-3.24,7.055-0.817,10.126c6.244,7.953,13.409,15.19,21.259,21.508\\n          c3.079,2.481,7.559,2.131,10.228-0.81c8.04-8.893,22.427-12.184,33.501-7.536c11.599,4.852,18.895,16.575,18.181,29.167\\n          c-0.233,3.955,2.67,7.398,6.595,7.85c5.135,0.599,10.301,0.898,15.481,0.898c4.917,0,9.835-0.27,14.752-0.817\\n          c3.897-0.43,6.784-3.786,6.653-7.696c-0.451-12.454,6.946-23.973,18.386-28.657c11.059-4.517,25.286-1.211,33.281,7.572\\n          c2.657,2.89,7.047,3.239,10.142,0.848c8.039-6.304,15.349-13.534,21.74-21.494c2.48-3.079,2.13-7.559-0.803-10.213\\n          c-9.353-8.47-12.388-21.946-7.529-33.524c4.568-10.899,15.612-18.217,27.491-18.217l1.662,0.043\\n          c3.853,0.313,7.398-2.655,7.865-6.588C269.044,139.917,269.058,129.639,267.92,119.461z M134.595,179.491\\n          c-24.718,0-44.824-20.106-44.824-44.824c0-24.717,20.106-44.824,44.824-44.824c24.717,0,44.823,20.107,44.823,44.824\\n          C179.418,159.385,159.312,179.491,134.595,179.491z\\\"/>\\n      </g>\\n    </g>\\n  <g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.arrowRightSVG = \"\\n  <svg class=\\\"svg\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 80\\\" xml:space=\\\"preserve\\\">\\n    <polyline fill=\\\"none\\\" stroke-width=\\\"10\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" points=\\\"0.375,0.375 45.63,38.087 0.375,75.8 \\\"/>\\n  </svg>\\n\";\nsvg.arrowLeftSVG = \"\\n  <svg class=\\\"svg\\\" class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 80\\\" xml:space=\\\"preserve\\\">\\n    <polyline fill=\\\"none\\\" stroke-width=\\\"10\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" points=\\\"45.63,75.8 0.375,38.087 45.63,0.375 \\\"/>\\n  </svg> \\n\";\nsvg.fullScreenSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 298.667 298.667\\\" style=\\\"enable-background:new 0 0 298.667 298.667;\\\" xml:space=\\\"preserve\\\">\\n    <g>\\n      <g>\\n        <g>\\n          <polygon points=\\\"42.667,192 0,192 0,298.667 106.667,298.667 106.667,256 42.667,256\\\"/>\\n          <polygon points=\\\"0,106.667 42.667,106.667 42.667,42.667 106.667,42.667 106.667,0 0,0\\\"/>\\n          <polygon points=\\\"192,0 192,42.667 256,42.667 256,106.667 298.667,106.667 298.667,0\\\"/>\\n          <polygon points=\\\"256,256 192,256 192,298.667 298.667,298.667 298.667,192 256,192\\\"/>\\n        </g>\\n      </g>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.loopSVG = \"\\n<svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 32 32\\\" style=\\\"enable-background:new 0 0 32 32;\\\" xml:space=\\\"preserve\\\">\\n  <g>\\n    <g id=\\\"loop_x5F_alt3\\\">\\n      <g>\\n        <path d=\\\"M28,16v2c0,1.102-0.898,2-2,2H11.996L12,16l-8,6l8,6l-0.004-4H26c3.309,0,6-2.695,6-6v-2H28z\\\"/>\\n        <path d=\\\"M4,14c0-1.105,0.898-2,2-2h14v4l7.992-6L20,4v4H6c-3.309,0-6,2.688-6,6v2h4V14z\\\"/>\\n      </g>\\n    </g>\\n  </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n</svg>\";\nsvg.loadingSVG = \"<svg class=\\\"lds-spinner\\\" width=\\\"80px\\\"  height=\\\"80px\\\"  xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid\\\" style=\\\"background: none;\\\"><g transform=\\\"rotate(0 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.9166666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(30 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.8333333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(60 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.75s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(90 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.6666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(120 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5833333333333334s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(150 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.5s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(180 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.4166666666666667s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(210 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.3333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(240 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.25s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(270 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.16666666666666666s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(300 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"-0.08333333333333333s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g><g transform=\\\"rotate(330 50 50)\\\">\\n  <rect x=\\\"47\\\" y=\\\"24\\\" rx=\\\"9.4\\\" ry=\\\"4.8\\\" width=\\\"6\\\" height=\\\"12\\\" fill=\\\"#fff\\\">\\n    <animate attributeName=\\\"opacity\\\" values=\\\"1;0\\\" keyTimes=\\\"0;1\\\" dur=\\\"1s\\\" begin=\\\"0s\\\" repeatCount=\\\"indefinite\\\"></animate>\\n  </rect>\\n</g></svg>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/html/svg.js\n");

/***/ }),

/***/ "../src/html/themes.js":
/*!*****************************!*\
  !*** ../src/html/themes.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var themes = {\n  default: {\n    \"settings-background-color\": \"whitesmoke\",\n    \"hms-background-color\": \"whitesmoke\",\n    \"background-color\": \"whitesmoke\",\n    \"grad-height\": \"0px\",\n    color: \"black\",\n    \"svg-color\": \"black\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  dark: {\n    \"settings-background-color\": \"black\",\n    \"hms-background-color\": \"black\",\n    \"background-color\": \"black\",\n    \"grad-height\": \"0px\",\n    color: \"white\",\n    \"svg-color\": \"white\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(90, 90, 90, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  whiteGold: {\n    \"settings-background-color\": \"white\",\n    \"hms-background-color\": \"white\",\n    \"background-color\": \"white\",\n    \"grad-height\": \"0px\",\n    color: \"#a17f1a\",\n    \"svg-color\": \"#a17f1a\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"#a17f1a\",\n    \"cursor-color\": \"#a17f1a\",\n    \"speedbar-cursor-color\": \"#a17f1a\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"#a17f1a\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  darkGold: {\n    \"settings-background-color\": \"black\",\n    \"hms-background-color\": \"black\",\n    \"background-color\": \"black\",\n    \"grad-height\": \"0px\",\n    color: \"#a17f1a\",\n    \"svg-color\": \"#a17f1a\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"#a17f1a\",\n    \"cursor-color\": \"#a17f1a\",\n    \"speedbar-cursor-color\": \"#a17f1a\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(90, 90, 90, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"#a17f1a\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  transparent: {\n    \"background-color\": \"transparent\",\n    \"settings-background-color\": \"rgba(0,0,0,0.5)\",\n    \"hms-background-color\": \"rgba(0,0,0,0.5)\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    color: \"white\",\n    \"grad-height\": \"60px\",\n    \"svg-color\": \"white\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    border: \"1px solid rgba(255,255,255,0.1)\",\n    \"controls-border\": \"1px solid rgba(255,255,255,0.1)\",\n    \"svg-selected-color\": \"red\"\n  },\n  \"on-top\": {\n    \"background-height\": \"100%\",\n    \"pointer-event-panel-height\": \"calc(100% - 45px)\",\n    \"controls-bottom\": \"0px\",\n    \"settings-panel-bottom\": \"45px\",\n    \"controls-position\": \"0px\"\n  },\n  \"position-default\": {\n    \"background-height\": \"calc(100% - 40px)\",\n    \"pointer-event-panel-height\": \"calc(100% - 40px)\",\n    \"controls-bottom\": \"-0px\",\n    \"settings-panel-bottom\": \"45px\",\n    \"controls-position\": \"40px\"\n  }\n};\n\nmodule.exports = function (theme) {\n  return themes[theme];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2h0bWwvdGhlbWVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9odG1sL3RoZW1lcy5qcz84YmExIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHtcbiAgZGVmYXVsdDoge1xuICAgIFwic2V0dGluZ3MtYmFja2dyb3VuZC1jb2xvclwiOiBcIndoaXRlc21va2VcIixcbiAgICBcImhtcy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwid2hpdGVzbW9rZVwiLFxuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcIndoaXRlc21va2VcIixcbiAgICBcImdyYWQtaGVpZ2h0XCI6IFwiMHB4XCIsXG4gICAgY29sb3I6IFwiYmxhY2tcIixcbiAgICBcInN2Zy1jb2xvclwiOiBcImJsYWNrXCIsXG4gICAgXCJsb29wYmFyLWNvbG9yXCI6IFwiIzgwODA4NlwiLFxuICAgIFwic3BlZWRiYXItY29sb3JcIjogXCIjNjY2XCIsXG4gICAgXCJydW5uaW5nYmFyLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJjdXJzb3ItY29sb3JcIjogXCJyZWRcIixcbiAgICBcInNwZWVkYmFyLWN1cnNvci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwiYnV0dG9uLW9wYWNpdHlcIjogXCIwLjhcIixcbiAgICBcImhvdmVyLWNvbG9yXCI6IFwicmdiYSgyMDAsIDIwMCwgMjAwLCAwLjUpXCIsXG4gICAgXCJzbGlkZXItb2ZmLWNvbG9yXCI6IFwiI2NjY1wiLFxuICAgIFwic2xpZGVyLW9uLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJwcmV2aWV3LWJvcmRlclwiOiBcIjFweCBzb2xpZCByZ2JhKDAsMCwwLDEpXCIsXG4gICAgYm9yZGVyOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMilcIixcbiAgICBcImNvbnRyb2xzLWJvcmRlclwiOiBcIm5vbmVcIixcbiAgICBcInN2Zy1zZWxlY3RlZC1jb2xvclwiOiBcInJlZFwiXG4gIH0sXG4gIGRhcms6IHtcbiAgICBcInNldHRpbmdzLWJhY2tncm91bmQtY29sb3JcIjogXCJibGFja1wiLFxuICAgIFwiaG1zLWJhY2tncm91bmQtY29sb3JcIjogXCJibGFja1wiLFxuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcImJsYWNrXCIsXG4gICAgXCJncmFkLWhlaWdodFwiOiBcIjBweFwiLFxuICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgXCJzdmctY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgIFwibG9vcGJhci1jb2xvclwiOiBcIiM4MDgwODZcIixcbiAgICBcInNwZWVkYmFyLWNvbG9yXCI6IFwiIzY2NlwiLFxuICAgIFwicnVubmluZ2Jhci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwiY3Vyc29yLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJzcGVlZGJhci1jdXJzb3ItY29sb3JcIjogXCJyZWRcIixcbiAgICBcImJ1dHRvbi1vcGFjaXR5XCI6IFwiMC44XCIsXG4gICAgXCJob3Zlci1jb2xvclwiOiBcInJnYmEoOTAsIDkwLCA5MCwgMC41KVwiLFxuICAgIFwic2xpZGVyLW9mZi1jb2xvclwiOiBcIiNjY2NcIixcbiAgICBcInNsaWRlci1vbi1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwicHJldmlldy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgwLDAsMCwxKVwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpXCIsXG4gICAgXCJjb250cm9scy1ib3JkZXJcIjogXCJub25lXCIsXG4gICAgXCJzdmctc2VsZWN0ZWQtY29sb3JcIjogXCJyZWRcIlxuICB9LFxuICB3aGl0ZUdvbGQ6IHtcbiAgICBcInNldHRpbmdzLWJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgIFwiaG1zLWJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcIndoaXRlXCIsXG4gICAgXCJncmFkLWhlaWdodFwiOiBcIjBweFwiLFxuICAgIGNvbG9yOiBcIiNhMTdmMWFcIixcbiAgICBcInN2Zy1jb2xvclwiOiBcIiNhMTdmMWFcIixcbiAgICBcImxvb3BiYXItY29sb3JcIjogXCIjODA4MDg2XCIsXG4gICAgXCJzcGVlZGJhci1jb2xvclwiOiBcIiM2NjZcIixcbiAgICBcInJ1bm5pbmdiYXItY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJjdXJzb3ItY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJzcGVlZGJhci1jdXJzb3ItY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJidXR0b24tb3BhY2l0eVwiOiBcIjAuOFwiLFxuICAgIFwiaG92ZXItY29sb3JcIjogXCJyZ2JhKDIwMCwgMjAwLCAyMDAsIDAuNSlcIixcbiAgICBcInNsaWRlci1vZmYtY29sb3JcIjogXCIjY2NjXCIsXG4gICAgXCJzbGlkZXItb24tY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJwcmV2aWV3LWJvcmRlclwiOiBcIjFweCBzb2xpZCByZ2JhKDAsMCwwLDEpXCIsXG4gICAgYm9yZGVyOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMilcIixcbiAgICBcImNvbnRyb2xzLWJvcmRlclwiOiBcIm5vbmVcIixcbiAgICBcInN2Zy1zZWxlY3RlZC1jb2xvclwiOiBcInJlZFwiXG4gIH0sXG4gIGRhcmtHb2xkOiB7XG4gICAgXCJzZXR0aW5ncy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwiYmxhY2tcIixcbiAgICBcImhtcy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwiYmxhY2tcIixcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJibGFja1wiLFxuICAgIFwiZ3JhZC1oZWlnaHRcIjogXCIwcHhcIixcbiAgICBjb2xvcjogXCIjYTE3ZjFhXCIsXG4gICAgXCJzdmctY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJsb29wYmFyLWNvbG9yXCI6IFwiIzgwODA4NlwiLFxuICAgIFwic3BlZWRiYXItY29sb3JcIjogXCIjNjY2XCIsXG4gICAgXCJydW5uaW5nYmFyLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwiY3Vyc29yLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwic3BlZWRiYXItY3Vyc29yLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwiYnV0dG9uLW9wYWNpdHlcIjogXCIwLjhcIixcbiAgICBcImhvdmVyLWNvbG9yXCI6IFwicmdiYSg5MCwgOTAsIDkwLCAwLjUpXCIsXG4gICAgXCJzbGlkZXItb2ZmLWNvbG9yXCI6IFwiI2NjY1wiLFxuICAgIFwic2xpZGVyLW9uLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwicHJldmlldy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgwLDAsMCwxKVwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpXCIsXG4gICAgXCJjb250cm9scy1ib3JkZXJcIjogXCJub25lXCIsXG4gICAgXCJzdmctc2VsZWN0ZWQtY29sb3JcIjogXCJyZWRcIlxuICB9LFxuICB0cmFuc3BhcmVudDoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgXCJzZXR0aW5ncy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwicmdiYSgwLDAsMCwwLjUpXCIsXG4gICAgXCJobXMtYmFja2dyb3VuZC1jb2xvclwiOiBcInJnYmEoMCwwLDAsMC41KVwiLFxuICAgIFwicHJldmlldy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgwLDAsMCwxKVwiLFxuICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgXCJncmFkLWhlaWdodFwiOiBcIjYwcHhcIixcbiAgICBcInN2Zy1jb2xvclwiOiBcIndoaXRlXCIsXG4gICAgXCJsb29wYmFyLWNvbG9yXCI6IFwiIzgwODA4NlwiLFxuICAgIFwic3BlZWRiYXItY29sb3JcIjogXCIjNjY2XCIsXG4gICAgXCJydW5uaW5nYmFyLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJjdXJzb3ItY29sb3JcIjogXCJyZWRcIixcbiAgICBcInNwZWVkYmFyLWN1cnNvci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwiYnV0dG9uLW9wYWNpdHlcIjogXCIwLjhcIixcbiAgICBcImhvdmVyLWNvbG9yXCI6IFwicmdiYSgyMDAsIDIwMCwgMjAwLCAwLjUpXCIsXG4gICAgXCJzbGlkZXItb2ZmLWNvbG9yXCI6IFwiI2NjY1wiLFxuICAgIFwic2xpZGVyLW9uLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgYm9yZGVyOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMSlcIixcbiAgICBcImNvbnRyb2xzLWJvcmRlclwiOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMSlcIixcbiAgICBcInN2Zy1zZWxlY3RlZC1jb2xvclwiOiBcInJlZFwiXG4gIH0sXG4gIFwib24tdG9wXCI6IHtcbiAgICBcImJhY2tncm91bmQtaGVpZ2h0XCI6IFwiMTAwJVwiLFxuICAgIFwicG9pbnRlci1ldmVudC1wYW5lbC1oZWlnaHRcIjogXCJjYWxjKDEwMCUgLSA0NXB4KVwiLFxuICAgIFwiY29udHJvbHMtYm90dG9tXCI6IFwiMHB4XCIsXG4gICAgXCJzZXR0aW5ncy1wYW5lbC1ib3R0b21cIjogXCI0NXB4XCIsXG4gICAgXCJjb250cm9scy1wb3NpdGlvblwiOiBcIjBweFwiXG4gIH0sXG4gIFwicG9zaXRpb24tZGVmYXVsdFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWhlaWdodFwiOiBcImNhbGMoMTAwJSAtIDQwcHgpXCIsXG4gICAgXCJwb2ludGVyLWV2ZW50LXBhbmVsLWhlaWdodFwiOiBcImNhbGMoMTAwJSAtIDQwcHgpXCIsXG4gICAgXCJjb250cm9scy1ib3R0b21cIjogXCItMHB4XCIsXG4gICAgXCJzZXR0aW5ncy1wYW5lbC1ib3R0b21cIjogXCI0NXB4XCIsXG4gICAgXCJjb250cm9scy1wb3NpdGlvblwiOiBcIjQwcHhcIlxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRoZW1lID0+IHRoZW1lc1t0aGVtZV07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkJBO0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuQkE7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkJBO0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFqSEE7QUFDQTtBQXlIQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/html/themes.js\n");

/***/ }),

/***/ "../src/listeners/body.js":
/*!********************************!*\
  !*** ../src/listeners/body.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    el = _require.el,\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  el(\"body\")[0].addEventListener(\"click\", function (e) {\n    if (e.target.className === \"\".concat(_this.name, \"-speed-value\")) {\n      var speedDisplay = e.target.dataset.speedValue - 0;\n      _this.clip.executionSpeed = e.target.dataset.speedValue;\n      _this.clip.speed == 1 ? speedDisplay = \"Normal\" : speedDisplay = _this.clip.speed;\n      _this.elements.speedCurrent.innerHTML = speedDisplay;\n      var step = 1 / (_this.options.speedValues.length - 1);\n      var positionY = (e.target.dataset.zone * step - 1) * -1 * ((_this.options.speedValues.length - 1) * 16);\n      elid(\"\".concat(_this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9ib2R5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvYm9keS5qcz9kZGJkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZWwsIGVsaWQgfSA9IHJlcXVpcmUoYC4uL2hlbHBlcnNgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfdGhpcyA9PiB7XG4gIGVsKGBib2R5YClbMF0uYWRkRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCBlID0+IHtcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NOYW1lID09PSBgJHtfdGhpcy5uYW1lfS1zcGVlZC12YWx1ZWApIHtcbiAgICAgIGxldCBzcGVlZERpc3BsYXkgPSBlLnRhcmdldC5kYXRhc2V0LnNwZWVkVmFsdWUgLSAwO1xuICAgICAgX3RoaXMuY2xpcC5leGVjdXRpb25TcGVlZCA9IGUudGFyZ2V0LmRhdGFzZXQuc3BlZWRWYWx1ZTtcbiAgICAgIF90aGlzLmNsaXAuc3BlZWQgPT0gMVxuICAgICAgICA/IChzcGVlZERpc3BsYXkgPSBgTm9ybWFsYClcbiAgICAgICAgOiAoc3BlZWREaXNwbGF5ID0gX3RoaXMuY2xpcC5zcGVlZCk7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zcGVlZEN1cnJlbnQuaW5uZXJIVE1MID0gc3BlZWREaXNwbGF5O1xuXG4gICAgICBjb25zdCBzdGVwID0gMSAvIChfdGhpcy5vcHRpb25zLnNwZWVkVmFsdWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgICBjb25zdCBwb3NpdGlvblkgPVxuICAgICAgICAoZS50YXJnZXQuZGF0YXNldC56b25lICogc3RlcCAtIDEpICpcbiAgICAgICAgLTEgKlxuICAgICAgICAoKF90aGlzLm9wdGlvbnMuc3BlZWRWYWx1ZXMubGVuZ3RoIC0gMSkgKiAxNik7XG5cbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0tc3BlZWQtY3Vyc29yYCkuc3R5bGUudG9wID0gcG9zaXRpb25ZICsgYHB4YDtcbiAgICB9XG4gIH0pO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/body.js\n");

/***/ }),

/***/ "../src/listeners/controls.js":
/*!************************************!*\
  !*** ../src/listeners/controls.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  elid(\"\".concat(_this.name, \"-controls\")).onmouseover = function () {\n    if (!_this.settings.loopActivated) {\n      return;\n    }\n\n    _this.elements.loopBarStart.classList.remove(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.remove(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.add(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.add(\"m-fadeIn\");\n  };\n\n  elid(\"\".concat(_this.name, \"-controls\")).onmouseout = function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(this, e) || e === this) {\n      return;\n    }\n\n    if (!_this.settings.loopActivated) {\n      return;\n    }\n\n    _this.elements.loopBarStart.classList.add(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.add(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.remove(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.remove(\"m-fadeIn\");\n  };\n\n  var twt = false;\n\n  elid(\"\".concat(_this.name, \"-controls\")).ontouchstart = function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(_this.elements.statusButton, e) || e === _this.elements.statusButton || isDescendant(_this.elements.settingsButton, e) || e === _this.elements.settingsButton || isDescendant(_this.elements.fullScreenButton, e) || e === _this.elements.fullScreenButton || isDescendant(_this.elements.loopButton, e) || e === _this.elements.loopButton || isDescendant(_this.elements.totalBar, e) || e === _this.elements.totalBar) {\n      return;\n    }\n\n    _this.elements.volumeControl.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.volumeBar.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.volumeBarHelper.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.timeDisplay.className = \"\".concat(_this.name, \"-time-width-transition\");\n    _this.elements.volumeCursor.className = \"\".concat(_this.name, \"-volume-cursor-transition\");\n    twt = true;\n  };\n\n  window.addEventListener(\"touchstart\", function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(elid(\"\".concat(_this.name, \"-controls\")), e) || e === elid(\"\".concat(_this.name, \"-controls\"))) {\n      return;\n    }\n\n    if (twt) {\n      _this.elements.volumeControl.className = \"\";\n      _this.elements.volumeBar.className = \"\";\n      _this.elements.volumeBarHelper.className = \"\";\n      _this.elements.timeDisplay.className = \"\";\n      _this.elements.volumeCursor.className = \"\";\n    }\n  }); // elid(`${_this.name}-left-controls`).ontouchstart = function (event) {\n  //   const e = event.toElement || event.relatedTarget || event.target;\n  //     if (isDescendant(_this.elements.statusBtn, e) || e === _this.elements.statusBtn) {\n  //       return false;\n  //     }\n  //     return \"\";\n  // };\n};\n\nfunction isDescendant(parent, child) {\n  var node = child.parentNode;\n\n  while (node != null) {\n    if (node == parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9jb250cm9scy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvbGlzdGVuZXJzL2NvbnRyb2xzLmpzPzI0OGYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBlbGlkIH0gPSByZXF1aXJlKGAuLi9oZWxwZXJzYCk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3RoaXMgPT4ge1xuICBlbGlkKGAke190aGlzLm5hbWV9LWNvbnRyb2xzYCkub25tb3VzZW92ZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5sb29wQWN0aXZhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QucmVtb3ZlKGBtLWZhZGVPdXRgKTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC5yZW1vdmUoYG0tZmFkZU91dGApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QuYWRkKGBtLWZhZGVJbmApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LmFkZChgbS1mYWRlSW5gKTtcbiAgfTtcblxuICBlbGlkKGAke190aGlzLm5hbWV9LWNvbnRyb2xzYCkub25tb3VzZW91dCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcbiAgICBpZiAoaXNEZXNjZW5kYW50KHRoaXMsIGUpIHx8IGUgPT09IHRoaXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIV90aGlzLnNldHRpbmdzLmxvb3BBY3RpdmF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC5hZGQoYG0tZmFkZU91dGApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LmFkZChgbS1mYWRlT3V0YCk7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC5yZW1vdmUoYG0tZmFkZUluYCk7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QucmVtb3ZlKGBtLWZhZGVJbmApO1xuICB9O1xuXG4gIGxldCB0d3QgPSBmYWxzZTtcbiAgZWxpZChgJHtfdGhpcy5uYW1lfS1jb250cm9sc2ApLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcbiAgICBpZiAoXG4gICAgICBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLCBlKSB8fFxuICAgICAgZSA9PT0gX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uIHx8XG4gICAgICBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NCdXR0b24sIGUpIHx8XG4gICAgICBlID09PSBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc0J1dHRvbiB8fFxuICAgICAgaXNEZXNjZW5kYW50KF90aGlzLmVsZW1lbnRzLmZ1bGxTY3JlZW5CdXR0b24sIGUpIHx8XG4gICAgICBlID09PSBfdGhpcy5lbGVtZW50cy5mdWxsU2NyZWVuQnV0dG9uIHx8XG4gICAgICBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMubG9vcEJ1dHRvbiwgZSkgfHxcbiAgICAgIGUgPT09IF90aGlzLmVsZW1lbnRzLmxvb3BCdXR0b24gfHxcbiAgICAgIGlzRGVzY2VuZGFudChfdGhpcy5lbGVtZW50cy50b3RhbEJhciwgZSkgfHxcbiAgICAgIGUgPT09IF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQ29udHJvbC5jbGFzc05hbWUgPSBgJHtcbiAgICAgIF90aGlzLm5hbWVcbiAgICB9LXZvbHVtZS13aWR0aC10cmFuc2l0aW9uYDtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXIuY2xhc3NOYW1lID0gYCR7XG4gICAgICBfdGhpcy5uYW1lXG4gICAgfS12b2x1bWUtd2lkdGgtdHJhbnNpdGlvbmA7XG4gICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQmFySGVscGVyLmNsYXNzTmFtZSA9IGAke1xuICAgICAgX3RoaXMubmFtZVxuICAgIH0tdm9sdW1lLXdpZHRoLXRyYW5zaXRpb25gO1xuICAgIF90aGlzLmVsZW1lbnRzLnRpbWVEaXNwbGF5LmNsYXNzTmFtZSA9IGAke1xuICAgICAgX3RoaXMubmFtZVxuICAgIH0tdGltZS13aWR0aC10cmFuc2l0aW9uYDtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDdXJzb3IuY2xhc3NOYW1lID0gYCR7XG4gICAgICBfdGhpcy5uYW1lXG4gICAgfS12b2x1bWUtY3Vyc29yLXRyYW5zaXRpb25gO1xuICAgIHR3dCA9IHRydWU7XG4gIH07XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcbiAgICBpZiAoXG4gICAgICBpc0Rlc2NlbmRhbnQoZWxpZChgJHtfdGhpcy5uYW1lfS1jb250cm9sc2ApLCBlKSB8fFxuICAgICAgZSA9PT0gZWxpZChgJHtfdGhpcy5uYW1lfS1jb250cm9sc2ApXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0d3QpIHtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuY2xhc3NOYW1lID0gYGA7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXIuY2xhc3NOYW1lID0gYGA7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXJIZWxwZXIuY2xhc3NOYW1lID0gYGA7XG4gICAgICBfdGhpcy5lbGVtZW50cy50aW1lRGlzcGxheS5jbGFzc05hbWUgPSBgYDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUN1cnNvci5jbGFzc05hbWUgPSBgYDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVsaWQoYCR7X3RoaXMubmFtZX0tbGVmdC1jb250cm9sc2ApLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAvLyAgIGNvbnN0IGUgPSBldmVudC50b0VsZW1lbnQgfHwgZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudC50YXJnZXQ7XG4gIC8vICAgICBpZiAoaXNEZXNjZW5kYW50KF90aGlzLmVsZW1lbnRzLnN0YXR1c0J0biwgZSkgfHwgZSA9PT0gX3RoaXMuZWxlbWVudHMuc3RhdHVzQnRuKSB7XG4gIC8vICAgICAgIHJldHVybiBmYWxzZTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIHJldHVybiBcIlwiO1xuICAvLyB9O1xufTtcblxuZnVuY3Rpb24gaXNEZXNjZW5kYW50KHBhcmVudCwgY2hpbGQpIHtcbiAgbGV0IG5vZGUgPSBjaGlsZC5wYXJlbnROb2RlO1xuICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgaWYgKG5vZGUgPT0gcGFyZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/listeners/controls.js\n");

/***/ }),

/***/ "../src/listeners/donkeyclip.js":
/*!**************************************!*\
  !*** ../src/listeners/donkeyclip.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (_this) {\n  _this.elements.donkeyclipButton.addEventListener(\"click\", function () {\n    var u = create_UUID();\n    var popupDC = window.open(\"https://donkeyclip.com?u=\".concat(u));\n\n    var definition = _this.clip.exportState({\n      unprocessed: true\n    });\n\n    var clipClass = _this.clipClass;\n    window.addEventListener(\"message\", receiveMessage, false);\n\n    function receiveMessage(event) {\n      if (event.data === u) {\n        popupDC.postMessage(JSON.stringify({\n          definition: definition,\n          clipClass: clipClass,\n          u: u\n        }), \"*\");\n      }\n    }\n  });\n};\n\nfunction create_UUID() {\n  var dt = new Date().getTime();\n  var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (dt + Math.random() * 16) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c == \"x\" ? r : r & 0x3 | 0x8).toString(16);\n  });\n  return uuid;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9kb25rZXljbGlwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvZG9ua2V5Y2xpcC5qcz8xM2RkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX3RoaXMgPT4ge1xuICBfdGhpcy5lbGVtZW50cy5kb25rZXljbGlwQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKCkgPT4ge1xuICAgIGNvbnN0IHUgPSBjcmVhdGVfVVVJRCgpO1xuICAgIGNvbnN0IHBvcHVwREMgPSB3aW5kb3cub3BlbihgaHR0cHM6Ly9kb25rZXljbGlwLmNvbT91PSR7dX1gKTtcbiAgICBjb25zdCBkZWZpbml0aW9uID0gX3RoaXMuY2xpcC5leHBvcnRTdGF0ZSh7IHVucHJvY2Vzc2VkOiB0cnVlIH0pO1xuICAgIGNvbnN0IGNsaXBDbGFzcyA9IF90aGlzLmNsaXBDbGFzcztcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgcmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcbiAgICBmdW5jdGlvbiByZWNlaXZlTWVzc2FnZShldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmRhdGEgPT09IHUpIHtcbiAgICAgICAgcG9wdXBEQy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7IGRlZmluaXRpb24sIGNsaXBDbGFzcywgdSB9KSwgXCIqXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVfVVVJRCgpIHtcbiAgbGV0IGR0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGNvbnN0IHV1aWQgPSBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oXG4gICAgY1xuICApIHtcbiAgICBjb25zdCByID0gKGR0ICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcbiAgICBkdCA9IE1hdGguZmxvb3IoZHQgLyAxNik7XG4gICAgcmV0dXJuIChjID09IFwieFwiID8gciA6IChyICYgMHgzKSB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICB9KTtcbiAgcmV0dXJuIHV1aWQ7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/donkeyclip.js\n");

/***/ }),

/***/ "../src/listeners/fullscreen.js":
/*!**************************************!*\
  !*** ../src/listeners/fullscreen.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (_this) {\n  _this.elements.fullScreenButton.addEventListener(\"click\", function () {\n    var elFullScreen = _this.clip.props.host.className.includes(\"full-screen\");\n\n    _this.clip.props.host !== _this.options.host && !elFullScreen ? _this.clip.props.host.appendChild(_this.elements.mcPlayer) : null;\n    _this.clip.props.host !== _this.options.host && elFullScreen ? _this.options.host.appendChild(_this.elements.mcPlayer) : null;\n    elFullScreen ? _this.exitFullscreen() : _this.launchIntoFullscreen(_this.clip.props.host);\n\n    _this.clip.props.host.classList.toggle(\"full-screen\");\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9mdWxsc2NyZWVuLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvZnVsbHNjcmVlbi5qcz9iNjZhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX3RoaXMgPT4ge1xuICBfdGhpcy5lbGVtZW50cy5mdWxsU2NyZWVuQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKCkgPT4ge1xuICAgIGNvbnN0IGVsRnVsbFNjcmVlbiA9IF90aGlzLmNsaXAucHJvcHMuaG9zdC5jbGFzc05hbWUuaW5jbHVkZXMoXG4gICAgICBgZnVsbC1zY3JlZW5gXG4gICAgKTtcbiAgICBfdGhpcy5jbGlwLnByb3BzLmhvc3QgIT09IF90aGlzLm9wdGlvbnMuaG9zdCAmJiAhZWxGdWxsU2NyZWVuXG4gICAgICA/IF90aGlzLmNsaXAucHJvcHMuaG9zdC5hcHBlbmRDaGlsZChfdGhpcy5lbGVtZW50cy5tY1BsYXllcilcbiAgICAgIDogbnVsbDtcbiAgICBfdGhpcy5jbGlwLnByb3BzLmhvc3QgIT09IF90aGlzLm9wdGlvbnMuaG9zdCAmJiBlbEZ1bGxTY3JlZW5cbiAgICAgID8gX3RoaXMub3B0aW9ucy5ob3N0LmFwcGVuZENoaWxkKF90aGlzLmVsZW1lbnRzLm1jUGxheWVyKVxuICAgICAgOiBudWxsO1xuXG4gICAgZWxGdWxsU2NyZWVuXG4gICAgICA/IF90aGlzLmV4aXRGdWxsc2NyZWVuKClcbiAgICAgIDogX3RoaXMubGF1bmNoSW50b0Z1bGxzY3JlZW4oX3RoaXMuY2xpcC5wcm9wcy5ob3N0KTtcbiAgICBfdGhpcy5jbGlwLnByb3BzLmhvc3QuY2xhc3NMaXN0LnRvZ2dsZShgZnVsbC1zY3JlZW5gKTtcbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/listeners/fullscreen.js\n");

/***/ }),

/***/ "../src/listeners/loopBarEnd.js":
/*!**************************************!*\
  !*** ../src/listeners/loopBarEnd.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMoveLoopEnd = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.totalBar.offsetWidth) {\n      positionX = _this.elements.totalBar.offsetWidth;\n    }\n\n    if (_this.elements.runningBar.offsetWidth >= _this.elements.loopBar.offsetWidth) {\n      _this.elements.runningBar.style.width = _this.elements.loopBar.offsetWidth + \"px\";\n    }\n\n    if (_this.settings.loopLastPositionXPxls - positionX < 0) {\n      _this.elements.loopBar.style.width = Math.abs(_this.settings.loopLastPositionXPxls - positionX) + \"px\";\n    } else {\n      _this.elements.loopBar.style.left = positionX + \"px\";\n      _this.settings.loopLastPositionXPxls = positionX;\n    }\n\n    _this.settings.loopEndMillisecond = Math.round(_this.clip.duration * ((parseFloat(_this.elements.loopBar.style.left) || 0) + parseFloat(_this.elements.loopBar.style.width)) / _this.elements.totalBar.offsetWidth);\n\n    if (_this.settings.loopEndMillisecond < _this.clip.runTimeInfo.currentMillisecond) {\n      _this.settings.loopJourney = true;\n    }\n\n    if (_this.settings.loopStartMillisecond > _this.settings.loopEndMillisecond) {\n      _this.settings.loopStartMillisecond = _this.settings.loopEndMillisecond;\n      _this.settings.loopJourney = true;\n    }\n\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n  };\n\n  _this.listeners.onMouseUpLoopEnd = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = false;\n    e.preventDefault();\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth / _this.elements.loopBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n\n    if (_this.settings.loopJourney) {\n      _this.createProgressDrag(_this.elements.runningBar.offsetWidth);\n\n      _this.settings.loopJourney = false;\n    }\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUpLoopEnd, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpLoopEnd, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveLoopEnd, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveLoopEnd, false);\n\n    _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n      passive: true\n    }, false);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.runTimeInfo.state === \"idle\") {\n        var loopms;\n\n        if (_this.clip.speed >= 0) {\n          loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else if (_this.clip.runTimeInfo.state === \"completed\") {\n        var _loopms;\n\n        if (_this.clip.speed >= 0) {\n          _loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          _loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, _loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.play();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDownLoopEnd = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = true;\n    _this.settings.needsUpdate = true;\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n\n      _this.settings.playAfterResize = true;\n    }\n\n    e.preventDefault();\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth + \"px\";\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft + \"px\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth + \"px\";\n\n    _this.elements.loopBar.removeEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.removeEventListener(\"touchstart\", _this.listeners.onMouseDown, false);\n\n    _this.listeners.onCursorMoveLoopEnd(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpLoopEnd, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpLoopEnd, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveLoopEnd, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveLoopEnd, false);\n  };\n\n  _this.elements.loopBarEnd.addEventListener(\"mousedown\", _this.listeners.onMouseDownLoopEnd, false);\n\n  _this.elements.loopBarEnd.addEventListener(\"touchstart\", _this.listeners.onMouseDownLoopEnd, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/listeners/loopBarEnd.js\n");

/***/ }),

/***/ "../src/listeners/loopBarStart.js":
/*!****************************************!*\
  !*** ../src/listeners/loopBarStart.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMoveLoopStart = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n    var positionX = Math.round(clientX - viewportOffset.left);\n    var endPositionsInPxls = Math.round(_this.settings.loopEndMillisecond / _this.clip.duration * _this.elements.totalBar.offsetWidth);\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.totalBar.offsetWidth) {\n      positionX = _this.elements.totalBar.offsetWidth;\n    }\n\n    var runningBarWidthInPxls = _this.clip.runTimeInfo.currentMillisecond / _this.clip.duration * _this.elements.totalBar.offsetWidth - positionX;\n    _this.elements.loopBar.style.left = positionX + \"px\";\n    _this.elements.loopBar.style.width = endPositionsInPxls - positionX + \"px\";\n    _this.elements.runningBar.style.width = runningBarWidthInPxls + \"px\";\n    _this.settings.loopLastPositionXPxls = positionX;\n    _this.settings.loopStartMillisecond = Math.round(_this.clip.duration * _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth);\n\n    if (_this.settings.loopEndMillisecond < _this.settings.loopStartMillisecond) {\n      _this.settings.loopEndMillisecond = _this.settings.loopStartMillisecond;\n      _this.elements.loopBar.style.width = \"0px\";\n      _this.elements.runningBar.style.width = \"0px\";\n    }\n\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n\n    if (_this.settings.loopStartMillisecond > _this.clip.runTimeInfo.currentMillisecond) {\n      _this.settings.loopJourney = true;\n    }\n  };\n\n  _this.listeners.onMouseUpLoopStart = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = false;\n    e.preventDefault();\n\n    if (_this.settings.loopJourney) {\n      _this.createProgressDrag(_this.elements.runningBar.offsetWidth);\n\n      _this.settings.loopJourney = false;\n    }\n\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.settings.loopStartMillisecond = Math.round(_this.clip.duration * _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth);\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth / _this.elements.loopBar.offsetWidth * 100 + \"%\";\n    removeListener(\"mouseup\", _this.listeners.onMouseUpLoopStart, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpLoopStart, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveLoopStart, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveLoopStart, false);\n\n    _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n      passive: true\n    }, false);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.runTimeInfo.state === \"idle\") {\n        var loopms;\n\n        if (_this.clip.speed >= 0) {\n          loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, loopms, {\n          before: \"pause\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.play();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDownLoopStart = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = true;\n    e.preventDefault();\n    _this.settings.needsUpdate = true;\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n\n      _this.settings.playAfterResize = true;\n    }\n\n    _this.elements.loopBar.removeEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.removeEventListener(\"touchstart\", _this.listeners.onMouseDown, false);\n\n    _this.listeners.onCursorMoveLoopStart(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpLoopStart, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpLoopStart, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveLoopStart, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveLoopStart, false);\n  };\n\n  _this.elements.loopBarStart.addEventListener(\"mousedown\", _this.listeners.onMouseDownLoopStart, false);\n\n  _this.elements.loopBarStart.addEventListener(\"touchstart\", _this.listeners.onMouseDownLoopStart, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/listeners/loopBarStart.js\n");

/***/ }),

/***/ "../src/listeners/loopBtn.js":
/*!***********************************!*\
  !*** ../src/listeners/loopBtn.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  _this.elements.loopButton.onclick = function () {\n    _this.settings.loopActivated = !_this.settings.loopActivated;\n\n    _this.elements.loopButton.classList.toggle(\"svg-selected\");\n\n    _this.elements.loopBarStart.classList.toggle(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.toggle(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.toggle(\"m-fadeIn\");\n\n    _this.elements.loopBarStart.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.loopBarEnd.classList.toggle(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"m-fadeOut\");\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"m-fadeIn\");\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"\".concat(_this.name, \"-hide\"));\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n    _this.settings.needsUpdate = true;\n\n    if (!_this.settings.loopActivated) {\n      _this.elements.loopBar.style.left = \"0%\";\n      _this.elements.loopBar.style.width = \"100%\";\n      _this.settings.loopStartMillisecond = 0;\n      _this.settings.loopEndMillisecond = _this.clip.duration;\n      _this.settings.loopLastPositionXPxls = 0;\n      _this.settings.loopLastPositionXPercentage = 0;\n      _this.elements.runningBar.style.width = _this.clip.runTimeInfo.currentMillisecond / _this.clip.duration * 100 + \"%\";\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9sb29wQnRuLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvbG9vcEJ0bi5qcz83OTgwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZWxpZCB9ID0gcmVxdWlyZShgLi4vaGVscGVyc2ApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF90aGlzID0+IHtcbiAgX3RoaXMuZWxlbWVudHMubG9vcEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgIF90aGlzLnNldHRpbmdzLmxvb3BBY3RpdmF0ZWQgPSAhX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZDtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoYHN2Zy1zZWxlY3RlZGApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QudG9nZ2xlKGBtLWZhZGVPdXRgKTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC50b2dnbGUoYG0tZmFkZU91dGApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QudG9nZ2xlKGBtLWZhZGVJbmApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QudG9nZ2xlKGAke190aGlzLm5hbWV9LWhpZGVgKTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC50b2dnbGUoYG0tZmFkZUluYCk7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QudG9nZ2xlKGAke190aGlzLm5hbWV9LWhpZGVgKTtcbiAgICBlbGlkKGAke190aGlzLm5hbWV9LWxvb3AtdGltZWApLmNsYXNzTGlzdC50b2dnbGUoYG0tZmFkZU91dGApO1xuICAgIGVsaWQoYCR7X3RoaXMubmFtZX0tbG9vcC10aW1lYCkuY2xhc3NMaXN0LnRvZ2dsZShgbS1mYWRlSW5gKTtcbiAgICBlbGlkKGAke190aGlzLm5hbWV9LWxvb3AtdGltZWApLmNsYXNzTGlzdC50b2dnbGUoYCR7X3RoaXMubmFtZX0taGlkZWApO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEVuZFRpbWUuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubG9vcEVuZE1pbGxpc2Vjb25kO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BTdGFydFRpbWUuaW5uZXJIVE1MID1cbiAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BTdGFydE1pbGxpc2Vjb25kO1xuICAgIF90aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIGlmICghX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZCkge1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5zdHlsZS5sZWZ0ID0gYDAlYDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIuc3R5bGUud2lkdGggPSBgMTAwJWA7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sb29wU3RhcnRNaWxsaXNlY29uZCA9IDA7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQgPSBfdGhpcy5jbGlwLmR1cmF0aW9uO1xuICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcExhc3RQb3NpdGlvblhQeGxzID0gMDtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BMYXN0UG9zaXRpb25YUGVyY2VudGFnZSA9IDA7XG4gICAgICBfdGhpcy5lbGVtZW50cy5ydW5uaW5nQmFyLnN0eWxlLndpZHRoID1cbiAgICAgICAgKF90aGlzLmNsaXAucnVuVGltZUluZm8uY3VycmVudE1pbGxpc2Vjb25kIC8gX3RoaXMuY2xpcC5kdXJhdGlvbikgKlxuICAgICAgICAgIDEwMCArXG4gICAgICAgIGAlYDtcbiAgICB9XG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/listeners/loopBtn.js\n");

/***/ }),

/***/ "../src/listeners/loopStartEnd.js":
/*!****************************************!*\
  !*** ../src/listeners/loopStartEnd.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (_this) {\n  _this.listeners.editableLoopStartTime = function () {\n    _this.elements.editableLoopStartTime.value = _this.elements.loopStartTime.innerHTML;\n\n    _this.elements.loopStartTime.replaceWith(_this.elements.editableLoopStartTime);\n\n    _this.elements.editableLoopStartTime.focus();\n  };\n\n  _this.listeners.editableLoopEndTime = function () {\n    _this.elements.editableLoopEndTime.value = _this.elements.loopEndTime.innerHTML;\n\n    _this.elements.loopEndTime.replaceWith(_this.elements.editableLoopEndTime);\n\n    _this.elements.editableLoopEndTime.focus();\n  };\n\n  _this.elements.editableLoopEndTime.onkeydown = _this.elements.editableLoopStartTime.onkeydown = function (e) {\n    e.preventDefault();\n\n    if (e.keyCode === 13) {\n      _this.elements.editableLoopStartTime.onfocusout();\n\n      _this.elements.editableLoopEndTime.onfocusout();\n    }\n\n    if (e.keyCode === 8) {\n      e.target.value = e.target.value.toString().substring(0, e.target.value.toString().length - 1);\n    }\n\n    if (e.keyCode === 13) {\n      e.target.blur();\n    }\n\n    var newValue = parseFloat((e.target.value || 0).toString() + e.key);\n\n    if (newValue > _this.clip.duration) {\n      return;\n    }\n\n    e.target.value = newValue;\n\n    if (e.target === _this.elements.editableLoopStartTime) {\n      var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n      var event = {\n        preventDefault: function preventDefault() {},\n        clientX: _this.elements.totalBar.offsetWidth / _this.clip.duration * e.target.value + viewportOffset.left\n      };\n\n      _this.listeners.onMouseDownLoopStart(event);\n\n      _this.listeners.onCursorMoveLoopStart(event);\n\n      _this.listeners.onMouseUpLoopStart(event);\n    } else if (e.target === _this.elements.editableLoopEndTime) {\n      var _viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n      var _event = {\n        preventDefault: function preventDefault() {},\n        clientX: _this.elements.totalBar.offsetWidth / _this.clip.duration * e.target.value + _viewportOffset.left\n      };\n\n      _this.listeners.onMouseDownLoopEnd(_event);\n\n      _this.listeners.onCursorMoveLoopEnd(_event);\n\n      _this.listeners.onMouseUpLoopEnd(_event);\n    }\n  };\n\n  _this.elements.loopStartTime.onclick = _this.listeners.editableLoopStartTime;\n  _this.elements.loopEndTime.onclick = _this.listeners.editableLoopEndTime;\n\n  _this.elements.editableLoopStartTime.onfocusout = function () {\n    _this.elements.editableLoopStartTime.replaceWith(_this.elements.loopStartTime);\n  };\n\n  _this.elements.editableLoopEndTime.onfocusout = function () {\n    _this.elements.editableLoopEndTime.replaceWith(_this.elements.loopEndTime);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9sb29wU3RhcnRFbmQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2xpc3RlbmVycy9sb29wU3RhcnRFbmQuanM/YmY1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF90aGlzID0+IHtcbiAgX3RoaXMubGlzdGVuZXJzLmVkaXRhYmxlTG9vcFN0YXJ0VGltZSA9ICgpID0+IHtcbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUudmFsdWUgPVxuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcFN0YXJ0VGltZS5pbm5lckhUTUw7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcFN0YXJ0VGltZS5yZXBsYWNlV2l0aChcbiAgICAgIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcFN0YXJ0VGltZVxuICAgICk7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLmZvY3VzKCk7XG4gIH07XG5cbiAgX3RoaXMubGlzdGVuZXJzLmVkaXRhYmxlTG9vcEVuZFRpbWUgPSAoKSA9PiB7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS52YWx1ZSA9XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wRW5kVGltZS5pbm5lckhUTUw7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEVuZFRpbWUucmVwbGFjZVdpdGgoX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZSk7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS5mb2N1cygpO1xuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUub25rZXlkb3duID0gX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLm9ua2V5ZG93biA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLm9uZm9jdXNvdXQoKTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUub25mb2N1c291dCgpO1xuICAgIH1cbiAgICBpZiAoZS5rZXlDb2RlID09PSA4KSB7XG4gICAgICBlLnRhcmdldC52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIC50b1N0cmluZygpXG4gICAgICAgIC5zdWJzdHJpbmcoMCwgZS50YXJnZXQudmFsdWUudG9TdHJpbmcoKS5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgZS50YXJnZXQuYmx1cigpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1ZhbHVlID0gcGFyc2VGbG9hdCgoZS50YXJnZXQudmFsdWUgfHwgMCkudG9TdHJpbmcoKSArIGUua2V5KTtcblxuICAgIGlmIChuZXdWYWx1ZSA+IF90aGlzLmNsaXAuZHVyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS50YXJnZXQudmFsdWUgPSBuZXdWYWx1ZTtcblxuICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lKSB7XG4gICAgICBjb25zdCB2aWV3cG9ydE9mZnNldCA9IF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgZXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiAoKSA9PiB7fSxcbiAgICAgICAgY2xpZW50WDpcbiAgICAgICAgICAoX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGggLyBfdGhpcy5jbGlwLmR1cmF0aW9uKSAqXG4gICAgICAgICAgICBlLnRhcmdldC52YWx1ZSArXG4gICAgICAgICAgdmlld3BvcnRPZmZzZXQubGVmdFxuICAgICAgfTtcbiAgICAgIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlRG93bkxvb3BTdGFydChldmVudCk7XG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlTG9vcFN0YXJ0KGV2ZW50KTtcbiAgICAgIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXBMb29wU3RhcnQoZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUpIHtcbiAgICAgIGNvbnN0IHZpZXdwb3J0T2Zmc2V0ID0gX3RoaXMuZWxlbWVudHMudG90YWxCYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBldmVudCA9IHtcbiAgICAgICAgcHJldmVudERlZmF1bHQ6ICgpID0+IHt9LFxuICAgICAgICBjbGllbnRYOlxuICAgICAgICAgIChfdGhpcy5lbGVtZW50cy50b3RhbEJhci5vZmZzZXRXaWR0aCAvIF90aGlzLmNsaXAuZHVyYXRpb24pICpcbiAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlICtcbiAgICAgICAgICB2aWV3cG9ydE9mZnNldC5sZWZ0XG4gICAgICB9O1xuICAgICAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duTG9vcEVuZChldmVudCk7XG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlTG9vcEVuZChldmVudCk7XG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwTG9vcEVuZChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLmxvb3BTdGFydFRpbWUub25jbGljayA9IF90aGlzLmxpc3RlbmVycy5lZGl0YWJsZUxvb3BTdGFydFRpbWU7XG4gIF90aGlzLmVsZW1lbnRzLmxvb3BFbmRUaW1lLm9uY2xpY2sgPSBfdGhpcy5saXN0ZW5lcnMuZWRpdGFibGVMb29wRW5kVGltZTtcblxuICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUub25mb2N1c291dCA9ICgpID0+IHtcbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUucmVwbGFjZVdpdGgoXG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wU3RhcnRUaW1lXG4gICAgKTtcbiAgfTtcblxuICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BFbmRUaW1lLm9uZm9jdXNvdXQgPSAoKSA9PiB7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS5yZXBsYWNlV2l0aChfdGhpcy5lbGVtZW50cy5sb29wRW5kVGltZSk7XG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/loopStartEnd.js\n");

/***/ }),

/***/ "../src/listeners/preview.js":
/*!***********************************!*\
  !*** ../src/listeners/preview.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // only on desctop devices\n  if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n    var loopBarMouseInOut = function loopBarMouseInOut() {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"m-fadeOut\");\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"m-fadeIn\");\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"\".concat(_this.name, \"-hide\")); // if (elid(`${_this.name}-hover-display`).className.includes(`m-fadeIn`)) {\n      //   _this.previewJourney = hoverTimeCapsule.startJourney(_this.previewClip);\n      // } else {\n      //   _this.previewJourney.destination();\n      // }\n\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n    };\n\n    var loopBarAddListeners = function loopBarAddListeners() {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      loopBarMouseInOut();\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n      removeListener(\"mouseup\", loopBarAddListeners, false);\n      removeListener(\"touchend\", loopBarAddListeners, false);\n      removeListener(\"mousemove\", loopBarMouseMove, false);\n      removeListener(\"touchmove\", loopBarMouseMove, false);\n    };\n\n    _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n\n    _this.elements.loopBar.onmousedown = function () {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = null;\n      _this.elements.loopBar.onmousemove = null;\n      addListener(\"mouseup\", loopBarAddListeners, false);\n      addListener(\"touchend\", loopBarAddListeners, false);\n      addListener(\"mousemove\", loopBarMouseMove, false);\n      addListener(\"touchmove\", loopBarMouseMove, false);\n    };\n\n    _this.elements.loopBar.onmouseup = function () {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      removeListener(\"mouseup\", loopBarAddListeners, false);\n      removeListener(\"touchend\", loopBarAddListeners, false);\n      removeListener(\"mousemove\", loopBarMouseMove, false);\n      removeListener(\"touchmove\", loopBarMouseMove, false);\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n    };\n\n    var loopBarMouseMove = function loopBarMouseMove(e) {\n      var clientX = e.clientX;\n\n      var viewportOffset = _this.elements.loopBar.getBoundingClientRect();\n\n      if (clientX - viewportOffset.left + _this.settings.loopLastPositionXPxls > _this.settings.loopLastPositionXPxls + _this.elements.loopBar.offsetWidth && !_this.settings.resizeLoop) {\n        elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = _this.settings.loopEndMillisecond;\n        return;\n      } else if (clientX - viewportOffset.left < 0 && !_this.settings.resizeLoop) {\n        elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = _this.settings.loopStartMillisecond;\n        return;\n      }\n\n      var positionX = clientX - viewportOffset.left + _this.settings.loopLastPositionXPxls;\n\n      if (positionX < 0) {\n        positionX = 0;\n      }\n\n      var previewWidth = elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth * _this.previewScale;\n\n      var halfPreviewWidth = previewWidth / 2;\n      var clipWidth = elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth;\n      var halfClipWidth = clipWidth / 2; // console.log(\n      //   elid(`${_this.name}-hover-display`).offsetWidth,\n      //   _this.previewScale,\n      //   positionX,\n      //   clipWidth,\n      //   halfClipWidth,\n      //   previewWidth,\n      //   halfPreviewWidth\n      // );\n\n      var left = positionX - halfClipWidth; // console.log(left, halfClipWidth);\n\n      if (positionX - halfPreviewWidth < 0) {\n        left = 0 - (previewWidth + halfPreviewWidth);\n      } else if (positionX + halfPreviewWidth > _this.elements.totalBar.offsetWidth) {\n        left = _this.elements.totalBar.offsetWidth - halfClipWidth - halfPreviewWidth;\n      }\n\n      var ms = Math.round(positionX / _this.elements.totalBar.offsetWidth * _this.clip.duration);\n\n      if (_this.options.preview) {\n        var fraction = ms / _this.clip.duration;\n\n        _this.previewClip.onProgress(fraction, ms);\n      }\n\n      elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = ms;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.left = left + \"px\";\n    };\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9wcmV2aWV3LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvcHJldmlldy5qcz84ZWM5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZWxpZCwgYWRkTGlzdGVuZXIsIHJlbW92ZUxpc3RlbmVyIH0gPSByZXF1aXJlKGAuLi9oZWxwZXJzYCk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3RoaXMgPT4ge1xuICAvLyBvbmx5IG9uIGRlc2N0b3AgZGV2aWNlc1xuICBpZiAoXG4gICAgIS9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnRcbiAgICApXG4gICkge1xuICAgIGNvbnN0IGxvb3BCYXJNb3VzZUluT3V0ID0gKCkgPT4ge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkuY2xhc3NMaXN0LnRvZ2dsZShgbS1mYWRlT3V0YCk7XG4gICAgICBlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5jbGFzc0xpc3QudG9nZ2xlKGBtLWZhZGVJbmApO1xuICAgICAgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgICAgYCR7X3RoaXMubmFtZX0taGlkZWBcbiAgICAgICk7XG5cbiAgICAgIC8vIGlmIChlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5jbGFzc05hbWUuaW5jbHVkZXMoYG0tZmFkZUluYCkpIHtcbiAgICAgIC8vICAgX3RoaXMucHJldmlld0pvdXJuZXkgPSBob3ZlclRpbWVDYXBzdWxlLnN0YXJ0Sm91cm5leShfdGhpcy5wcmV2aWV3Q2xpcCk7XG4gICAgICAvLyB9IGVsc2Uge1xuICAgICAgLy8gICBfdGhpcy5wcmV2aWV3Sm91cm5leS5kZXN0aW5hdGlvbigpO1xuICAgICAgLy8gfVxuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlbW92ZSA9IGxvb3BCYXJNb3VzZU1vdmU7XG4gICAgfTtcblxuICAgIGNvbnN0IGxvb3BCYXJBZGRMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMucHJldmlldykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb29wQmFyTW91c2VJbk91dCgpO1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3ZlciA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW91dCA9IGxvb3BCYXJNb3VzZUluT3V0O1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlbW92ZSA9IGxvb3BCYXJNb3VzZU1vdmU7XG4gICAgICByZW1vdmVMaXN0ZW5lcihgbW91c2V1cGAsIGxvb3BCYXJBZGRMaXN0ZW5lcnMsIGZhbHNlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGB0b3VjaGVuZGAsIGxvb3BCYXJBZGRMaXN0ZW5lcnMsIGZhbHNlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZW1vdmVgLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihgdG91Y2htb3ZlYCwgbG9vcEJhck1vdXNlTW92ZSwgZmFsc2UpO1xuICAgIH07XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdmVyID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3V0ID0gbG9vcEJhck1vdXNlSW5PdXQ7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vkb3duID0gKCkgPT4ge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3ZlciA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW91dCA9IG51bGw7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vtb3ZlID0gbnVsbDtcbiAgICAgIGFkZExpc3RlbmVyKGBtb3VzZXVwYCwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgYWRkTGlzdGVuZXIoYHRvdWNoZW5kYCwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgYWRkTGlzdGVuZXIoYG1vdXNlbW92ZWAsIGxvb3BCYXJNb3VzZU1vdmUsIGZhbHNlKTtcbiAgICAgIGFkZExpc3RlbmVyKGB0b3VjaG1vdmVgLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgfTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2V1cCA9ICgpID0+IHtcbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZXVwYCwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoYHRvdWNoZW5kYCwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoYG1vdXNlbW92ZWAsIGxvb3BCYXJNb3VzZU1vdmUsIGZhbHNlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGB0b3VjaG1vdmVgLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdmVyID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3V0ID0gbG9vcEJhck1vdXNlSW5PdXQ7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vtb3ZlID0gbG9vcEJhck1vdXNlTW92ZTtcbiAgICB9O1xuXG4gICAgY29uc3QgbG9vcEJhck1vdXNlTW92ZSA9IGUgPT4ge1xuICAgICAgY29uc3QgY2xpZW50WCA9IGUuY2xpZW50WDtcbiAgICAgIGNvbnN0IHZpZXdwb3J0T2Zmc2V0ID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgaWYgKFxuICAgICAgICBjbGllbnRYIC0gdmlld3BvcnRPZmZzZXQubGVmdCArIF90aGlzLnNldHRpbmdzLmxvb3BMYXN0UG9zaXRpb25YUHhscyA+XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcExhc3RQb3NpdGlvblhQeGxzICtcbiAgICAgICAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub2Zmc2V0V2lkdGggJiZcbiAgICAgICAgIV90aGlzLnNldHRpbmdzLnJlc2l6ZUxvb3BcbiAgICAgICkge1xuICAgICAgICBlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLW1pbGxpc2Vjb25kYCkuaW5uZXJIVE1MID1cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGNsaWVudFggLSB2aWV3cG9ydE9mZnNldC5sZWZ0IDwgMCAmJlxuICAgICAgICAhX3RoaXMuc2V0dGluZ3MucmVzaXplTG9vcFxuICAgICAgKSB7XG4gICAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItbWlsbGlzZWNvbmRgKS5pbm5lckhUTUwgPVxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BTdGFydE1pbGxpc2Vjb25kO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwb3NpdGlvblggPVxuICAgICAgICBjbGllbnRYIC0gdmlld3BvcnRPZmZzZXQubGVmdCArIF90aGlzLnNldHRpbmdzLmxvb3BMYXN0UG9zaXRpb25YUHhscztcblxuICAgICAgaWYgKHBvc2l0aW9uWCA8IDApIHtcbiAgICAgICAgcG9zaXRpb25YID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByZXZpZXdXaWR0aCA9XG4gICAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLm9mZnNldFdpZHRoICogX3RoaXMucHJldmlld1NjYWxlO1xuXG4gICAgICBjb25zdCBoYWxmUHJldmlld1dpZHRoID0gcHJldmlld1dpZHRoIC8gMjtcblxuICAgICAgY29uc3QgY2xpcFdpZHRoID0gZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkub2Zmc2V0V2lkdGg7XG4gICAgICBjb25zdCBoYWxmQ2xpcFdpZHRoID0gY2xpcFdpZHRoIC8gMjtcblxuICAgICAgLy8gY29uc29sZS5sb2coXG4gICAgICAvLyAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLm9mZnNldFdpZHRoLFxuICAgICAgLy8gICBfdGhpcy5wcmV2aWV3U2NhbGUsXG4gICAgICAvLyAgIHBvc2l0aW9uWCxcbiAgICAgIC8vICAgY2xpcFdpZHRoLFxuICAgICAgLy8gICBoYWxmQ2xpcFdpZHRoLFxuICAgICAgLy8gICBwcmV2aWV3V2lkdGgsXG4gICAgICAvLyAgIGhhbGZQcmV2aWV3V2lkdGhcbiAgICAgIC8vICk7XG5cbiAgICAgIGxldCBsZWZ0ID0gcG9zaXRpb25YIC0gaGFsZkNsaXBXaWR0aDtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGxlZnQsIGhhbGZDbGlwV2lkdGgpO1xuICAgICAgaWYgKHBvc2l0aW9uWCAtIGhhbGZQcmV2aWV3V2lkdGggPCAwKSB7XG4gICAgICAgIGxlZnQgPSAwIC0gKHByZXZpZXdXaWR0aCArIGhhbGZQcmV2aWV3V2lkdGgpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcG9zaXRpb25YICsgaGFsZlByZXZpZXdXaWR0aCA+XG4gICAgICAgIF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyLm9mZnNldFdpZHRoXG4gICAgICApIHtcbiAgICAgICAgbGVmdCA9XG4gICAgICAgICAgX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGggLVxuICAgICAgICAgIGhhbGZDbGlwV2lkdGggLVxuICAgICAgICAgIGhhbGZQcmV2aWV3V2lkdGg7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1zID0gTWF0aC5yb3VuZChcbiAgICAgICAgKHBvc2l0aW9uWCAvIF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyLm9mZnNldFdpZHRoKSAqIF90aGlzLmNsaXAuZHVyYXRpb25cbiAgICAgICk7XG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIGNvbnN0IGZyYWN0aW9uID0gbXMgLyBfdGhpcy5jbGlwLmR1cmF0aW9uO1xuICAgICAgICBfdGhpcy5wcmV2aWV3Q2xpcC5vblByb2dyZXNzKGZyYWN0aW9uLCBtcyk7XG4gICAgICB9XG5cbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItbWlsbGlzZWNvbmRgKS5pbm5lckhUTUwgPSBtcztcbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLnN0eWxlLmxlZnQgPSBsZWZ0ICsgYHB4YDtcbiAgICB9O1xuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFNQTtBQUVBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/listeners/preview.js\n");

/***/ }),

/***/ "../src/listeners/progressBar.js":
/*!***************************************!*\
  !*** ../src/listeners/progressBar.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMove = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.loopBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.loopBar.offsetWidth) {\n      positionX = _this.elements.loopBar.offsetWidth;\n    }\n\n    _this.handleDrag(positionX);\n  };\n\n  _this.listeners.onMouseUp = function () {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    removeListener(\"mouseup\", _this.listeners.onMouseUp, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUp, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMove, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMove, false);\n\n    _this.handleDragEnd(_this.settings);\n  };\n\n  _this.listeners.onMouseDown = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.settings.playAfterResize = true;\n    }\n\n    _this.handleDragStart(_this.clip);\n\n    _this.listeners.onCursorMove(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUp, false);\n    addListener(\"touchend\", _this.listeners.onMouseUp, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMove, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMove, false);\n  };\n\n  _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n  _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9wcm9ncmVzc0Jhci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvbGlzdGVuZXJzL3Byb2dyZXNzQmFyLmpzPzU3YjIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBhZGRMaXN0ZW5lciwgcmVtb3ZlTGlzdGVuZXIgfSA9IHJlcXVpcmUoYC4uL2hlbHBlcnNgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfdGhpcyA9PiB7XG4gIC8vIGxldCBwZSA9IGZhbHNlO1xuXG4gIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgY2xpZW50WCA9IGUuY2xpZW50WCB8fCAoKGUudG91Y2hlcyB8fCBbXSlbMF0gfHwge30pLmNsaWVudFg7XG4gICAgY29uc3Qgdmlld3BvcnRPZmZzZXQgPSBfdGhpcy5lbGVtZW50cy5sb29wQmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBwb3NpdGlvblggPSBjbGllbnRYIC0gdmlld3BvcnRPZmZzZXQubGVmdDtcblxuICAgIGlmIChwb3NpdGlvblggPCAwKSB7XG4gICAgICBwb3NpdGlvblggPSAwO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb25YID4gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vZmZzZXRXaWR0aCkge1xuICAgICAgcG9zaXRpb25YID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vZmZzZXRXaWR0aDtcbiAgICB9XG4gICAgX3RoaXMuaGFuZGxlRHJhZyhwb3NpdGlvblgpO1xuICB9O1xuXG4gIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXAgPSAoKSA9PiB7XG4gICAgX3RoaXMuZWxlbWVudHMubGlzdGVuZXJIZWxwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiO1xuICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZXVwYCwgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcCwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGB0b3VjaGVuZGAsIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXAsIGZhbHNlKTtcbiAgICByZW1vdmVMaXN0ZW5lcihgbW91c2Vtb3ZlYCwgX3RoaXMubGlzdGVuZXJzLm9uQ3Vyc29yTW92ZSwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGB0b3VjaG1vdmVgLCBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlLCBmYWxzZSk7XG4gICAgX3RoaXMuaGFuZGxlRHJhZ0VuZChfdGhpcy5zZXR0aW5ncyk7XG4gIH07XG5cbiAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duID0gZSA9PiB7XG4gICAgX3RoaXMuZWxlbWVudHMubGlzdGVuZXJIZWxwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiYXV0b1wiO1xuXG4gICAgaWYgKF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IGBwbGF5aW5nYCkge1xuICAgICAgX3RoaXMuc2V0dGluZ3MucGxheUFmdGVyUmVzaXplID0gdHJ1ZTtcbiAgICB9XG4gICAgX3RoaXMuaGFuZGxlRHJhZ1N0YXJ0KF90aGlzLmNsaXApO1xuICAgIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUoZSk7XG4gICAgYWRkTGlzdGVuZXIoYG1vdXNldXBgLCBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoYHRvdWNoZW5kYCwgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcCwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKGBtb3VzZW1vdmVgLCBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoYHRvdWNobW92ZWAsIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUsIGZhbHNlKTtcbiAgfTtcblxuICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgYG1vdXNlZG93bmAsXG4gICAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duLFxuICAgIGZhbHNlXG4gICk7XG4gIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBgdG91Y2hzdGFydGAsXG4gICAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duLFxuICAgIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSxcbiAgICBmYWxzZVxuICApO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUlBO0FBREE7QUFLQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/progressBar.js\n");

/***/ }),

/***/ "../src/listeners/settings.js":
/*!************************************!*\
  !*** ../src/listeners/settings.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  _this.elements.settingsShowIndicator.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-show-indicator-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.elements.indicator.style.visibility = \"hidden\";\n      _this.elements.statusButton.style.width = \"40px\";\n      _this.elements.statusButton.style.height = \"25px\";\n      _this.elements.statusButton.style.bottom = \"0px\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.indicator.style.visibility = \"visible\";\n      _this.elements.statusButton.style.width = \"35px\";\n      _this.elements.statusButton.style.height = \"20px\";\n      _this.elements.statusButton.style.bottom = \"5px\";\n    }\n  };\n\n  _this.elements.settingsPointerEvents.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-pointer-events-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.options.pointerEvents = false;\n      _this.elements.mcPlayer.style.pointerEvents = \"none\";\n      _this.elements.pointerEventPanel.style.pointerEvents = \"none\";\n      elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n      _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.mcPlayer.style.pointerEvents = \"none\";\n      _this.elements.pointerEventPanel.style.pointerEvents = \"auto\";\n      elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n      _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n    }\n  };\n\n  _this.elements.settingsShowVolume.onclick = function (e) {\n    e.preventDefault();\n\n    _this.elements.volumeControl.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.volumeBarHelper.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\")); // _this.elements.timeDisplay.classList.toggle(\n    //   `${_this.name}-time-width-transition`\n    // );\n\n\n    var checkbox = elid(\"\".concat(_this.name, \"-show-volume-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.elements.volumeControl.style.visibility = \"hidden\";\n      _this.elements.timeDisplay.style.left = \"45px\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.volumeControl.style.visibility = \"visible\";\n      _this.elements.timeDisplay.style.left = \"\";\n    }\n  };\n\n  _this.elements.settingsShowPreview.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-show-preview-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.visibility = \"hidden\";\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.display = \"none\";\n      _this.options.preview = false;\n    } else {\n      if (!_this.previewClip) {\n        _this.createPreviewDisplay();\n      }\n\n      checkbox.checked = true;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.visibility = \"visible\";\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.display = \"flex\";\n      _this.options.preview = true;\n    }\n  };\n\n  _this.elements.settingsButton.onclick = function (e) {\n    e.preventDefault();\n\n    var showHideSettings = function showHideSettings(e) {\n      if (_this.elements.settingsPanel.contains(e.target)) {\n        return true;\n      }\n\n      _this.elements.settingsPanel.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n      _this.elements.settingsPanel.classList.toggle(\"m-fadeOut\");\n\n      _this.elements.settingsPanel.classList.toggle(\"m-fadeIn\");\n\n      if (_this.elements.settingsPanel.className.includes(\"m-fadeOut\")) {\n        removeListener(\"click\", showHideSettings, false);\n      }\n    };\n\n    if (_this.elements.settingsPanel.className.includes(\"m-fadeOut\")) {\n      addListener(\"click\", showHideSettings, false);\n    } else {\n      removeListener(\"click\", showHideSettings, false);\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9zZXR0aW5ncy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvbGlzdGVuZXJzL3NldHRpbmdzLmpzP2NmMGIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBlbGlkLCBhZGRMaXN0ZW5lciwgcmVtb3ZlTGlzdGVuZXIgfSA9IHJlcXVpcmUoYC4uL2hlbHBlcnNgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfdGhpcyA9PiB7XG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd0luZGljYXRvci5vbmNsaWNrID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGNoZWNrYm94ID0gZWxpZChgJHtfdGhpcy5uYW1lfS1zaG93LWluZGljYXRvci1jaGVja2JveGApO1xuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbGVtZW50cy5pbmRpY2F0b3Iuc3R5bGUudmlzaWJpbGl0eSA9IGBoaWRkZW5gO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLnN0eWxlLndpZHRoID0gYDQwcHhgO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLnN0eWxlLmhlaWdodCA9IGAyNXB4YDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5zdHlsZS5ib3R0b20gPSBgMHB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBfdGhpcy5lbGVtZW50cy5pbmRpY2F0b3Iuc3R5bGUudmlzaWJpbGl0eSA9IGB2aXNpYmxlYDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5zdHlsZS53aWR0aCA9IGAzNXB4YDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5zdHlsZS5oZWlnaHQgPSBgMjBweGA7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zdGF0dXNCdXR0b24uc3R5bGUuYm90dG9tID0gYDVweGA7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUG9pbnRlckV2ZW50cy5vbmNsaWNrID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGNoZWNrYm94ID0gZWxpZChgJHtfdGhpcy5uYW1lfS1wb2ludGVyLWV2ZW50cy1jaGVja2JveGApO1xuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICBfdGhpcy5vcHRpb25zLnBvaW50ZXJFdmVudHMgPSBmYWxzZTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLm1jUGxheWVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnBvaW50ZXJFdmVudFBhbmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0tY29udHJvbHNgKS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImF1dG9cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBfdGhpcy5lbGVtZW50cy5tY1BsYXllci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5wb2ludGVyRXZlbnRQYW5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBlbGlkKGAke190aGlzLm5hbWV9LWNvbnRyb2xzYCkuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiYXV0b1wiO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd1ZvbHVtZS5vbmNsaWNrID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgIGAke190aGlzLm5hbWV9LXZvbHVtZS13aWR0aC10cmFuc2l0aW9uYFxuICAgICk7XG4gICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQmFyLmNsYXNzTGlzdC50b2dnbGUoXG4gICAgICBgJHtfdGhpcy5uYW1lfS12b2x1bWUtd2lkdGgtdHJhbnNpdGlvbmBcbiAgICApO1xuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUJhci5jbGFzc0xpc3QudG9nZ2xlKGAke190aGlzLm5hbWV9LWhpZGVgKTtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXJIZWxwZXIuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgIGAke190aGlzLm5hbWV9LXZvbHVtZS13aWR0aC10cmFuc2l0aW9uYFxuICAgICk7XG4gICAgLy8gX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAvLyAgIGAke190aGlzLm5hbWV9LXRpbWUtd2lkdGgtdHJhbnNpdGlvbmBcbiAgICAvLyApO1xuXG4gICAgY29uc3QgY2hlY2tib3ggPSBlbGlkKGAke190aGlzLm5hbWV9LXNob3ctdm9sdW1lLWNoZWNrYm94YCk7XG4gICAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuc3R5bGUudmlzaWJpbGl0eSA9IGBoaWRkZW5gO1xuICAgICAgX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuc3R5bGUubGVmdCA9IGA0NXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDb250cm9sLnN0eWxlLnZpc2liaWxpdHkgPSBgdmlzaWJsZWA7XG4gICAgICBfdGhpcy5lbGVtZW50cy50aW1lRGlzcGxheS5zdHlsZS5sZWZ0ID0gYGA7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd1ByZXZpZXcub25jbGljayA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBjaGVja2JveCA9IGVsaWQoYCR7X3RoaXMubmFtZX0tc2hvdy1wcmV2aWV3LWNoZWNrYm94YCk7XG4gICAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLnN0eWxlLnZpc2liaWxpdHkgPSBgaGlkZGVuYDtcbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLnN0eWxlLmRpc3BsYXkgPSBgbm9uZWA7XG4gICAgICBfdGhpcy5vcHRpb25zLnByZXZpZXcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFfdGhpcy5wcmV2aWV3Q2xpcCkge1xuICAgICAgICBfdGhpcy5jcmVhdGVQcmV2aWV3RGlzcGxheSgpO1xuICAgICAgfVxuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5zdHlsZS52aXNpYmlsaXR5ID0gYHZpc2libGVgO1xuICAgICAgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkuc3R5bGUuZGlzcGxheSA9IGBmbGV4YDtcbiAgICAgIF90aGlzLm9wdGlvbnMucHJldmlldyA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzQnV0dG9uLm9uY2xpY2sgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBzaG93SGlkZVNldHRpbmdzID0gZSA9PiB7XG4gICAgICBpZiAoX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC50b2dnbGUoYCR7X3RoaXMubmFtZX0taGlkZWApO1xuXG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC50b2dnbGUoYG0tZmFkZU91dGApO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKGBtLWZhZGVJbmApO1xuICAgICAgaWYgKF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NOYW1lLmluY2x1ZGVzKGBtLWZhZGVPdXRgKSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcihgY2xpY2tgLCBzaG93SGlkZVNldHRpbmdzLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTmFtZS5pbmNsdWRlcyhgbS1mYWRlT3V0YCkpIHtcbiAgICAgIGFkZExpc3RlbmVyKGBjbGlja2AsIHNob3dIaWRlU2V0dGluZ3MsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoYGNsaWNrYCwgc2hvd0hpZGVTZXR0aW5ncywgZmFsc2UpO1xuICAgIH1cbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/listeners/settings.js\n");

/***/ }),

/***/ "../src/listeners/speed.js":
/*!*********************************!*\
  !*** ../src/listeners/speed.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // const pe = false;\n  _this.elements.settingsSpeedButtonShow.onclick = _this.elements.settingsSpeedButtonHide.onclick = function (e) {\n    e.preventDefault();\n\n    _this.elements.settingsPanel.classList.toggle(\"\".concat(_this.name, \"-settings-speed-panel\"));\n\n    var includesClass = _this.elements.settingsPanel.className.includes(\"\".concat(_this.name, \"-settings-speed-panel\"));\n\n    if (includesClass) {\n      _this.elements.settingsMainPanel.style.display = \"none\";\n      _this.elements.settingsSpeedPanel.style.display = \"block\";\n    } else {\n      _this.elements.settingsSpeedPanel.style.display = \"none\";\n      _this.elements.settingsMainPanel.style.display = \"block\";\n    }\n  };\n\n  var onCursorMoveSpeedBar = function onCursorMoveSpeedBar(e) {\n    e.preventDefault();\n\n    var viewportOffset = _this.elements.speedBar.getBoundingClientRect();\n\n    var clientY = e.clientY || ((e.touches || [])[0] || {}).clientY;\n    var positionY = clientY - viewportOffset.top;\n    positionY -= 8;\n\n    if (positionY < 0) {\n      positionY = 0;\n    } else if (positionY > _this.elements.speedBar.offsetHeight - 16) {\n      positionY = _this.elements.speedBar.offsetHeight - 16;\n    }\n\n    positionY = Math.floor(positionY); // show speed\n\n    var percentage = (positionY / ((_this.options.speedValues.length - 1) * 16) - 1) * -1;\n    var step = 1 / (_this.options.speedValues.length - 1);\n\n    var speed = _this.calculateSpeed(step, _this.options.speedValues, percentage);\n\n    elid(\"\".concat(_this.name, \"-speed-runtime\")).innerHTML = speed + \"0\";\n    elid(\"\".concat(_this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    _this.clip.executionSpeed = speed;\n  };\n\n  var onMouseUpSpeedBar = function onMouseUpSpeedBar(e) {\n    // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    e.preventDefault();\n    removeListener(\"mouseup\", onMouseUpSpeedBar, false);\n    removeListener(\"touchend\", onMouseUpSpeedBar, false);\n    removeListener(\"mousemove\", onCursorMoveSpeedBar, false);\n    removeListener(\"touchmove\", onCursorMoveSpeedBar, false);\n    elid(\"\".concat(_this.name, \"-speed-runtime\")).innerHTML = \"Speed\";\n    var speedDisplay;\n    _this.clip.speed == 1 ? speedDisplay = \"Normal\" : speedDisplay = _this.clip.speed;\n    _this.elements.speedCurrent.innerHTML = speedDisplay;\n  };\n\n  var onMouseDownSpeedBar = function onMouseDownSpeedBar(e) {\n    // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n    e.preventDefault();\n    onCursorMoveSpeedBar(e);\n    addListener(\"mouseup\", onMouseUpSpeedBar, false);\n    addListener(\"touchend\", onMouseUpSpeedBar, false);\n    addListener(\"mousemove\", onCursorMoveSpeedBar, false);\n    addListener(\"touchmove\", onCursorMoveSpeedBar, false);\n  };\n\n  _this.elements.speedBarHelper.addEventListener(\"mousedown\", onMouseDownSpeedBar, false);\n\n  _this.elements.speedBarHelper.addEventListener(\"touchstart\", onMouseDownSpeedBar, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9zcGVlZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvbGlzdGVuZXJzL3NwZWVkLmpzP2ZjODIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBlbGlkLCBhZGRMaXN0ZW5lciwgcmVtb3ZlTGlzdGVuZXIgfSA9IHJlcXVpcmUoYC4uL2hlbHBlcnNgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfdGhpcyA9PiB7XG4gIC8vIGNvbnN0IHBlID0gZmFsc2U7XG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU3BlZWRCdXR0b25TaG93Lm9uY2xpY2sgPSBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1NwZWVkQnV0dG9uSGlkZS5vbmNsaWNrID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgIGAke190aGlzLm5hbWV9LXNldHRpbmdzLXNwZWVkLXBhbmVsYFxuICAgICk7XG4gICAgY29uc3QgaW5jbHVkZXNDbGFzcyA9IF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NOYW1lLmluY2x1ZGVzKFxuICAgICAgYCR7X3RoaXMubmFtZX0tc2V0dGluZ3Mtc3BlZWQtcGFuZWxgXG4gICAgKTtcbiAgICBpZiAoaW5jbHVkZXNDbGFzcykge1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NNYWluUGFuZWwuc3R5bGUuZGlzcGxheSA9IGBub25lYDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU3BlZWRQYW5lbC5zdHlsZS5kaXNwbGF5ID0gYGJsb2NrYDtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NTcGVlZFBhbmVsLnN0eWxlLmRpc3BsYXkgPSBgbm9uZWA7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc01haW5QYW5lbC5zdHlsZS5kaXNwbGF5ID0gYGJsb2NrYDtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25DdXJzb3JNb3ZlU3BlZWRCYXIgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qgdmlld3BvcnRPZmZzZXQgPSBfdGhpcy5lbGVtZW50cy5zcGVlZEJhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBjbGllbnRZID0gZS5jbGllbnRZIHx8ICgoZS50b3VjaGVzIHx8IFtdKVswXSB8fCB7fSkuY2xpZW50WTtcbiAgICBsZXQgcG9zaXRpb25ZID0gY2xpZW50WSAtIHZpZXdwb3J0T2Zmc2V0LnRvcDtcblxuICAgIHBvc2l0aW9uWSAtPSA4O1xuICAgIGlmIChwb3NpdGlvblkgPCAwKSB7XG4gICAgICBwb3NpdGlvblkgPSAwO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb25ZID4gX3RoaXMuZWxlbWVudHMuc3BlZWRCYXIub2Zmc2V0SGVpZ2h0IC0gMTYpIHtcbiAgICAgIHBvc2l0aW9uWSA9IF90aGlzLmVsZW1lbnRzLnNwZWVkQmFyLm9mZnNldEhlaWdodCAtIDE2O1xuICAgIH1cbiAgICBwb3NpdGlvblkgPSBNYXRoLmZsb29yKHBvc2l0aW9uWSk7XG4gICAgLy8gc2hvdyBzcGVlZFxuICAgIGNvbnN0IHBlcmNlbnRhZ2UgPVxuICAgICAgKHBvc2l0aW9uWSAvICgoX3RoaXMub3B0aW9ucy5zcGVlZFZhbHVlcy5sZW5ndGggLSAxKSAqIDE2KSAtIDEpICogLTE7XG4gICAgY29uc3Qgc3RlcCA9IDEgLyAoX3RoaXMub3B0aW9ucy5zcGVlZFZhbHVlcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBzcGVlZCA9IF90aGlzLmNhbGN1bGF0ZVNwZWVkKFxuICAgICAgc3RlcCxcbiAgICAgIF90aGlzLm9wdGlvbnMuc3BlZWRWYWx1ZXMsXG4gICAgICBwZXJjZW50YWdlXG4gICAgKTtcbiAgICBlbGlkKGAke190aGlzLm5hbWV9LXNwZWVkLXJ1bnRpbWVgKS5pbm5lckhUTUwgPSBzcGVlZCArIGAwYDtcbiAgICBlbGlkKGAke190aGlzLm5hbWV9LXNwZWVkLWN1cnNvcmApLnN0eWxlLnRvcCA9IHBvc2l0aW9uWSArIGBweGA7XG4gICAgX3RoaXMuY2xpcC5leGVjdXRpb25TcGVlZCA9IHNwZWVkO1xuICB9O1xuXG4gIGNvbnN0IG9uTW91c2VVcFNwZWVkQmFyID0gZSA9PiB7XG4gICAgLy8gaWYgKHBlKSB7XG4gICAgLy8gICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BvaW50ZXJFdmVudHMuY2xpY2soKTtcbiAgICAvLyB9XG4gICAgX3RoaXMuZWxlbWVudHMubGlzdGVuZXJIZWxwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiO1xuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZXVwYCwgb25Nb3VzZVVwU3BlZWRCYXIsIGZhbHNlKTtcbiAgICByZW1vdmVMaXN0ZW5lcihgdG91Y2hlbmRgLCBvbk1vdXNlVXBTcGVlZEJhciwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZW1vdmVgLCBvbkN1cnNvck1vdmVTcGVlZEJhciwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGB0b3VjaG1vdmVgLCBvbkN1cnNvck1vdmVTcGVlZEJhciwgZmFsc2UpO1xuICAgIGVsaWQoYCR7X3RoaXMubmFtZX0tc3BlZWQtcnVudGltZWApLmlubmVySFRNTCA9IGBTcGVlZGA7XG4gICAgbGV0IHNwZWVkRGlzcGxheTtcbiAgICBfdGhpcy5jbGlwLnNwZWVkID09IDFcbiAgICAgID8gKHNwZWVkRGlzcGxheSA9IGBOb3JtYWxgKVxuICAgICAgOiAoc3BlZWREaXNwbGF5ID0gX3RoaXMuY2xpcC5zcGVlZCk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5zcGVlZEN1cnJlbnQuaW5uZXJIVE1MID0gc3BlZWREaXNwbGF5O1xuICB9O1xuICBjb25zdCBvbk1vdXNlRG93blNwZWVkQmFyID0gZSA9PiB7XG4gICAgLy8gaWYgKCFfdGhpcy5vcHRpb25zLnBvaW50ZXJFdmVudHMpIHtcbiAgICAvLyAgIHBlID0gdHJ1ZTtcbiAgICAvLyAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUG9pbnRlckV2ZW50cy5jbGljaygpO1xuICAgIC8vIH1cbiAgICBfdGhpcy5lbGVtZW50cy5saXN0ZW5lckhlbHBlci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgb25DdXJzb3JNb3ZlU3BlZWRCYXIoZSk7XG4gICAgYWRkTGlzdGVuZXIoYG1vdXNldXBgLCBvbk1vdXNlVXBTcGVlZEJhciwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKGB0b3VjaGVuZGAsIG9uTW91c2VVcFNwZWVkQmFyLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoYG1vdXNlbW92ZWAsIG9uQ3Vyc29yTW92ZVNwZWVkQmFyLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoYHRvdWNobW92ZWAsIG9uQ3Vyc29yTW92ZVNwZWVkQmFyLCBmYWxzZSk7XG4gIH07XG5cbiAgX3RoaXMuZWxlbWVudHMuc3BlZWRCYXJIZWxwZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBgbW91c2Vkb3duYCxcbiAgICBvbk1vdXNlRG93blNwZWVkQmFyLFxuICAgIGZhbHNlXG4gICk7XG4gIF90aGlzLmVsZW1lbnRzLnNwZWVkQmFySGVscGVyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgYHRvdWNoc3RhcnRgLFxuICAgIG9uTW91c2VEb3duU3BlZWRCYXIsXG4gICAge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9LFxuICAgIGZhbHNlXG4gICk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBSUE7QUFEQTtBQUtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/listeners/speed.js\n");

/***/ }),

/***/ "../src/listeners/statusBtn.js":
/*!*************************************!*\
  !*** ../src/listeners/statusBtn.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (_this) {\n  _this.elements.statusButton.onclick = function (e) {\n    e.preventDefault(); // console.log(_this.clip);\n\n    if (_this.clip.runTimeInfo.state === \"playing\") {\n      _this.clip.pause();\n    } else if (_this.clip.runTimeInfo.state === \"paused\" || _this.clip.runTimeInfo.state === \"idle\" || _this.clip.runTimeInfo.state === \"transitional\" || _this.clip.runTimeInfo.state === \"armed\") {\n      _this.clip.play();\n    } //not working below this\n    else if (_this.clip.runTimeInfo.state === \"idle\") {\n        if (_this.clip.speed >= 0) {\n          _this.clip.play();\n\n          _this.settings.needsUpdate = true;\n        } else {\n          _this.createJourney(_this.clip, _this.settings.loopEndMillisecond - 1, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        }\n      } else if (_this.clip.runTimeInfo.state === \"completed\") {\n        if (_this.clip.speed >= 0) {\n          _this.createJourney(_this.clip, 0, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        } else {\n          _this.createJourney(_this.clip, _this.settings.loopEndMillisecond - 1, {\n            before: \"pause\",\n            after: \"play\"\n          });\n\n          _this.settings.needsUpdate = true;\n        }\n      }\n\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9zdGF0dXNCdG4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2xpc3RlbmVycy9zdGF0dXNCdG4uanM/ZGE1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF90aGlzID0+IHtcbiAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLm9uY2xpY2sgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gY29uc29sZS5sb2coX3RoaXMuY2xpcCk7XG4gICAgaWYgKF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IGBwbGF5aW5nYCkge1xuICAgICAgX3RoaXMuY2xpcC5wYXVzZSgpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09PSBgcGF1c2VkYCB8fFxuICAgICAgX3RoaXMuY2xpcC5ydW5UaW1lSW5mby5zdGF0ZSA9PT0gYGlkbGVgIHx8XG4gICAgICBfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09PSBgdHJhbnNpdGlvbmFsYCB8fFxuICAgICAgX3RoaXMuY2xpcC5ydW5UaW1lSW5mby5zdGF0ZSA9PT0gYGFybWVkYFxuICAgICkge1xuICAgICAgX3RoaXMuY2xpcC5wbGF5KCk7XG4gICAgfVxuICAgIC8vbm90IHdvcmtpbmcgYmVsb3cgdGhpc1xuICAgIGVsc2UgaWYgKF90aGlzLmNsaXAucnVuVGltZUluZm8uc3RhdGUgPT09IGBpZGxlYCkge1xuICAgICAgaWYgKF90aGlzLmNsaXAuc3BlZWQgPj0gMCkge1xuICAgICAgICBfdGhpcy5jbGlwLnBsYXkoKTtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuY3JlYXRlSm91cm5leShfdGhpcy5jbGlwLCBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQgLSAxLCB7XG4gICAgICAgICAgYmVmb3JlOiBcInBhdXNlXCIsXG4gICAgICAgICAgYWZ0ZXI6IFwicGxheVwiXG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfdGhpcy5jbGlwLnJ1blRpbWVJbmZvLnN0YXRlID09PSBgY29tcGxldGVkYCkge1xuICAgICAgaWYgKF90aGlzLmNsaXAuc3BlZWQgPj0gMCkge1xuICAgICAgICBfdGhpcy5jcmVhdGVKb3VybmV5KF90aGlzLmNsaXAsIDAsIHtcbiAgICAgICAgICBiZWZvcmU6IFwicGF1c2VcIixcbiAgICAgICAgICBhZnRlcjogXCJwbGF5XCJcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmNyZWF0ZUpvdXJuZXkoX3RoaXMuY2xpcCwgX3RoaXMuc2V0dGluZ3MubG9vcEVuZE1pbGxpc2Vjb25kIC0gMSwge1xuICAgICAgICAgIGJlZm9yZTogXCJwYXVzZVwiLFxuICAgICAgICAgIGFmdGVyOiBcInBsYXlcIlxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFQQTtBQVVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/statusBtn.js\n");

/***/ }),

/***/ "../src/listeners/volume.js":
/*!**********************************!*\
  !*** ../src/listeners/volume.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener,\n    elid = _require.elid;\n\nvar svg = __webpack_require__(/*! ../html/svg */ \"../src/html/svg.js\");\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  var volumeDrag = false;\n\n  _this.elements.volumeBtn.onclick = function () {\n    if (_this.settings.volumeMute) {\n      _this.elements.volumeBarActive.style.width = _this.settings.previousVolume * 100 + \"%\";\n\n      _this.clip.setVolume(_this.settings.previousVolume);\n\n      _this.settings.volumeMute = false;\n      var SVG = document.createElement(\"span\");\n      SVG.innerHTML = svg.volumeSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(SVG);\n    } else {\n      _this.settings.volumeMute = true;\n      _this.elements.volumeBarActive.style.width = \"0%\";\n\n      _this.clip.setVolume(0);\n\n      var _SVG = document.createElement(\"span\");\n\n      _SVG.innerHTML = svg.volumeMuteSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(_SVG);\n    }\n  };\n\n  var volumeOpen = false;\n\n  _this.elements.volumeBtn.onmouseover = function () {\n    volumeOpen = true;\n\n    _this.elements.volumeCursor.classList.add(\"\".concat(_this.name, \"-volume-cursor-transition\"));\n\n    _this.elements.volumeBar.classList.add(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBarHelper.classList.add(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.timeDisplay.classList.add(\"\".concat(_this.name, \"-time-width-transition\"));\n  };\n\n  elid(\"\".concat(_this.name, \"-left-controls\")).onmouseout = function () {\n    if (!volumeOpen || volumeDrag) {\n      return;\n    }\n\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(elid(\"\".concat(_this.name, \"-left-controls\")), e) || e === elid(\"\".concat(_this.name, \"-left-controls\"))) {\n      return;\n    }\n\n    volumeOpen = false;\n\n    _this.elements.volumeCursor.classList.remove(\"\".concat(_this.name, \"-volume-cursor-transition\"));\n\n    _this.elements.volumeBar.classList.remove(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBarHelper.classList.remove(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.timeDisplay.classList.remove(\"\".concat(_this.name, \"-time-width-transition\"));\n  };\n\n  _this.listeners.onCursorMoveVolumeBar = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.volumeBarHelper.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.volumeBarHelper.offsetWidth) {\n      positionX = _this.elements.volumeBarHelper.offsetWidth;\n    }\n\n    _this.settings.volume = Number((positionX / _this.elements.volumeBarHelper.offsetWidth).toFixed(2));\n    _this.elements.volumeBarActive.style.width = _this.settings.volume * 100 + \"%\";\n\n    _this.clip.setVolume(_this.settings.volume);\n\n    if (_this.settings.volume > 0) {\n      _this.settings.volumeMute = false;\n      var SVG = document.createElement(\"span\");\n      SVG.innerHTML = svg.volumeSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(SVG);\n    } else if (_this.settings.volume === 0) {\n      _this.settings.volumeMute = true;\n\n      var _SVG2 = document.createElement(\"span\");\n\n      _SVG2.innerHTML = svg.volumeMuteSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(_SVG2);\n    }\n  };\n\n  _this.listeners.onMouseUpVolumeBar = function (e) {\n    volumeDrag = false; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    e.preventDefault();\n\n    if (_this.settings.volume > 0) {\n      _this.settings.previousVolume = _this.settings.volume;\n    }\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUpVolumeBar, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpVolumeBar, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveVolumeBar, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveVolumeBar, false);\n  };\n\n  _this.listeners.onMouseDownVolumeBar = function (e) {\n    volumeDrag = true; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n    e.preventDefault();\n\n    _this.listeners.onCursorMoveVolumeBar(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpVolumeBar, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpVolumeBar, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveVolumeBar, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveVolumeBar, false);\n  };\n\n  _this.elements.volumeBarHelper.addEventListener(\"mousedown\", _this.listeners.onMouseDownVolumeBar, false);\n\n  _this.elements.volumeCursor.addEventListener(\"mousedown\", _this.listeners.onMouseDownVolumeBar, false);\n\n  _this.elements.volumeBarHelper.addEventListener(\"touchstart\", _this.listeners.onMouseDownVolumeBar, {\n    passive: false\n  }, false);\n\n  _this.elements.volumeCursor.addEventListener(\"touchstart\", _this.listeners.onMouseDownVolumeBar, {\n    passive: false\n  }, false);\n};\n\nfunction isDescendant(parent, child) {\n  var node = child.parentNode;\n\n  while (node != null) {\n    if (node == parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/listeners/volume.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var MotorCortex = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar TestPluginDefinition = __webpack_require__(/*! ./testPlugin/main */ \"./testPlugin/main.js\");\n\nvar Player = __webpack_require__(/*! ../src/Player */ \"../src/Player.js\");\n\nvar TestPlugin = MotorCortex.loadPlugin(TestPluginDefinition); // Configure clip\n\nvar config = {\n  css: \"\\n    #one {\\n      font-size:40px;\\n      text-align:center;\\n      font-family: \\\"Century Gothic\\\", CenturyGothic, AppleGothic, sans-serif;\\n      color:#4b475f;\\n      \\n    }\\n    .container {\\n      background-color:black;\\n      display:flex;\\n      justify-content:center;\\n      align-items:center;\\n      height: 100%;\\n      background-color:#292929;\\n      border:2px solid black;\\n    }\\n  \",\n  html: \"<div class=\\\"container\\\">\\n    <div id=\\\"one\\\" class=\\\"element\\\">Motorcortex Player-Test Plugin</div>\\n  </div>\",\n  host: document.getElementById(\"clip\"),\n  containerParams: {\n    width: \"70%\",\n    height: \"100%\"\n  },\n  audio: \"off\"\n}; // Create clip\n\nvar clip = new MotorCortex.Clip(config);\nvar animation_1 = new TestPlugin.TestIncident({\n  animatedAttrs: {\n    left: 800,\n    opacity: 0\n  }\n}, {\n  id: \"animation_1\",\n  selector: \"#one\",\n  duration: 60000\n});\nvar animation_2 = new TestPlugin.TestIncident({\n  animatedAttrs: {\n    left: 800,\n    opacity: 0\n  }\n}, {\n  id: \"animation_2\",\n  selector: \"#one\",\n  duration: 60000\n});\nvar animation_3 = new TestPlugin.TestIncident({\n  animatedAttrs: {\n    left: 800,\n    opacity: 0\n  }\n}, {\n  id: \"animation_3\",\n  selector: \"#one\",\n  duration: 60000\n});\nclip.addIncident(animation_1, 0);\nclip.addIncident(animation_2, 60000);\nclip.addIncident(animation_3, 120000);\nwindow.clip = clip; // Add clip to timer\n\nnew Player({\n  clip: clip,\n  theme: \"transparent\",\n  preview: true,\n  showVolume: true,\n  speedValues: [8, 3, \"d\", -4, -2, -1, \"dd\", -0.5, 0, 0.5, 1, 2, 4, 32, -32, 1.2],\n  buttons: {\n    donkeyclip: false\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2luZGV4LmpzPzQxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTW90b3JDb3J0ZXggPSByZXF1aXJlKFwiQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleFwiKTtcbmNvbnN0IFRlc3RQbHVnaW5EZWZpbml0aW9uID0gcmVxdWlyZShcIi4vdGVzdFBsdWdpbi9tYWluXCIpO1xuY29uc3QgUGxheWVyID0gcmVxdWlyZShcIi4uL3NyYy9QbGF5ZXJcIik7XG5cbmNvbnN0IFRlc3RQbHVnaW4gPSBNb3RvckNvcnRleC5sb2FkUGx1Z2luKFRlc3RQbHVnaW5EZWZpbml0aW9uKTtcblxuLy8gQ29uZmlndXJlIGNsaXBcbmNvbnN0IGNvbmZpZyA9IHtcbiAgY3NzOiBgXG4gICAgI29uZSB7XG4gICAgICBmb250LXNpemU6NDBweDtcbiAgICAgIHRleHQtYWxpZ246Y2VudGVyO1xuICAgICAgZm9udC1mYW1pbHk6IFwiQ2VudHVyeSBHb3RoaWNcIiwgQ2VudHVyeUdvdGhpYywgQXBwbGVHb3RoaWMsIHNhbnMtc2VyaWY7XG4gICAgICBjb2xvcjojNGI0NzVmO1xuICAgICAgXG4gICAgfVxuICAgIC5jb250YWluZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjpibGFjaztcbiAgICAgIGRpc3BsYXk6ZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDpjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczpjZW50ZXI7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiMyOTI5Mjk7XG4gICAgICBib3JkZXI6MnB4IHNvbGlkIGJsYWNrO1xuICAgIH1cbiAgYCxcbiAgaHRtbDogYDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICA8ZGl2IGlkPVwib25lXCIgY2xhc3M9XCJlbGVtZW50XCI+TW90b3Jjb3J0ZXggUGxheWVyLVRlc3QgUGx1Z2luPC9kaXY+XG4gIDwvZGl2PmAsXG4gIGhvc3Q6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpcFwiKSxcbiAgY29udGFpbmVyUGFyYW1zOiB7XG4gICAgd2lkdGg6IFwiNzAlXCIsXG4gICAgaGVpZ2h0OiBcIjEwMCVcIlxuICB9LFxuICBhdWRpbzogXCJvZmZcIlxufTtcblxuLy8gQ3JlYXRlIGNsaXBcbmNvbnN0IGNsaXAgPSBuZXcgTW90b3JDb3J0ZXguQ2xpcChjb25maWcpO1xuY29uc3QgYW5pbWF0aW9uXzEgPSBuZXcgVGVzdFBsdWdpbi5UZXN0SW5jaWRlbnQoXG4gIHtcbiAgICBhbmltYXRlZEF0dHJzOiB7XG4gICAgICBsZWZ0OiA4MDAsXG4gICAgICBvcGFjaXR5OiAwXG4gICAgfVxuICB9LFxuICB7XG4gICAgaWQ6IFwiYW5pbWF0aW9uXzFcIixcbiAgICBzZWxlY3RvcjogXCIjb25lXCIsXG4gICAgZHVyYXRpb246IDYwMDAwXG4gIH1cbik7XG5jb25zdCBhbmltYXRpb25fMiA9IG5ldyBUZXN0UGx1Z2luLlRlc3RJbmNpZGVudChcbiAge1xuICAgIGFuaW1hdGVkQXR0cnM6IHtcbiAgICAgIGxlZnQ6IDgwMCxcbiAgICAgIG9wYWNpdHk6IDBcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBpZDogXCJhbmltYXRpb25fMlwiLFxuICAgIHNlbGVjdG9yOiBcIiNvbmVcIixcbiAgICBkdXJhdGlvbjogNjAwMDBcbiAgfVxuKTtcbmNvbnN0IGFuaW1hdGlvbl8zID0gbmV3IFRlc3RQbHVnaW4uVGVzdEluY2lkZW50KFxuICB7XG4gICAgYW5pbWF0ZWRBdHRyczoge1xuICAgICAgbGVmdDogODAwLFxuICAgICAgb3BhY2l0eTogMFxuICAgIH1cbiAgfSxcbiAge1xuICAgIGlkOiBcImFuaW1hdGlvbl8zXCIsXG4gICAgc2VsZWN0b3I6IFwiI29uZVwiLFxuICAgIGR1cmF0aW9uOiA2MDAwMFxuICB9XG4pO1xuXG5jbGlwLmFkZEluY2lkZW50KGFuaW1hdGlvbl8xLCAwKTtcbmNsaXAuYWRkSW5jaWRlbnQoYW5pbWF0aW9uXzIsIDYwMDAwKTtcbmNsaXAuYWRkSW5jaWRlbnQoYW5pbWF0aW9uXzMsIDEyMDAwMCk7XG53aW5kb3cuY2xpcCA9IGNsaXA7XG4vLyBBZGQgY2xpcCB0byB0aW1lclxubmV3IFBsYXllcih7XG4gIGNsaXAsXG4gIHRoZW1lOiBcInRyYW5zcGFyZW50XCIsXG4gIHByZXZpZXc6IHRydWUsXG4gIHNob3dWb2x1bWU6IHRydWUsXG4gIHNwZWVkVmFsdWVzOiBbXG4gICAgOCxcbiAgICAzLFxuICAgIFwiZFwiLFxuICAgIC00LFxuICAgIC0yLFxuICAgIC0xLFxuICAgIFwiZGRcIixcbiAgICAtMC41LFxuICAgIDAsXG4gICAgMC41LFxuICAgIDEsXG4gICAgMixcbiAgICA0LFxuICAgIDMyLFxuICAgIC0zMixcbiAgICAxLjJcbiAgXSxcbiAgYnV0dG9uczoge1xuICAgIGRvbmtleWNsaXA6IGZhbHNlXG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQWtCQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQTNCQTtBQUNBO0FBOEJBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFGQTtBQURBO0FBT0E7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUVBO0FBQ0E7QUFDQTtBQUZBO0FBREE7QUFPQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFEQTtBQU9BO0FBQ0E7QUFDQTtBQUhBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWtCQTtBQUNBO0FBREE7QUF2QkEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./testPlugin/TestIncident.js":
/*!************************************!*\
  !*** ./testPlugin/TestIncident.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar MonoIncident = MC.API.MonoIncident;\n\nvar TestIncident =\n/*#__PURE__*/\nfunction (_MonoIncident) {\n  _inherits(TestIncident, _MonoIncident);\n\n  function TestIncident() {\n    _classCallCheck(this, TestIncident);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TestIncident).apply(this, arguments));\n  }\n\n  _createClass(TestIncident, [{\n    key: \"onProgress\",\n    value: function onProgress(progress\n    /*, millisecond*/\n    ) {\n      var delta = this.targetValue - this.initialValues[this.attributeKey];\n      var value = this.initialValues[this.attributeKey] + delta * progress;\n      this.element.setAttribute(this.attributeKey, value);\n    }\n  }, {\n    key: \"getScratchValue\",\n    value: function getScratchValue() {\n      var attribute = this.attributeKey;\n\n      if (this.mcid) {\n        return this.targetValue;\n      }\n\n      var element = this.element;\n\n      if (element === null) {\n        return null;\n      }\n\n      var val = element.getAttribute(attribute);\n\n      if (val === null || val === \"\") {\n        return 0;\n      } else {\n        return parseInt(val);\n      }\n    }\n  }]);\n\n  return TestIncident;\n}(MonoIncident);\n\nmodule.exports = TestIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZXN0UGx1Z2luL1Rlc3RJbmNpZGVudC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Rlc3RQbHVnaW4vVGVzdEluY2lkZW50LmpzP2Q5YzIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTUMgPSByZXF1aXJlKFwiQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleFwiKTtcbmNvbnN0IHsgTW9ub0luY2lkZW50IH0gPSBNQy5BUEk7XG5cbmNsYXNzIFRlc3RJbmNpZGVudCBleHRlbmRzIE1vbm9JbmNpZGVudCB7XG4gIG9uUHJvZ3Jlc3MocHJvZ3Jlc3MgLyosIG1pbGxpc2Vjb25kKi8pIHtcbiAgICBjb25zdCBkZWx0YSA9IHRoaXMudGFyZ2V0VmFsdWUgLSB0aGlzLmluaXRpYWxWYWx1ZXNbdGhpcy5hdHRyaWJ1dGVLZXldO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWVzW3RoaXMuYXR0cmlidXRlS2V5XSArIGRlbHRhICogcHJvZ3Jlc3M7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZUtleSwgdmFsdWUpO1xuICB9XG5cbiAgZ2V0U2NyYXRjaFZhbHVlKCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlS2V5O1xuICAgIGlmICh0aGlzLm1jaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRhcmdldFZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgIGlmIChlbGVtZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdmFsID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWwpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3RJbmNpZGVudDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUF0QkE7QUFDQTtBQXdCQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./testPlugin/TestIncident.js\n");

/***/ }),

/***/ "./testPlugin/main.js":
/*!****************************!*\
  !*** ./testPlugin/main.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var TestIncident = __webpack_require__(/*! ./TestIncident */ \"./testPlugin/TestIncident.js\");\n\nmodule.exports = {\n  name: \"@kissmybutton/test-plugin\",\n  incidents: [{\n    exportable: TestIncident,\n    name: \"TestIncident\"\n  }]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZXN0UGx1Z2luL21haW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXN0UGx1Z2luL21haW4uanM/ZDA0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBUZXN0SW5jaWRlbnQgPSByZXF1aXJlKFwiLi9UZXN0SW5jaWRlbnRcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBuYW1lOiBcIkBraXNzbXlidXR0b24vdGVzdC1wbHVnaW5cIixcbiAgaW5jaWRlbnRzOiBbXG4gICAge1xuICAgICAgZXhwb3J0YWJsZTogVGVzdEluY2lkZW50LFxuICAgICAgbmFtZTogXCJUZXN0SW5jaWRlbnRcIlxuICAgIH1cbiAgXVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFGQTtBQUhBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./testPlugin/main.js\n");

/***/ })

/******/ });