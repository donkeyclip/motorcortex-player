/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "5630e86f051f9f8febb8";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted
/******/ 			)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./index.js")(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Group.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Group.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TimedIncident = __webpack_require__(/*! ./TimedIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/TimedIncident.js\");\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar pipeMessges = __webpack_require__(/*! ../configuration/pipesConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/pipesConf.js\");\nvar checkTransition = __webpack_require__(/*! ../configuration/allowedStateChanges */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/allowedStateChanges.js\").checkTransition;\nvar _CONST = __webpack_require__(/*! ../configuration/_CONST */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/_CONST.js\");\n\n/** @classdesc\n * A Scene is a TimeIncident that can have other Incidents (any kind of) on its timeline and its state mainly derives\n * from the state of its incidents rather than itself.\n */\n\nvar Group = function (_TimedIncident) {\n    _inherits(Group, _TimedIncident);\n\n    function Group() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        _classCallCheck(this, Group);\n\n        var attrsToPass = void 0,\n            propsToPass = void 0;\n\n        /*\n        backwards compatibility. If the user doesn't pass a second argument on the constructor then this is \n        the new way of initialising a Group (only props).\n        */\n        if (oldProps === null) {\n            attrsToPass = {};\n            propsToPass = props;\n        } else {\n            // else, in case the user has passed two arguments then both should be used\n            attrsToPass = props;\n            propsToPass = oldProps;\n        }\n\n        var _this = _possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).call(this, attrsToPass, propsToPass));\n\n        _this.hasIncidents = true;\n        _this.isChannel = false;\n\n        /**\n          keyframes are special points on the Scene's time where Incidents should be executed\n          The keys of the keyframes array are the millisecond on which the keyframes should get executed:\n          e.g.:\n          keyframes = {\n                sec_2000: {\n                    incident_id: IncidentObject,\n                    incident_id: IncidentObject,\n                    ...\n                },\n                ...\n          }\n          */\n        _this.keyframes = {};\n\n        /**\n          An object holding the mapping incidentid / keyframekey, from which we can get the keyframe id as defined on\n          the this.keyframes object where the incident belongs to\n          e.g.:\n          incidentsKeyframeKeys = {\n                incidentid: sec_2000,\n                ...\n          }\n           */\n        _this.incidentsKeyframeKeys = {};\n\n        /**\n          The array holds the Incidents of the Scene on the format:\n          {\n                id // the id of the Incident object\n                incident // the incident object\n                millisecond // the millisecond the incident should be executed\n          }\n           */\n        _this.incidents = [];\n\n        /*\n        an object / associative array holding all Incidents in the form:\n        <incident_id>: Incident object\n         */\n        _this.incidentsById = {};\n\n        _this.calculatedDuration = 0;\n\n        /**\n         * The cnannels attribute holds a list of all intantiated Channels of the Incidents belonging to the clip\n         * this attribute is only valuable when the Group becomes the Clip\n         * The format of the attribute is:\n         *  key-value pairs in the manner:\n         * <mc_plugin_npm_name>: Channel object\n        */\n        _this.instantiatedChannels = {};\n\n        _this.isTheClip = false;\n\n        _this.onGroupInitialise();\n        return _this;\n    }\n\n    _createClass(Group, [{\n        key: 'onGroupInitialise',\n        value: function onGroupInitialise() {\n            // called when group gets initialised\n        }\n    }, {\n        key: '_getChannel',\n\n\n        /*\n        returns the initialised channel by the Clip the Incident belongs to\n        */\n        value: function _getChannel(mc_plugin_npm_name) {\n            if (this.checkParentScene()) {\n                return this.parentSceneObject._getChannel(mc_plugin_npm_name);\n            } else {\n                return null;\n            }\n        }\n\n        /*\n        return the direct parent of a specific Incident\n        */\n\n    }, {\n        key: '_getDirectParent',\n        value: function _getDirectParent(incidentId) {\n            if (this.incidentsById.hasOwnProperty(incidentId)) {\n                return this;\n            } else {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    if (this.incidents[i].incident.hasIncidents) {\n                        var directParent = this.incidents[i].incident._getDirectParent(incidentId);\n                        if (directParent != null) {\n                            return directParent;\n                        }\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        /**\n         * Returns all of its Incidents (not groups) in a collection of the form:\n         * {\n                id,\n                millisecond\n                incident\n            }\n        */\n\n    }, {\n        key: 'getIncidentsByPlugin',\n\n\n        /**\n         * Returns an object with keys the keys of all the plugins Incidents of which appear in the\n         * tree of the Group. All Incidents are projected to the Group's timeline.\n         * The array includes the Group's projection too\n        */\n        value: function getIncidentsByPlugin() {\n            var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n            // initially it only puts itself onthe incidentsByPlugin array, exactly as the plain Incidents do\n            var incidentsByPlugin = {};\n            incidentsByPlugin[this.mc_plugin_npm_name] = [{\n                millisecond: adjustMillisecond,\n                incident: this,\n                id: this.id\n            }];\n\n            // if it is a self contained incident return just that\n            if (this.isTheClip) {\n                return incidentsByPlugin;\n            }\n\n            // otherwise proceed to gather the contained incidents as well\n            for (var i = 0; i < this.incidents.length; i++) {\n                var incidentsToAdd = this.incidents[i].incident.getIncidentsByPlugin(adjustMillisecond + this.incidents[i].millisecond);\n                for (var key in incidentsToAdd) {\n                    if (incidentsByPlugin.hasOwnProperty(key)) {\n                        incidentsByPlugin[key] = incidentsByPlugin[key].concat(incidentsToAdd[key]);\n                    } else {\n                        incidentsByPlugin[key] = incidentsToAdd[key];\n                    }\n                }\n            }\n            return incidentsByPlugin;\n        }\n    }, {\n        key: 'checkStateTransition',\n        value: function checkStateTransition(targetState) {\n            if (checkTransition(this.runTimeInfo.state, targetState, this.direction)) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * This method returns the Incidents of each Incident in array format holding the incidents in the structure:\n            {\n                id,\n                millisecond\n                incident\n            }\n            Depending on who asks for the incidents, it might pass the adjustMillisecond argument. This argument is\n            used in case a parent Group wants to receive the Incidents of its child but by passing a correction millisecond\n            that represents the millisecond the Incident starts on its parent's timeline.\n            @param {int} adjustMillisecond\n        */\n\n    }, {\n        key: 'getProjectedIncidents',\n        value: function getProjectedIncidents() {\n            var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n            var projectedIncidents = [];\n            for (var i = 0; i < this.incidents.length; i++) {\n                var incidentsToAdd = this.incidents[i].incident.getProjectedIncidents(adjustMillisecond + this.incidents[i].millisecond);\n                projectedIncidents = projectedIncidents.concat(incidentsToAdd);\n            }\n            return projectedIncidents;\n        }\n\n        // ******** METHODS TO CALCULATE OVERALL DURATION OF SCENE\n        // *******************************************************\n\n        /**\n         * called when an Incident of the Scene gets affected by an edit or a deletion. The command targets the\n         * root of the scenes tree where a recalc state and a set current millisecond should take place\n         */\n\n    }, {\n        key: 'getDurationAfterIncidentAffected',\n        value: function getDurationAfterIncidentAffected() {\n            var durationBeforeChange = this.duration * 1;\n            var currentMillisecondBeforeChange = this.runTimeInfo.currentMillisecond * 1;\n            var stateBeforeChage = this.state + '';\n\n            var newDuration = 0;\n            for (var i = 0; i < this.incidents.length; i++) {\n                var incident = this.incidents[i];\n                if (incident.incident.duration + incident.millisecond > newDuration) {\n                    newDuration = incident.incident.duration + incident.millisecond;\n                }\n            }\n            this.duration = newDuration;\n            // helper.log('duration changed on incident: ' + this.id + '. New duration: ' + newDuration);\n            if (this.duration != durationBeforeChange) {\n                this.broadcastEvent('duration-change', { newDuration: newDuration });\n            }\n\n            if (this.checkParentScene()) {\n                this.parentSceneObject.getDurationAfterIncidentAffected();\n            } else {\n                // return ;\n                if (this.putMessageOnPipe(pipeMessges._CLIP_EDITING_STATUS, {}, true, \"up\", { type: 'rootClip' }) === \"normal\") {\n                    this.stop();\n                    this.setCurrentMillisecond(currentMillisecondBeforeChange);\n                    this.recalcState(currentMillisecondBeforeChange);\n                    this.restore();\n                }\n            }\n        }\n\n        /**\n         * called when an Incident gets added on the Scene\n         * @param {int} startMillisecond\n         * @param {int} incidentDuration\n         */\n\n    }, {\n        key: 'getDurationAfterIncidentAdded',\n        value: function getDurationAfterIncidentAdded(startMillisecond, incidentDuration) {\n            var durationBeforeChange = this.duration * 1;\n            var currentMillisecondBeforeChange = this.runTimeInfo.currentMillisecond * 1;\n            // const stateBeforeRecal = this.state + \"\";\n\n            if (startMillisecond + incidentDuration > this.calculatedDuration) {\n                this.calculatedDuration = startMillisecond + incidentDuration;\n            }\n\n            if (this.duration != durationBeforeChange) {\n                this.broadcastEvent('duration-change', { newDuration: this.duration });\n            }\n\n            if (this.checkParentScene()) {\n                this.parentSceneObject.getDurationAfterIncidentAffected();\n            } else {\n                // return ;\n                if (this.putMessageOnPipe(pipeMessges._CLIP_EDITING_STATUS, {}, true, \"up\", { type: 'rootClip' }) === \"normal\") {\n                    this.stop();\n                    this.setCurrentMillisecond(currentMillisecondBeforeChange);\n                    this.recalcState(currentMillisecondBeforeChange);\n                    this.restore();\n                }\n            }\n        }\n\n        // ******** INCIDENT METHODS IMPLEMENTATION **************\n        // *******************************************************\n\n    }, {\n        key: 'play',\n        value: function play() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (this.isHeadlessClip) {\n                return false;\n            }\n            _get(Group.prototype.__proto__ || Object.getPrototypeOf(Group.prototype), 'play', this).call(this, props);\n        }\n\n        /** timer blocking */\n\n    }, {\n        key: 'wait',\n        value: function wait() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (_get(Group.prototype.__proto__ || Object.getPrototypeOf(Group.prototype), 'wait', this).call(this, props)) {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    if (props.callerId === this.incidents[i].id) continue;\n                    this.incidents[i].incident.block(props);\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /** timer blocking */\n\n    }, {\n        key: 'block',\n        value: function block(props) {\n            if (_get(Group.prototype.__proto__ || Object.getPrototypeOf(Group.prototype), 'block', this).call(this, props)) {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    this.incidents[i].incident.block();\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /** timer unblocking */\n\n    }, {\n        key: 'resume',\n        value: function resume(props) {\n            if (_get(Group.prototype.__proto__ || Object.getPrototypeOf(Group.prototype), 'resume', this).call(this, props)) {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    this.incidents[i].incident.resume();\n                }\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: 'reset',\n        value: function reset(props) {\n            if (_get(Group.prototype.__proto__ || Object.getPrototypeOf(Group.prototype), 'reset', this).call(this, props)) {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    this.incidents[i].incident.reset();\n                }\n            }\n            return false;\n        }\n    }, {\n        key: 'stop',\n        value: function stop(props) {\n            if (_get(Group.prototype.__proto__ || Object.getPrototypeOf(Group.prototype), 'stop', this).call(this, props)) {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    this.incidents[i].incident.stop();\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * The parameter it takes is relative to the beginning of the Incident itself and it might be negative\n         * Negative targetMillisecond means the target millisecond is N milliseconds BEFORE the start of the Incident\n         * @param {int} targetMillisecondDeltaFromStart - the delta of the target millisecond compared to the Incident start\n        */\n\n    }, {\n        key: 'recalcState',\n        value: function recalcState(targetMillisecondDeltaFromStart) {\n            _get(Group.prototype.__proto__ || Object.getPrototypeOf(Group.prototype), 'recalcState', this).call(this, targetMillisecondDeltaFromStart);\n            for (var i = 0; i < this.incidents.length; i++) {\n                var incident = this.incidents[i].incident;\n                var startMillisecond = this.incidents[i].millisecond;\n                incident.recalcState(targetMillisecondDeltaFromStart - startMillisecond);\n            }\n        }\n    }, {\n        key: 'lastWish',\n        value: function lastWish() {\n            for (var i = 0; i < this.incidents.length; i++) {\n                this.incidents[i].incident.lastWish();\n            }\n            this.stop();\n        }\n\n        // *******************************************************\n        // SCENE SPECIFIC FUNCTIONS / HELPER FUNCTIONS\n\n    }, {\n        key: 'reverse',\n        value: function reverse(_reverse) {\n            this.reversed = _reverse;\n        }\n    }, {\n        key: 'getIncidentMillisecond',\n        value: function getIncidentMillisecond(incidentId) {\n            return conf.getMillisecondFromKeyframeKey(this.incidentsKeyframeKeys[incidentId]);\n        }\n    }, {\n        key: 'exportState',\n        value: function exportState() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            var incidents = [];\n\n            for (var i = 0; i < this.incidents.length; i++) {\n                if (this.incidents[i].incident.autoGenerated === true && props.unprocessed === true) {\n                    continue;\n                }\n                var incident = {};\n                incident.millisecond = this.incidents[i].millisecond;\n                incident.incident = this.incidents[i].incident.exportState(props);\n                incident.id = this.incidents[i].id;\n                incidents.push(incident);\n            }\n\n            var state = _get(Group.prototype.__proto__ || Object.getPrototypeOf(Group.prototype), 'exportState', this).call(this, props);\n            state.incidents = incidents;\n\n            return state;\n        }\n    }, {\n        key: 'setCurrentMillisecond',\n        value: function setCurrentMillisecond(millisecond) {\n            // helper.log(`setting currentUser of ${this.id} to ${millisecond}`);\n            this.runTimeInfo.currentMillisecond = millisecond;\n\n            for (var i = 0; i < this.incidents.length; i++) {\n                var childIncident = this.incidents[i];\n\n                // if the child incident starts before the millisecond and has not ended yet\n                if (childIncident.millisecond < millisecond && childIncident.incident.duration + childIncident.millisecond > millisecond) {\n                    childIncident.incident.setCurrentMillisecond(millisecond - childIncident.millisecond);\n                } else {\n                    childIncident.incident.setCurrentMillisecond(0);\n                }\n            }\n        }\n\n        /**\n         * Returns the Incident by ID no matter if the Incident balongs directly to the Scene of to a child Scene\n         * @param {string} id - the id of the Incident to get\n        */\n\n    }, {\n        key: 'getIncidentById',\n        value: function getIncidentById(id) {\n            if (this.incidentsById.hasOwnProperty(id)) {\n                return this.incidentsById[id];\n            } else {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    if (this.incidents[i].incident.hasIncidents) {\n                        var incident = this.incidents[i].incident.getIncidentById(id);\n                        if (incident != null) {\n                            return incident;\n                        }\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        // *******************************************************\n        // INCIDENTS MANAGEMENT METHODS\n        // POLYMORPHISM APPLIED. IF THE GROUP HAS NO PARENT IT ACTS AS A SCENE. IF THE GROUP HAS PARENT IT ACTS AS\n        // A \"TRANSPARENT GROUP\"\n\n        /**\n         * The checkAddition method serves exactly what its name implies. To check if the addition of an Incident\n         * is valid and accepted, according to the rules defined on the channels.\n         * The method boobles up until it reaches the Clip by carrying adjusting the millisecond.\n         * The method takes as input the management type. On error / conflict:\n         *  - on type === 'all-or-nothing' completely discard addition of all incidents\n         *  - on type === 'keep-passing' it will only add the passing incidents no matter if some other incidents of the addition failed\n         * @param {object} incident - the incident to add\n         * @param {int} millisecond - the millisecond to add the Incident to\n         * @param {string} type - as explained above\n         * The method returns either:\n            {\n                result:true,\n                execute: // an array of functions that when executed it will add the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n        key: 'checkAddition',\n        value: function checkAddition(incident, millisecond) {\n            var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all-or-nothing\";\n\n            // IF THE GROUP HAS NO PARENTS (IS A CLIP)\n            if (this.isTheClip) {\n                if (incident.props.autoGeneratedID === false) {\n                    var existingIncidentWithTheSameId = this.getIncidentById(incident.id);\n                    if (existingIncidentWithTheSameId != null) {\n                        return { result: false, errors: [{ reason: 'Already existing Incident with id ' + incident.id, incident: existingIncidentWithTheSameId }] };\n                    }\n                }\n\n                // get all incidents separated by plugin\n                var incidentsById = incident.getIncidentsByPlugin(millisecond);\n\n                // prepare the return payload\n                var toReturnResult = true;\n                var toReturnErrors = [];\n                var toReturnExecutables = [];\n\n                // for each key of the incidentsById object perform the check\n                for (var key in incidentsById) {\n                    // if the clip had no channel instantiated for the specific key (plugin id) yet create it\n                    if (!this.instantiatedChannels.hasOwnProperty(key)) {\n                        // intstantiate the channel of the plugin by using the reference to the class definition stored on\n                        // the very first incident of the array\n                        this.instantiatedChannels[key] = new incidentsById[key][0].incident.plugin_channel_class({\n                            runTimeInfo: this.runTimeInfo,\n                            context: this.context\n                        });\n                    }\n\n                    // perform the check\n                    var pluginResult = this.instantiatedChannels[key].addIncidents(incidentsById[key], type);\n                    toReturnResult = toReturnResult && pluginResult.result;\n                    if (pluginResult.result === false) {\n                        toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n                    } else {\n                        toReturnExecutables.push(pluginResult.execute);\n                    }\n                } // enf of iteration on the incidentsById keys\n\n                var toReturnExecute = function toReturnExecute() {\n                    for (var i = 0; i < toReturnExecutables.length; i++) {\n                        toReturnExecutables[i]();\n                    }\n                };\n\n                var additionResult = {\n                    result: toReturnResult,\n                    errors: toReturnErrors,\n                    execute: toReturnExecute\n                };\n                return additionResult;\n            } else if (this.isHeadlessClip) {\n                return { result: true, execute: function execute() {} };\n            } else {\n                // IF THE GROUP HAS NO PARENT (ACT AS THE CLIP)\n                return this.parentSceneObject.checkAddition(incident, millisecond + this.parentSceneObject.getIncidentMillisecond(this.id), type);\n            }\n        }\n\n        /**\n         * The checkEdit method serves exactly what its name implies. To check if the edit of an Incident (edit of Incident's position given in milliseconds delta)\n         * is valid and accepted, according to the rules defined on the channels.\n         * The method boobles up until it reaches the Clip.\n         * @param {object} incident - the incident to edit\n         * @param {int} millisecondsDelta - the milliseconds delta of the Incident's start time\n         The method should return either:\n            {\n                result:true,\n                execute: // an array of functions that when executed it will edit the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n        key: 'checkEdit',\n        value: function checkEdit(incident, millisecondsDelta) {\n            // IF THE GROUP HAS NO PARENTS (IS A CLIP)\n            if (this.isTheClip) {\n                // get all incidents separated by plugin\n                var incidentsById = incident.getIncidentsByPlugin();\n\n                // prepare the return payload\n                var toReturnResult = true;\n                var toReturnErrors = [];\n                var toReturnExecutables = [];\n\n                // for each key of the incidentsById object perform the check\n                for (var key in incidentsById) {\n                    // perform the check\n                    var pluginResult = this.instantiatedChannels[key].editIncidents(incidentsById[key], millisecondsDelta);\n                    toReturnResult = toReturnResult && pluginResult.result;\n                    if (pluginResult.result === false) {\n                        toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n                    } else {\n                        toReturnExecutables.push(pluginResult.execute);\n                    }\n                } // enf of iteration on the incidentsById keys\n\n                var toReturnExecute = function toReturnExecute() {\n                    for (var i = 0; i < toReturnExecutables.length; i++) {\n                        toReturnExecutables[i]();\n                    }\n                };\n\n                var editResult = {\n                    result: toReturnResult,\n                    errors: toReturnErrors,\n                    execute: toReturnExecute\n                };\n                return editResult;\n            } else if (this.isHeadlessClip) {\n                return { result: true, execute: function execute() {} };\n            } else {\n                // IF THE GROUP HAS NO PARENT (ACT AS THE CLIP)\n                return this.parentSceneObject.checkEdit(incident, millisecondsDelta);\n            }\n        }\n\n        /**\n         * The checkDelete method serves exactly what its name implies. To check if the deletion of an Incident\n         * is valid and accepted, according to the rules defined on the channels.\n         * The method boobles up until it reaches the Clip.\n         * @param {object} incident - the incident to edit\n         * @param {object} props - if passed it supports the preventSlip key which if false the channel should not slip. This case is for \n            flashDOM of DOMAwareIncidents where we have elements deleted so slipping on their lanes is not valid nor necessary\n          The result might be either:\n            {\n                result:true,\n                execute: // an array of functions that when executed it will remove the Incident on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n        key: 'checkDelete',\n        value: function checkDelete(incidentId) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            // IF THE GROUP HAS NO PARENTS (IS A CLIP)\n            if (this.isTheClip) {\n                var incident = this.getIncidentById(incidentId);\n                // get all incidents separated by plugin\n                var incidentsById = incident.getIncidentsByPlugin();\n\n                // prepare the return payload\n                var toReturnResult = true;\n                var toReturnErrors = [];\n                var toReturnExecutables = [];\n\n                // for each key of the incidentsById object perform the check\n                for (var key in incidentsById) {\n                    // perform the check\n                    var pluginResult = this.instantiatedChannels[key].removeIncidents(incidentsById[key], props);\n                    toReturnResult = toReturnResult && pluginResult.result;\n                    if (pluginResult.result === false) {\n                        toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n                    } else {\n                        toReturnExecutables.push(pluginResult.execute);\n                    }\n                } // enf of iteration on the incidentsById keys\n\n                var toReturnExecute = function toReturnExecute() {\n                    for (var i = 0; i < toReturnExecutables.length; i++) {\n                        toReturnExecutables[i]();\n                    }\n                };\n\n                var editResult = {\n                    result: toReturnResult,\n                    errors: toReturnErrors,\n                    execute: toReturnExecute\n                };\n                return editResult;\n            } else if (this.isHeadlessClip) {\n                return { result: true, execute: function execute() {} };\n            } else {\n                // IF THE GROUP HAS NO PARENT (ACT AS THE CLIP)\n                return this.parentSceneObject.checkDelete(incidentId, props);\n            }\n        }\n\n        /**\n         * It's called always by a child to Scene that wants to expand to the left to its parent.\n         * Expanding a Scene to the left means it tries to add extra (initially unsued) space (in milliseconds) before its\n         * current starting point.\n         * In order for this action to be allowed the Scene's context should allow such an expansion. This means:\n         *  - that if the Scene has no parents this expansion is not legal\n         *  - that if the root Scene of the Scene's parents tree needs to expand on the left in order to apply the expansion\n         *      then the expansion is not acceptable\n         * @param {int} howManyMilliseconds - the milliseconds to expand the Scene to the left\n         * @param {string} sceneId - the child scene id that wants to gain extra space to the left\n         * @returns {object} - the result is an object with two keys:\n         *  - the first key is the \"result\" which might either be true or false\n         *  - the second key is the \"undo\" which is a function that can undo the (approved) expansion\n        */\n\n    }, {\n        key: 'expandSceneToTheLeft',\n        value: function expandSceneToTheLeft(howManyMilliseconds, sceneId) {\n            var _this2 = this;\n\n            // First we identify the expansion within the context of the parent (this) Scene\n            var currentStartMillisecondOfTheChildScene = this.getIncidentMillisecond(sceneId);\n            var newStartMillisecondOfTheChildScene = howManyMilliseconds - currentStartMillisecondOfTheChildScene;\n\n            // Check if the expansion is allowed\n            // if the millisecons to expand are zero or less (meaning the current Scene is actually not affected by the expansion)\n            if (newStartMillisecondOfTheChildScene <= 0) {\n                var rootScene = this;\n                var changeResult = this.changeIncidentsStartMillisecond(-newStartMillisecondOfTheChildScene, sceneId);\n                var undo = function undo() {\n                    _this2.changeIncidentsStartMillisecond(changeResult.oldMillisecond, sceneId);\n                };\n                return {\n                    result: true,\n                    undo: undo,\n                    rootScene: rootScene\n                };\n            }\n\n            // if it reaches to that point that means the expansion afects the left borders of this (parent) Scene as well\n            // If it doesn't have a parent scene that means the expansion is illegal\n            if (!this.checkParentScene()) {\n                return {\n                    result: false\n                };\n            }\n\n            // if it has a parent scene and the this Scene needs to expand to the left as well then this Scene\n            // assigns the obligation to evaluate the expansion to its parent\n            var parentDecision = this.parentSceneObject.expandSceneToTheLeft(newStartMillisecondOfTheChildScene, this.id);\n            // if the parent approves the expansion\n            if (parentDecision.result === true) {\n                // TODO apply the expansion itself and bundle its undo along with the undo coming from the parent\n                this.expandStartPoint(-newStartMillisecondOfTheChildScene);\n                var overallUndo = function overallUndo() {\n                    parentDecision.undo();\n                    _this2.expandStartPoint(newStartMillisecondOfTheChildScene);\n                };\n                return {\n                    result: true,\n                    undo: overallUndo,\n                    rootScene: parentDecision.rootScene\n                };\n            } else {\n                // otherwise\n                return {\n                    result: false\n                };\n            }\n        }\n\n        /**\n         * expands or collapses the Scene's start millisecond by the given milliseconds\n         * e.g. expandStartPoint(200) will expand the Scene by 200 milliseconds to the left keeping all\n         *      of its incidents to the exact same place they were before on the overall timeline\n         * e.g. expandStartPoint(-200) will collapse the Scene, moving its start point by 200 milliseconds\n         *      to the right, again without affecting at all its Incidents' start point on the overall timeline\n         * @param {int} byMilliseconds - the number of milliseconds to expand (positive number) or collapse (minus number) number of milliseconds\n        */\n\n    }, {\n        key: 'expandStartPoint',\n        value: function expandStartPoint(byMilliseconds) {\n            for (var i = 0; i < this.incidents.length; i++) {\n                var incident = this.incidents[i];\n                this.changeIncidentsStartMillisecond(incident.millisecond + byMilliseconds, incident.id);\n            }\n        }\n\n        /**\n         * it alters the start millisecond of any already existing Incident of the Scene\n         * @param {int} newmillisecond - the new millisecond to place the Incident\n         * @param {string} incidentId - the incident id\n         * @returns {function} - the undo function of the change\n        */\n\n    }, {\n        key: 'changeIncidentsStartMillisecond',\n        value: function changeIncidentsStartMillisecond(newmillisecond, id) {\n            var keyframe_sec_key = this.incidentsKeyframeKeys[id];\n            //OPTIMIZE delete is slow on v8 engine we should check if we can achieve the same result by setting the value of the key to undefined\n            delete this.keyframes[keyframe_sec_key][id];\n\n            if (Object.keys(this.keyframes[keyframe_sec_key]).length === 0) {\n                delete this.keyframes[keyframe_sec_key];\n            }\n\n            delete this.listeners[id]; // delete the listener that currently manages the Incident's execution\n\n\n            var oldMillisecond = void 0; // the previous millisecond of the edited incident before the edit\n            for (var i = 0; i < this.incidents.length; i++) {\n                if (this.incidents[i].id === id) {\n                    oldMillisecond = this.incidents[i].millisecond * 1; // *1 to avoid reference, keep value\n                    this.incidents[i].millisecond = newmillisecond;\n                    break;\n                }\n            }\n\n            var incident = this.incidentsById[id];\n            var new_keyframe_sec_key = conf.keyframe_sec_key + newmillisecond;\n            if (!this.keyframes.hasOwnProperty(new_keyframe_sec_key)) {\n                this.keyframes[new_keyframe_sec_key] = {};\n            }\n            this.keyframes[new_keyframe_sec_key][incident.id] = incident;\n            this.incidentsKeyframeKeys[incident.id] = new_keyframe_sec_key;\n\n            // subscribe Incident start on the listeners\n            var funct = function funct(sceneMillisecond, previousTimeStamp, sceneState) {\n                if (sceneMillisecond >= newmillisecond && sceneMillisecond <= newmillisecond + incident.duration) {\n                    incident.play({ startFrom: sceneMillisecond - newmillisecond, previousTimeStamp: previousTimeStamp });\n                }\n            };\n\n            this.subscribe(incident.id, funct);\n\n            return {\n                oldMillisecond: oldMillisecond,\n                incident: incident\n            };\n        }\n\n        /**\n         * Plain groups\n            Can have on their timeline:\n            - Another plain group\n            - An incident with no selector\n            - A dom group (this method should actually turn any incident with selector to one)\n            Can’t have on their timeline:\n            - An attribute group\n         */\n\n    }, {\n        key: '_prepareInicdentForAddition',\n        value: function _prepareInicdentForAddition(incident) {\n            if (!incident.props.hasOwnProperty('selector') && !incident.hasIncidents) {\n                // if the incident is not a group and it has no selector proceed normally\n                return incident;\n            } else if (incident.groupType === \"plain\") {\n                // if the Incident is a plain group proceed normally\n                return incident;\n            } else if (incident.groupType === \"attribute\") {\n                helper.error(\"Plain groups can not accept attribute groups on their timeline\");\n                return null;\n            }\n\n            // We need to turn the Incident to a DOMAwareIncident\n            // before adding it to the group\n            var DOMAwareIncident = __webpack_require__(/*! ../_responsiveness/DOMAwareIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/_responsiveness/DOMAwareIncident.js\");\n            var theDOMAwareIncident = new DOMAwareIncident(incident);\n            return theDOMAwareIncident;\n        }\n    }, {\n        key: 'flashDOM',\n        value: function flashDOM() {\n            var result = {\n                failedAdditions: []\n            };\n            for (var i = 0; i < this.incidents.length; i++) {\n                var flashResult = this.incidents[i].incident.flashDOM();\n                result.failedAdditions = result.failedAdditions.concat(flashResult.failedAdditions);\n            }\n            return result;\n        }\n    }, {\n        key: 'addPassiveIncident',\n        value: function addPassiveIncident(incident, millisecond, sceneId) {\n            var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"all-or-nothing\";\n\n            return this.addIncident(incident, millisecond, sceneId, type, true);\n        }\n\n        /**\n        Any Scene can receive the addIncdent command either for adding an Incident on its own Incidents list or in order\n        to pass deeper the command to the parent Scene of the Incident (sceneId).\n        No matter which Scene took the command, all parent Scenes get informed\n         addIncident takes 3 arguments:\n        @param {Incident} incident - the Incident object to get added\n        @param {int} millisecond - the millisecond to which we want the Incident to get added, starting from the zero point of the\n            target Scene. It can't be negative. Millisecond can also take the string value \"end\" which means the new Incident should be added at the end of the Group\n        @param {string} sceneId - the sceneId to which we want to put the new Incident. It is optional and if it is not specified the\n            target Scene is the current one\n        @param {string} type - one of \"all-or-nothing\" / \"keep-passing\"\n        @param {boolean} autoGenerated - if set to true, it means the Incident was auto generated by another incident and it should not export itself on exportState with unprocessed = true\n         */\n\n    }, {\n        key: 'addIncident',\n        value: function addIncident(incident, millisecond, sceneId) {\n            var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"all-or-nothing\";\n            var autoGenerated = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n            if (millisecond < 0) {\n                return {\n                    result: false,\n                    conflicts: [{\n                        type: 'minus millisecond violation'\n                    }]\n                };\n            }\n\n            if (millisecond === _CONST.atTheEndOfTheGroup.value) {\n                millisecond = this.duration;\n            }\n\n            var originalMillisecond = millisecond * 1; // a backup variable holding the original millisecond passed as\n            // this might change during potential left expansion manipulation\n\n            if (!sceneId || sceneId === this.id) {\n                var that = this;\n                incident = this._prepareInicdentForAddition(incident);\n                if (autoGenerated === true) {\n                    incident.autoGenerated = true;\n                }\n\n                // when adding headless Clips to a group that has context (either because it's the clip itself or because\n                // it belongs to a clip that has context) we need to run flash the newly entered group's dom so it creates\n                // its elementIncidents\n                var flashIncidentsDOMAfterEnter = false;\n\n                if (incident.hasIncidents && incident.isHeadlessClip && this.context != null) {\n                    flashIncidentsDOMAfterEnter = true;\n                }\n\n                incident.setParentScene(that);\n\n                // check if the Incident is eligible for addition\n                var additionCheck = this.checkAddition(incident, millisecond, type);\n                if (additionCheck.result === false) {\n                    return additionCheck;\n                }\n                additionCheck.execute();\n\n                // indexing start\n                this.incidents.push({\n                    id: incident.id,\n                    incident: incident,\n                    millisecond: millisecond\n                });\n                this.incidentsById[incident.id] = incident;\n                var keyframe_sec_key = conf.keyframe_sec_key + millisecond;\n                if (!this.keyframes.hasOwnProperty(keyframe_sec_key)) {\n                    this.keyframes[keyframe_sec_key] = {};\n                }\n                this.keyframes[keyframe_sec_key][incident.id] = incident;\n                this.incidentsKeyframeKeys[incident.id] = keyframe_sec_key;\n                // indexing end\n\n                incident.executionSpeed = this.speed;\n\n                // subscribe Incident start on the listeners\n                // currentMillisecond: the millisecond the Group is on\n                // millisecond: the millisecond we set our Incident to get executed on the Group's timeline\n                var funct = function funct(currentMillisecond, previousTimeStamp, sceneState) {\n                    if (incident.speed > 0) {\n                        if (currentMillisecond >= millisecond && currentMillisecond <= millisecond + incident.duration || incident.state === 'idle' && currentMillisecond > millisecond) {\n                            // helper.log('greater');\n                            incident.play({ startFrom: currentMillisecond - millisecond, previousTimeStamp: previousTimeStamp });\n                        }\n                    } else {\n                        if (currentMillisecond >= millisecond && currentMillisecond <= millisecond + incident.duration || incident.state === 'completed' && currentMillisecond < millisecond) {\n                            // helper.log('greater');\n                            incident.play({ startFrom: currentMillisecond - millisecond, previousTimeStamp: previousTimeStamp });\n                        }\n                    }\n                };\n\n                this.subscribe(incident.id, funct);\n                this.getDurationAfterIncidentAdded(millisecond, incident.duration);\n\n                if (flashIncidentsDOMAfterEnter) {\n                    var result = incident.flashDOM();\n                    if (result.failedAdditions.length > 0 && type === \"all-or-nothing\") {\n                        this.removeIncident(incident.id);\n                        return {\n                            result: false,\n                            conflicts: result.failedAdditions\n                        };\n                    } else {\n                        // if flashing incident's DOM passes let the Incident know that\n                        // it now has context\n                        incident._onGetContextOnce();\n                        this.onAddIncident(incident, millisecond);\n                        helper.notice('incident added');\n\n                        return {\n                            result: true,\n                            meta: {\n                                incidentId: incident.id\n                            }\n                        };\n                    }\n                } else {\n                    if (this.context != null) {\n                        incident._onGetContextOnce();\n                    }\n                    this.onAddIncident(incident, millisecond);\n                    helper.notice('incident added');\n                    return {\n                        result: true,\n                        meta: {\n                            incidentId: incident.id\n                        }\n                    };\n                }\n            } else {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    if (this.incidents[i].incident.hasIncidents) {\n                        if (this.incidents[i].incident.addIncident(incident, millisecond - this.incidents[i].millisecond, sceneId).result === true) {\n                            return {\n                                result: true,\n                                meta: {\n                                    incidentId: incident.id\n                                }\n                            };\n                        }\n                    }\n                } // if it reaches the end of the loop without having returned true\n                return { result: false };\n            }\n        }\n\n        /**\n        Any Scene can receive the editIncident command in order to set a new starting point for one of its own Incidents or to\n        pass the command deeper down to its children Scenes so the parent of it can take care of it.\n        The Incident object and id remain the same after the edit.\n        No matter which Scene takes the command, all Parents get infomed about the edit.\n         It takes two params:\n         @param {string} id - the id of the incident to be edited\n         @param {int} newmillisecond - the new position of the Incident compared to the target Scene start (and not to the Scene it belongs)\n         */\n\n    }, {\n        key: 'editIncident',\n        value: function editIncident(id, newmillisecond) {\n            var expansionValidation = null;\n            var originalMillisecond = newmillisecond * 1;\n\n            if (!helper.isString(id)) {\n                helper.error('editIncident method of Group expects as its first argument the id of the Incident to edit in string format. ' + (typeof id === 'undefined' ? 'undefined' : _typeof(id)) + ' passed');\n                return {\n                    result: false,\n                    conflicts: [{\n                        type: 'wrong parameter type'\n                    }]\n                };\n            }\n\n            if (this.incidentsById[id]) {\n                var existingMillisecond = this.getIncidentMillisecond(id);\n                var millisecondDelta = newmillisecond - existingMillisecond;\n                // first check for minus expansion\n                if (newmillisecond < 0) {\n                    // if the Scene doesn't have a parent then it is the root and thus it can't expand to the left\n                    if (!this.checkParentScene()) {\n                        return {\n                            result: false,\n                            conflicts: [{\n                                type: 'minus millisecond violation'\n                            }]\n                        };\n                    }\n\n                    expansionValidation = this.parentSceneObject.expandSceneToTheLeft(-newmillisecond, this.id);\n                    if (expansionValidation.result === false) {\n                        return {\n                            result: false,\n                            conflicts: [{\n                                type: 'minus millisecond violation'\n                            }]\n                        };\n                    } else {\n                        newmillisecond = 0;\n                    }\n                } // end of if millisecond < 0\n\n                // if the edit is allowed (thus we come to that point) and the originalMillisecond is lower than 0\n                if (originalMillisecond < 0) {\n                    this.expandStartPoint(-originalMillisecond);\n                }\n\n                this.incidentsById[id].stop();\n\n                var editCheck = this.checkEdit(this.incidentsById[id], millisecondDelta);\n                if (editCheck.result === false) {\n                    helper.error(editCheck);\n                    if (expansionValidation !== null) {\n                        expansionValidation.undo();\n                        this.expandStartPoint(originalMillisecond);\n                    }\n                    return editCheck;\n                }\n\n                editCheck.execute();\n\n                var editIncidentStartResult = this.changeIncidentsStartMillisecond(newmillisecond, id);\n\n                this.getDurationAfterIncidentAffected();\n\n                this.onEditIncident(this.incidentsById[id], editIncidentStartResult.oldMillisecond, newmillisecond);\n\n                return { result: true };\n            } else {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    if (this.incidents[i].incident.hasIncidents) {\n                        var result = this.incidents[i].incident.editIncident(id, newmillisecond - this.incidents[i].millisecond);\n                        if (result.result === true) {\n                            return { result: true };\n                        } else if (result.hasOwnProperty('errors')) {\n                            // if the result.result is false but it contains no errors that means the Incident we're looking for just not belong to \n                            // to the Group we are iterating in. Though if result.result==false && result.hasOwnProperty('errors') that means the \n                            // Incident has been found but editing it results to errors.\n                            return result;\n                        }\n                    }\n                } // if it reaches the end of the loop without having returned true\n                return { result: false };\n            }\n        }\n\n        /**\n        Any Scene can receive the removeIncident command either for removing one of its own Incidents or for passing the command\n        deeper down to its Scenes tree and have the Incident deleted no matter to which child Scene it belongs\n        No matter which Scene took the command, all parent Scenes get informed\n         It takes just one argument:\n        @param {string} id - the id of the Incident to be deleted\n        @param {object} props - if passed it supports the preventSlip key which if false the channel should not slip. This case is for \n            flashDOM of DOMAwareIncidents where we have elements deleted so slipping on their lanes is not valid nor necessary\n         */\n\n    }, {\n        key: 'removeIncident',\n        value: function removeIncident(id) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            if (this.incidentsById[id]) {\n                var deleteCheck = this.checkDelete(id, props);\n                if (deleteCheck.result === false) {\n                    helper.error(deleteCheck);\n                    return deleteCheck;\n                }\n\n                deleteCheck.execute();\n\n                this.incidentsById[id].lastWish();\n\n                var keyframe_sec_key = this.incidentsKeyframeKeys[id];\n                //OPTIMIZE delete is slow on v8 engine we should check if we can achieve the same result by setting the value of the key to undefined\n                delete this.incidentsKeyframeKeys[id];\n                delete this.keyframes[keyframe_sec_key][id];\n                delete this.incidentsById[id];\n                if (Object.keys(this.keyframes[keyframe_sec_key]).length === 0) {\n                    delete this.keyframes[keyframe_sec_key];\n                }\n                delete this.listeners[id]; // delete the listener that manages the Incident's execution\n\n                var deletedIncident = void 0;\n                for (var i = 0; i < this.incidents.length; i++) {\n                    if (this.incidents[i].id === id) {\n                        deletedIncident = this.incidents.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.getDurationAfterIncidentAffected();\n                this.onRemoveIncident(deletedIncident[0]);\n\n                return { result: true };\n            } else {\n                for (var _i = 0; _i < this.incidents.length; _i++) {\n                    if (this.incidents[_i].incident.hasIncidents) {\n                        if (this.incidents[_i].incident.removeIncident(id).result === true) {\n                            return { result: true };\n                        }\n                    }\n                } // if it reaches the end of the loop without having returned true\n                return { result: false };\n            }\n        }\n\n        /**\n         * This method which is provided only by Groups accepts an incidentId and a new duration and \n         * edits the duration of the corresponding incident accordingly\n         * @param {string} incidentId - the id of the incident to resize\n         * @param {int} newDuration - the new duration of the incident in milliseconds\n        */\n\n    }, {\n        key: 'resizeIncident',\n        value: function resizeIncident(incidentId, newDuration) {\n            var existingIncident = this.getIncidentById(incidentId);\n            if (existingIncident === null) {\n                return { result: false, errors: [{ reason: 'The incident with id ' + incidentId + ' does not belong to the Group or any of its child Groups' }] };\n            }\n            return existingIncident.resize(newDuration);\n        }\n\n        /**\n         * This method which is provided only by Groups accepts an incidentId and a new attrs object \n         * and edits the attributes of the corresponding incident accordingly\n         * If the attribute editing ends up with conflicts the edit is discarded.\n         * @param {string} incidentId - the id of the incident to resize\n         * @param {int} attrs - the new attrs of the Incident\n        */\n\n    }, {\n        key: 'editIncidentAttributes',\n        value: function editIncidentAttributes(incidentId, attrs) {\n            var directParent = this._getDirectParent(incidentId);\n            if (directParent === null) {\n                return {\n                    result: false,\n                    errors: ['The Incident with id ' + incidentId + ' does not belong to the Group or any of its child Groups']\n                };\n            }\n            return directParent._editChildIncidentAttributes(incidentId, attrs);\n        }\n\n        /**\n         * By this method a Group tries to edit the attributes of one of its children. The process goes as follows:\n         * 1. The Group gets an export of the Incident's state\n         * 2. The Group deletes the Incident\n         * 3. The Group tries to create a new Incident with the same id as the old one and with type=\"all-or-nothing\"\n         * 4.a. If the new Incident gets added ok process finishes\n         * 4.b. If the new Incident doesn't get added because of conflicts the previous Incident gets back in\n         * @param {string} incidentId - the id of the Incident to edit its attrs\n         * @param {object} attrs - the new attributes of the Incident\n        */\n\n    }, {\n        key: '_editChildIncidentAttributes',\n        value: function _editChildIncidentAttributes(incidentId, attrs) {\n            var incidentToEdit = this.getIncidentById(incidentId);\n            var existingIncidentDefinition = incidentToEdit.exportState();\n            var millisecond = this.getIncidentMillisecond(incidentId);\n            this.removeIncident(incidentId);\n            var newIncidentProps = Object.assign({}, existingIncidentDefinition.props);\n            var newIncident = new existingIncidentDefinition.Incident(attrs, newIncidentProps);\n            var result = this.addIncident(newIncident, millisecond);\n            if (result.result === false) {\n                var myOldIncident = new existingIncidentDefinition.Incident(existingIncidentDefinition.attrs, newIncidentProps);\n                this.addIncident(myOldIncident, millisecond);\n                return result;\n            } else {\n                return {\n                    result: true\n                };\n            }\n        }\n\n        /**\n         * Starting from itself and going all the way down to each and every leaf of its tree it systols/diastoles the\n         * Incidents\n         * @param {float} durationFraction the fraction of the new duration to the existing duration\n        **/\n\n    }, {\n        key: 'systolDiastole',\n        value: function systolDiastole(durationFraction) {\n            this.calculatedDuration = durationFraction * this.duration;\n            for (var i = 0; i < this.incidents.length; i++) {\n                this.changeIncidentsStartMillisecond(this.incidents[i].millisecond * durationFraction, this.incidents[i].incident.id);\n                this.incidents[i].incident.systolDiastole(durationFraction);\n            }\n\n            // if it is a Clip all Channels of it should get resized\n            if (this.isTheClip) {\n                for (var key in this.instantiatedChannels) {\n                    this.instantiatedChannels[key]._resize(durationFraction);\n                }\n            }\n        }\n\n        // THE \"EARS\" OF THE SCENE TO ITS CHILD INCIDENTS\n        /**\n              NEW STATE CALCULATION RULES:\n              If a Scene has at least one clipBlockingWaiting (meaning the full Clip is halted at the moment) the Scene’s state will be “clipBlockingWaiting” unless it is the Clip so its state will be “waiting”.\n              If a Scene has all children on the completed state, the Scene has the completed state as well.\n              If a Scene has at least one of its children on one of the following states:\n                    waiting     it has started playing and has been halted internally\n                    playing     it has started playing\n                    idle            it has not been executed yet\n              the Scene is on playing state\n               */\n\n    }, {\n        key: 'incidentStateChange',\n        value: function incidentStateChange(id, oldState, newState, props) {\n            if (newState === 'clipBlockingWaiting' || newState === 'sceneBlockingWaiting') {\n                var propsToPass = props;\n                propsToPass.callerId = id;\n                if (newState === 'sceneBlockingWaiting') {\n                    // stop propagation as this should only affect the Scene and not its parents\n                    props.waitingStateName = 'waiting';\n                }\n                this.wait(propsToPass);\n            } else if (newState === 'completed' && this.speed > 0) {\n                // helper.log('Incident ' + id + ' got into completed state');\n                // helper.log('Incident ' + this.id + ' takes care of it');\n                var allCompleted = true;\n                // helper.log('going to iterate on all Incidents');\n                for (var i = 0; i < this.incidents.length; i++) {\n                    // helper.log(\n                    //     this.incidents[i].incident.id + '.state = ' + this.incidents[i].incident.state\n                    // );\n                    if (this.incidents[i].incident.state != 'completed') {\n                        allCompleted = false;\n                        break;\n                    }\n                }\n                if (allCompleted) {\n                    this.complete();\n                }\n            } else if (newState === 'idle' && this.speed < 0) {\n                // helper.log('Incident ' + id + ' got into completed state');\n                // helper.log('Incident ' + this.id + ' takes care of it');\n                var _allCompleted = true;\n                // helper.log('going to iterate on all Incidents');\n                for (var _i2 = 0; _i2 < this.incidents.length; _i2++) {\n                    // helper.log(\n                    //     this.incidents[i].incident.id + '.state = ' + this.incidents[i].incident.state\n                    // );\n                    if (this.incidents[_i2].incident.state != 'idle') {\n                        _allCompleted = false;\n                        break;\n                    }\n                }\n                if (_allCompleted) {\n                    this.complete();\n                }\n            } else {\n                // in case the child was either on sceneBlockingWaiting or clipBlockingWaiting and now is changing\n                this.resume();\n            }\n        }\n\n        /*\n        BLOCK WAITINGS MANIPULATION METHODS\n        */\n        /**\n        @param {object} props -\n        the nature of a waiting might be:\n             - scheduled    *                               default\n             - dynamic\n             - system-error\n          the waitingStateName of a waiting can be:\n             - waiting *                                    default\n             - sceneBlockingWaiting\n             - channelBlockingWaiting\n             - clipBlockingWaiting\n        id: the id of the triggering Incident\n        */\n\n    }, {\n        key: 'setBlockWaiting',\n        value: function setBlockWaiting(props) {\n            if (props.waitingStateName === 'sceneBlockingWaiting') {\n                this.wait(props);\n                this.blockingWaitings.push(props);\n            } else if (props.waitingStateName === 'channelBlockingWaiting' && this.isChannel) {\n                this.wait(props);\n                this.blockingWaitings.push(props);\n            } else if (props.waitingStateName === 'clipBlockingWaiting' && this.isTheClip) {\n                this.wait(props);\n                this.blockingWaitings.push(props);\n            } else if (props.waitingStateName === 'waiting' && props.id === this.id) {\n                this.wait(props);\n                this.blockingWaitings.push(props);\n            } else {\n                if (this.checkParentScene()) {\n                    this.parentSceneObject.setBlockWaiting(props);\n                }\n            }\n        }\n\n        /**\n         @param {object} props -\n        the nature of a waiting might be:\n             - scheduled    *                               default\n             - dynamic\n             - system-error\n          the waitingStateName of a waiting can be:\n             - waiting *                                    default\n             - sceneBlockingWaiting\n             - channelBlockingWaiting\n             - clipBlockingWaiting\n        id: the id of the triggering Incident\n        */\n\n    }, {\n        key: 'unsetBlockWaiting',\n        value: function unsetBlockWaiting(props) {\n            if (props.waitingStateName === 'sceneBlockingWaiting') {\n                this.removeBlock(props);\n                if (this.blockingWaitings.length === 0) {\n                    this.unblock();\n                }\n            } else if (props.waitingStateName === 'channelBlockingWaiting' && this.isChannel) {\n                this.removeBlock(props);\n                if (this.blockingWaitings.length === 0) {\n                    this.unblock();\n                }\n            } else if (props.waitingStateName === 'clipBlockingWaiting' && this.isTheClip) {\n                this.removeBlock(props);\n                if (this.blockingWaitings.length === 0) {\n                    this.unblock();\n                }\n            } else if (props.waitingStateName === 'waiting' && props.id === this.id) {\n                this.removeBlock(props);\n                if (this.blockingWaitings.length === 0) {\n                    this.unblock();\n                }\n            } else {\n                if (this.checkParentScene()) {\n                    this.parentSceneObject.unsetBlockWaiting(props);\n                }\n            }\n        }\n\n        /**\n         * it checks if a block with the provided props exists on its blockingWaitings array\n         * if it exists it removes it.\n         * If the remaining blocking waitings are equal to 0 it returns true otherwise it returns false\n        */\n\n    }, {\n        key: 'removeBlock',\n        value: function removeBlock(props) {\n            var newBlockingWaitings = [];\n            var found = false;\n            for (var i = 0; i < this.blockingWaitings.length; i++) {\n                var bWaiting = this.blockingWaitings[i];\n                if (bWaiting.id === props.id) {\n                    found = true;\n                    continue;\n                }\n                newBlockingWaitings.push(this.blockingWaitings[i]);\n            }\n\n            this.blockingWaitings = newBlockingWaitings;\n            return found;\n        }\n\n        /**\n         * goTo method should always be handled by the Clip. No other Group nor Incident can handle goTo alone.\n         * Thus, if the Group is not the Clip it passes the command up. If the Group is the Clip then it handles goTo\n         * by passing the command to its Channels.\n        **/\n\n    }, {\n        key: 'goTo',\n        value: function goTo(millisecond) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            // first decide the millisecond we want to goTo\n            if (millisecond === null || millisecond === undefined) {\n                millisecond = this.runTimeInfo.currentMillisecond;\n            }\n            if (props.hasOwnProperty('relativeTo')) {\n                millisecond += this.getIncidentMillisecond(props.relativeTo);\n            }\n\n            if (millisecond > this.duration) {\n                millisecond = this.duration;\n            } else if (millisecond < 0) {\n                millisecond = 0;\n            }\n\n            if (this.isTheClip) {\n                for (var key in this.instantiatedChannels) {\n                    this.instantiatedChannels[key].goTo(millisecond, props);\n                }\n                return true;\n            } else if (this.isHeadlessClip) {\n                return false;\n            } else {\n                props.relativeTo = this.id;\n                if (this.parentSceneObject.goTo(millisecond, props)) {\n                    return true;\n                }\n            }\n        }\n\n        /**\n         * when the Group is on test mode (this.isOnTestMode = true) the emulateStep method\n         * becomes functional.\n         * The method takes as input the millisecondsDelta from the previous timestamp and triggers\n         * the step function passing in a baked timestamp so the Incident behaves exactly as if the requestAnimationFrame run\n         * passing a timestamp that has exactly millisecondsDelta difference from the previous one\n         * @param {int} millisecondsDelta - the milliseconds difference between the previous timestamp and the new one\n        */\n\n    }, {\n        key: 'emulateStep',\n        value: function emulateStep(millisecondsDelta) {\n            if (!this.isOnTestMode) {\n                helper.error('emulateStep method can only be used on test mode');\n            } else {\n                this.step(this.runTimeInfo.previousTimeStamp + millisecondsDelta);\n                for (var i = 0; i < this.incidents.length; i++) {\n                    var childIncident = this.incidents[i];\n\n                    if (childIncident.incident.state === \"playing\") {\n                        childIncident.incident.emulateStep(Math.abs((this.runTimeInfo.currentMillisecond - childIncident.millisecond - childIncident.incident.runTimeInfo.currentMillisecond) / this.speed));\n                    }\n                }\n            }\n        }\n\n        /**\n         * The Scene receives this command from its chilren and the purpose of it is to help the caller\n         * identify the milliseconds delta of its start compared to the root Scene of it.\n         * In a multi-level situation with Scenes within scenes the Scene that receives this command might not own\n         * the Incident that triggered this thread directly. That's why we use the extraDelta helping parameter that\n         * actually delivers level by level the delta of the triggering Incident within the tree\n         * @param {string} incidentId = the id of the child incident of the scene that trigerred the method\n         * @param {int} extraDelta - the extra delta to add to the result\n        **/\n\n    }, {\n        key: 'getRootCurrentMillisecondDeltaFromIncidentsStart',\n        value: function getRootCurrentMillisecondDeltaFromIncidentsStart(incidentId) {\n            var extraDelta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n            // first step find the start millisecond of the incident\n            var incidentMillisecond = this.getIncidentMillisecond(incidentId);\n            if (!this.checkParentScene()) {\n                return this.runTimeInfo.currentMillisecond - incidentMillisecond - extraDelta;\n            } else {\n                return this.parentSceneObject.getRootCurrentMillisecondDeltaFromIncidentsStart(this.id, incidentMillisecond + extraDelta);\n            }\n        }\n\n        /*\n        CALLBACKS AFTER SUCCESSFUL ADDING / EDITING / DELETING AN INCIDENT\n         */\n\n    }, {\n        key: 'onAddIncident',\n        value: function onAddIncident(incident, millisecond) {}\n    }, {\n        key: 'onEditIncident',\n        value: function onEditIncident(incident, oldMillisecond, newMillisecond) {}\n    }, {\n        key: 'onRemoveIncident',\n        value: function onRemoveIncident(incident) {}\n\n        // on Groups there is no need to prevent re-invoking the onGetContext method\n\n    }, {\n        key: '_onGetContextOnce',\n        value: function _onGetContextOnce() {\n            this.onGetContext();\n            for (var i = 0; i < this.incidents.length; i++) {\n                this.incidents[i].incident._onGetContextOnce();\n            }\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            return this.calculatedDuration;\n        },\n        set: function set(duration) {\n            this.calculatedDuration = duration;\n        }\n    }, {\n        key: 'groupType',\n        get: function get() {\n            return \"plain\";\n        }\n    }, {\n        key: 'projectedIncidents',\n        get: function get() {\n            return this.getProjectedIncidents();\n        }\n    }, {\n        key: 'executionSpeed',\n        set: function set(speed) {\n            helper.notice(this.id + ' is setting its execution speed to: ' + speed + ' while on millisecond: ' + this.runTimeInfo.currentMillisecond);\n            if (speed === 0) {\n                helper.error(\"Speed can't be 0\");\n                return false;\n            }\n\n            this.speed = speed;\n            this.onSpeedChange(speed);\n            for (var i = 0; i < this.incidents.length; i++) {\n                this.incidents[i].incident.executionSpeed = speed;\n            }\n        }\n    }, {\n        key: 'isHeadlessClip',\n        get: function get() {\n            return !this.checkParentScene() && !this.isTheClip;\n        }\n    }, {\n        key: 'context',\n        get: function get() {\n            if (this.isTheClip) {\n                return this.ownContext;\n            } else if (this.isHeadlessClip) {\n                return null;\n            } else {\n                return this.parentSceneObject.context;\n            }\n        }\n    }]);\n\n    return Group;\n}(TimedIncident);\n\nmodule.exports = Group;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Group.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Incident.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Incident.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar checkTransition = __webpack_require__(/*! ../configuration/allowedStateChanges */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/allowedStateChanges.js\").checkTransition;\nvar helper = new Helper();\nvar Channel = __webpack_require__(/*! ../_Channels/Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/Channel.js\");\nvar pipeMessges = __webpack_require__(/*! ../configuration/pipesConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/pipesConf.js\");\nvar generalConf = __webpack_require__(/*! ../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\n\n/** @classdesc\n * Incidents are all events that should happen on a specific time on the timeline. An incident can have parametric\n      execution behaviour based on the times it has been executed and (might be) on other parameters.\n\n      The state an Incident can have is one of the following:\n                 idle\n                 playing\n                 waiting\n                 sceneBlockingWaiting\n                 clipBlockingWaiting\n                 blocked    // in the case the Incident is blocked / paused by a waiting\n                 completed\n\n      Each Incident has the obligation to inform the Scene about its state changes.\n      For this Incident provides the method “setParentScene” which takes just one argument a Timer object.\n      Timer provides the method “incidentStateChange” which lets the Incidents change their state by\n      providing their id and their new state.\n * */\n\nvar Incident = function () {\n    /**\n     It takes just one argument, \"props\". Props pass data useful only for the following:\n     An incident can be set to be either inexhaustible (meaning it can be executed again and again infinite times -- default)\n     or finite meaning it can only be executed a limited (specific) number of times. This info can be found on the maxLifeCycles\n     Of course the incident can be reset to its initial condition at any time through the \"reset\" method it provides.\n      As a luxuriousness, and along WITH the maxLifeCycles parameter, the Incident also provides the executionPattern parameter\n     through which the programmer / user can define a more complex behaviour of the Incident execution depending on the number times\n     the incident has alrady be executed ( is the 1st time, the 2nd time, the 3rd time etc) and any custom parameter it\n     holds. The execution times are held on the \"executionTimes\" attribute of the class.\n      props:\n     {\n        id: if passed that's the id of the Incident. If not we create a new one\n        plugin_channel_class - if passed gets set to it\n        mc_plugin_npm_name - if passed gets set to it\n        \n     }\n        @param {object} props */\n    function Incident() {\n        var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, Incident);\n\n        this.attrs = attrs;\n        this.props = props;\n\n        // auto-generated id. This parameter indicates whether the id of the Incident was given by the user or \n        // it was auto-generated by MC. Auto-generated ids do not get checked for duplicates on checkAddition \n        // process, for the shake of performance\n        this.autoGeneratedID = false;\n        if (!props.hasOwnProperty('id') && props.autogeneratedID != true) {\n            this.autoGeneratedID = true;\n        }\n        this.id = props.id || helper.getAnId();\n\n        // this parameter is initialised to false. Once the onGetContext method gets invoked this parameter\n        // is set to true so we prevent multiple executions of the onGetContext method\n        this.gotContext = false;\n\n        /*\n        these are the default values that define channeling for the default Incidents. These values get ovewriden through\n        the loadPlugin method of MC with the values found on the main.js file of the plugin\n        */\n        this.plugin_channel_class = Channel;\n        this.mc_plugin_npm_name = \"motor-cortex-js\";\n        if (props.hasOwnProperty('plugin_channel_class')) {\n            this.plugin_channel_class = props.plugin_channel_class;\n        }\n        if (props.hasOwnProperty('mc_plugin_npm_name')) {\n            this.mc_plugin_npm_name = props.mc_plugin_npm_name;\n        }\n\n        /* \n        The following two properties (\"statusBeforeHalt\" and \"stateBeforeStop\") which have stupidly \n        used \"status\" in the one case and \"state\" in the other\n        act as the memory of the Incident in the case of a stop or\n        a halting command (wait or block), storing the state of it just before any of the two get \n        executed. \n        These properties can be used in various ways in the program\n        and they do not target specific functionality.\n        */\n        // the status of the Incident before it got halted by either the block or the wait command\n        this.statusBeforeHalt = 'idle';\n        // holds the state of the Incident before the stop command\n        this.stateBeforeStop = 'idle';\n\n        this.timesExecuted = 0;\n        this.parentSceneObject = null;\n\n        this.runTimeInfo = {\n            state: 'idle' // one of \"idle\", \"playing\", \"waiting\"\n        };\n\n        this.bitIncident = true;\n        this.hasIncidents = false;\n\n        /* an array holding all  */\n        this.eventsSubscriptions = {};\n\n        /*\n        Right now many keys of the Incident (such as \"props\", \"attrs\", etc) are already been used by the Incident \n        class. The final users of the library (the plugin developers) might want to keep special / specific data\n        on their Incidents and:\n        a) they might don't know which keys are already taken and which are not\n        b) might use an already used key and ruin the functionality\n        c) so they feel unsafe keeping data and it's not safe for the lib too\n        For this reason we have a blank object reserved for them, the \"customParams\", in order for them to \n        put anything they want and we encourage them to use the built-in methods:\n        setParam\n        getParam\n        setParams\n        for this job\n        */\n        this.customParams = {};\n\n        this.speed = 1;\n\n        /*\n        initialValues is an object holding the autmatically computed initial values of the animatedAttrs \n        (if any). The initialValues are calculated by the AttributesChannel (only Incidents belonging to \n        an AttributesChannel have initialValues).\n        The keys set of this object is identical to the object attrs.animatedAttrs \n        The only thing the generic AttributesChannel can't calculate is the initial value of an animated attr\n        of a specific element when there are no other Incidents entered on its lanes yet. These values are\n        the \"scratchValues\" and they are strongly dependend on the nature of the lib. E.g. for a CSS animation\n        what we are looking for can be found on the computedStyle.\n        */\n        this.initialValues = {};\n\n        /*\n        The user has the ability to explicitely define the initial values for any of the animatedAttrs. The user\n        can do that by providing the initialValues object on the attrs of the constructor.\n        */\n        this.userDefinedInitialValues = {};\n        if (attrs != null && attrs != undefined) {\n            if (attrs.hasOwnProperty('initialValues')) {\n                this.userDefinedInitialValues = attrs.initialValues;\n            }\n        }\n\n        /*\n        blockingWaitings is an array, a collection, of blocing waitings that have the Scene as target.\n        The logic is simple:\n        - if the scene receives a \"sceneBlockingWaiting\" then it is the target and it adopts it\n        - if the scene receives a \"channelBlockingWaiting\" then if it is a channel it adopts it otherwise it tries to\n            pass it further up until it finds a channel\n        - if the scene receives a \"clipBlockingWaiting\" if it is the Clip it adopts it otherwise it tries to pass it\n            further up until it reaches the clip\n        Each object on this array represents a blocking waiting triggered by a child of the Scene\n            and which targets the Scene itself.\n        Each child signs the blocking waiting by assigning its own id to it. Each child can only assign just one\n            blocking waiting at a time.\n        The structure of each blocking waiting appearing on this array is the following:\n        {\n            id: the-signature-of-the-triggering-incident,\n            type: any of the sceneBlockingWaiting / channelBlockingWaiting / ClipBlockingWaiting,\n            nature: any of the scheduled / dynamic / system-problem\n        }\n        */\n        this.blockingWaitings = [];\n\n        /**\n        * @member {boolean} - if testingMode is set to true the requestAnimationFrame method is not going\n        * to get executed automatically but instead the emaulateStep method will start functioning allowing\n        * developers to pass the milliseconds difference from the previous timestamp manually\n        **/\n        this.testMode = false;\n        if (props.hasOwnProperty('testMode')) {\n            this.testMode = props.testMode;\n        }\n\n        if (props.hasOwnProperty('initialValues')) {\n            this.initialValues = props.initialValues;\n        }\n\n        /**\n         * @member {boolean} - if autoGenerated is set to true, it means that this Incident has been auto-generated by its parent on initialisation.\n         * This happens when plugins export Incidents that on initialisation they automatically create other incidents and automatically put them \n         * on specific points on their timeline. \n         * In such cases we don't want these Incidents to be exported on getState with unprocessed = true and this because they will be re-generated\n         * automatically on the clip's reconstruction process based on the exported json. \n        */\n        this.autoGenerated = false;\n\n        this.onInitialise(attrs, props);\n    }\n\n    _createClass(Incident, [{\n        key: 'getScratchValue',\n\n\n        /**\n        This method shoudl be overwritten by the Incidents of the plugins. The method accepts\n        as arguments the mcid (an element) and the attribue (one of the animatedAttrs, if any)\n        and return the initial value of them as the library calculates / defines them. The \n        returned value represents the very initial value of the element's attribute before\n        any Incident that alters it gets added.\n        @param {string} mcid\n        @param {string} attribute\n        @returns {mixed} - the initial value of the element's attribute just when the HTML & CSS\n        of the Clip gets rendered\n        */\n        value: function getScratchValue(mcid, attribute) {\n            return 0;\n        }\n    }, {\n        key: 'getElementAttribute',\n        value: function getElementAttribute(attr) {\n            return this.element.getAttribute(attr);\n        }\n    }, {\n        key: 'getElementByMCID',\n        value: function getElementByMCID(mcid) {\n            if (this.context === null) {\n                return null;\n            }\n\n            return helper.getElementByMCID(this.context, mcid);\n        }\n    }, {\n        key: 'flashDOM',\n        value: function flashDOM() {\n            return {\n                failedAdditions: []\n            };\n        }\n    }, {\n        key: 'turnIncidentToMC',\n        value: function turnIncidentToMC() {\n            this.plugin_channel_class = Channel;\n            this.mc_plugin_npm_name = \"motor-cortex-js\";\n        }\n    }, {\n        key: 'resetState',\n        value: function resetState() {}\n    }, {\n        key: 'getIncidentsByPlugin',\n\n\n        /**\n         * Returns an object with keys the keys of all the plugins Incidents of which appear in the\n         * tree of the Group. All Incidents are projected to the Group's timeline.\n         * The array includes the Group's projection too\n        */\n        value: function getIncidentsByPlugin() {\n            var adjustMillisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n            var incidentsByPlugin = {};\n            incidentsByPlugin[this.mc_plugin_npm_name] = [{\n                millisecond: adjustMillisecond,\n                incident: this,\n                id: this.id\n            }];\n            return incidentsByPlugin;\n        }\n    }, {\n        key: 'setParam',\n        value: function setParam(param, value) {\n            this.customParams[param] = value;\n        }\n    }, {\n        key: 'getParam',\n        value: function getParam(param) {\n            return this.customParams[param];\n        }\n    }, {\n        key: 'setParams',\n        value: function setParams() {\n            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this.customParams = params;\n        }\n\n        /** *************************************************\n        HELPER FUNCTIONS\n        checks if the parent Scene object has been defined */\n\n    }, {\n        key: 'checkParentScene',\n        value: function checkParentScene() {\n            if (this.parentSceneObject === null) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }, {\n        key: 'checkStateTransition',\n        value: function checkStateTransition(targetState) {\n            // we prevent play (and thus any other transition) in cases the Incident has no parent\n            // group. The method changes on Group\n            if (this.checkParentScene()) {\n                if (checkTransition(this.runTimeInfo.state, targetState, this.direction)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: '_hasUserDefinedInitialValue',\n        value: function _hasUserDefinedInitialValue(attr) {\n            return this.userDefinedInitialValues.hasOwnProperty(attr);\n        }\n    }, {\n        key: '_getUserDefinedInitialValue',\n        value: function _getUserDefinedInitialValue(attr) {\n            return this.userDefinedInitialValues[attr];\n        }\n    }, {\n        key: 'setInitialValue',\n        value: function setInitialValue(attr, value) {\n            if (this._hasUserDefinedInitialValue(attr)) {\n                helper.notice('Incident with id ' + this.id + ' has initial value defined for ' + attr + ' and no change is allowed on it');\n                return;\n            }\n            this.initialValues[attr] = value;\n        }\n    }, {\n        key: 'hasInitialValue',\n        value: function hasInitialValue(attr) {\n            return this._hasUserDefinedInitialValue(attr) || this.initialValues.hasOwnProperty(attr);\n        }\n    }, {\n        key: 'getInitialValue',\n        value: function getInitialValue(attr) {\n            if (this._hasUserDefinedInitialValue(attr)) {\n                return this._getUserDefinedInitialValue(attr);\n            }\n            return this.initialValues[attr];\n        }\n    }, {\n        key: 'setParentScene',\n        value: function setParentScene(parentSceneObject) {\n            this.parentSceneObject = parentSceneObject;\n        }\n\n        /* *************************************************\n        STATE CHANGING FUNCTION\n        method from which we can set the state of the Incident.\n        this method should never be invoked directly from code outside the core definition of Incident. All state changes\n        should occur through the corresponding built-in functions (play, wait, etc) */\n\n    }, {\n        key: '_setState',\n        value: function _setState(state) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            var oldState = this.runTimeInfo.state;\n            this.runTimeInfo.state = state;\n\n            if (this.checkParentScene() && state === 'completed' && this.speed > 0) {\n                this.parentSceneObject.incidentStateChange(this.id, oldState, state, props);\n            } else if (this.checkParentScene() && state === 'idle' && this.speed < 0) {\n                this.parentSceneObject.incidentStateChange(this.id, oldState, state, props);\n            }\n\n            var newState = state;\n            if ((state === 'waiting' || state === 'blocked') && props.waitingStateName != 'waiting') {\n                newState = props.waitingStateName;\n            }\n            this.broadcastEvent('state-change', { oldState: oldState, newState: newState });\n        }\n    }, {\n        key: 'setCurrentMillisecond',\n        value: function setCurrentMillisecond(millisecond) {\n            this.runTimeInfo.currentMillisecond = millisecond;\n        }\n\n        /**\n         * sets the state of the Incident silently without broadcasting the event nor informing the parent Incident\n         */\n\n    }, {\n        key: '_dontTellMamaStateChange',\n        value: function _dontTellMamaStateChange(state) {\n            if (this.checkStateTransition(state)) {\n                // helper.log('setting state of ' + this.id + ' to ' + state);\n                var oldState = this.runTimeInfo.state;\n                this.runTimeInfo.state = state;\n                this.broadcastEvent('state-change', { oldState: oldState, newState: state });\n            }\n        }\n\n        /** *************************************************\n        EXECUTION FUNCTIONS\n        sets state to \"playing\" */\n\n    }, {\n        key: 'play',\n        value: function play() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (!this.onBeforePlay(props)) {\n                return false;\n            }\n            if (!this.checkStateTransition('playing')) {\n                return false;\n            }\n\n            this.timesExecuted += 1;\n            this.onPlay(props);\n            this._setState('playing');\n\n            if (this.bitIncident) {\n                this.complete();\n            }\n            return true;\n        }\n\n        /**\n         wait method can be invoked by the object itself or by its parent Scene. No children are allowd to call the wait\n         method.\n          the nature of a waiting might be:\n             - scheduled    *                               default\n             - dynamic\n             - system-error\n          the waitingStateName of a waiting can be:\n             - waiting *                                    default\n             - sceneBlockingWaiting\n             - clipBlockingWaiting\n          An Incident can only exit waiting mode through the resume method\n          */\n\n    }, {\n        key: 'wait',\n        value: function wait(props) {\n            if (!props.waitingStateName) {\n                props = { nature: 'scheduled', waitingStateName: 'waiting' };\n            }\n\n            if (!this.checkStateTransition('waiting')) {\n                return false;\n            }\n\n            this.statusBeforeHalt = this.runTimeInfo.state;\n            this._setState('waiting', props);\n            this.onWait(props);\n            return true;\n        }\n    }, {\n        key: 'setBlockWaiting',\n        value: function setBlockWaiting(props) {\n            if (props.waitingStateName === 'waiting' && props.id === this.id) {\n                this.blockingWaitings.push(props);\n                this.wait();\n            } else {\n                if (this.checkParentScene()) {\n                    this.parentSceneObject.setBlockWaiting(props);\n                }\n            }\n        }\n    }, {\n        key: 'unblock',\n        value: function unblock() {\n            if (this.statusBeforeHalt === 'playing') {\n                this.resume();\n            }\n        }\n\n        /**\n         block and unblock methods can only be invoked by a parent of the Incident. No children (in the case of a Scene) nor\n         the Incident itself can block or unblock itself.\n          */\n\n    }, {\n        key: 'block',\n        value: function block() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (!this.checkStateTransition('blocked')) {\n                return false;\n            }\n\n            this.statusBeforeHalt = this.runTimeInfo.state;\n            this._setState('blocked', props);\n            this.onBlock(props);\n            return true;\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (!this.onBeforeResume(props)) {\n                return false;\n            }\n            if (!this.checkStateTransition(this.statusBeforeHalt)) {\n                return false;\n            }\n\n            this.onResume(props);\n            this._setState(this.statusBeforeHalt);\n\n            return true;\n        }\n    }, {\n        key: 'reset',\n        value: function reset() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            // this.stop();\n            if (!this.checkStateTransition('idle')) {\n                return false;\n            }\n\n            this.blockingWaitings = [];\n\n            this.timesExecuted = 0;\n            this._setState('idle');\n            this.onReset(props);\n            return true;\n        }\n    }, {\n        key: 'complete',\n        value: function complete() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (this.speed > 0) {\n                if (!this.checkStateTransition('completed')) {\n                    return false;\n                }\n            } else {\n                if (!this.checkStateTransition('idle')) {\n                    return false;\n                }\n            }\n\n            this.onBeforeComplete(props);\n\n            if (this.speed > 0) {\n                this._setState('completed');\n            } else {\n                this._setState('idle');\n            }\n\n            if (this.speed > 0) {\n                this.runTimeInfo.currentMillisecond = this.duration;\n            } else {\n                this.runTimeInfo.currentMillisecond = 0;\n            }\n\n            return true;\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (!this.checkStateTransition('transitional')) {\n                return false;\n            }\n\n            this.blockingWaitings = [];\n\n            this.stateBeforeStop = this.state + \"\";\n            this._setState('transitional');\n            this.onStop(props);\n            return true;\n        }\n\n        /**\n         * Restores the execution of the Incident after a stop\n        **/\n\n    }, {\n        key: 'restore',\n        value: function restore() {\n            if ((this.state === 'waiting' || this.state === 'blocked') && this.stateBeforeStop === 'playing') {\n                this.resume();\n            }\n        }\n    }, {\n        key: 'arm',\n        value: function arm() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (!this.checkStateTransition('waiting')) {\n                return false;\n            }\n\n            this.blockingWaitings = [];\n\n            this._dontTellMamaStateChange('waiting');\n            this.onArm(props);\n            return true;\n        }\n\n        /**\n         * There are various events happening on the scope of an Incident. Any class extending Incident might have / define its own\n         * events.\n         *\n         * The \"broadcastEvent\" method of the Incident allows the Incident (of any type, even on classes extending it) broadcast\n         * events on any of the interested parties that have subscribed to it.\n         *\n         * The \"subscribeToEvents\" method allows any third party subscribe and listen to events' broadcasts by any Incident\n         *\n         * @param {string} id - the unique id of the event listener\n         * @param {function} fnct - a function to get executed whenever an event gets broadcasted by the specific Incident. The\n         *  fnct will be executed on all events' broadcasts and it will receive the event object as argument. The event object is\n         *  of format:\n         *  {\n                name: the name of the event,\n                meta: an object holding all the meta-info of the event\n            }\n         }\n        */\n\n    }, {\n        key: 'subscribeToEvents',\n        value: function subscribeToEvents(id, fnct) {\n            this.eventsSubscriptions[id] = fnct;\n        }\n\n        /**\n         * unsubscribes any subscribed listener to the Incident's events broadcasting\n         * @param {string} id\n         */\n\n    }, {\n        key: 'unsubscribeFromEvents',\n        value: function unsubscribeFromEvents(id) {\n            if (this.eventsSubscriptions[id]) {\n                delete this.eventsSubscriptions[id];\n            }\n        }\n\n        /**\n         * broadcasts any event\n         * @param {string} eventName\n         * @param {object} meta\n         */\n\n    }, {\n        key: 'broadcastEvent',\n        value: function broadcastEvent(eventName, meta) {\n            for (var key in this.eventsSubscriptions) {\n                this.eventsSubscriptions[key](eventName, meta);\n            }\n        }\n\n        /**\n         * This method's (which should be called whenever a slip ends) purpose is to calculate and set\n         * the right state of the Incident based on the target millisecond.\n         * The parameter it takes is relative to the beginning of the Incident itself and it might be negative\n         * Negative targetMillisecond means the target millisecond is N milliseconds BEFORE the start of the Incident\n         * @param {int} targetMillisecondDeltaFromStart - the delta of the target millisecond compared to the Incident start\n         */\n\n    }, {\n        key: 'recalcState',\n        value: function recalcState(targetMillisecondDeltaFromStart) {\n            if (targetMillisecondDeltaFromStart >= 0) {\n                // if it ends before the target millisecond\n                this._dontTellMamaStateChange('completed');\n            } else {\n                // if it has been completed on targetMillisecond\n                this._dontTellMamaStateChange('idle');\n            }\n        }\n    }, {\n        key: 'systolDiastole',\n        value: function systolDiastole(durationFraction) {\n            return true;\n        }\n    }, {\n        key: 'exportState',\n        value: function exportState() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            var toExport = {\n                id: this.id,\n                duration: this.duration,\n                class: this.constructor.name,\n                mc_plugin_npm_name: this.mc_plugin_npm_name,\n                customParams: this.customParams,\n                attrs: Object.assign({}, this.attrs),\n                props: Object.assign({ id: this.id, autogeneratedID: true }, this.props)\n            };\n\n            var exportType = 'live';\n            if (props.hasOwnProperty('type')) {\n                if (props.type === \"json\") {\n                    toExport.initialValues = this.initialValues;\n                    exportType = 'json';\n                }\n            }\n\n            if (exportType === 'live') {\n                toExport.plugin_channel_class = this.plugin_channel_class;\n                toExport.state = this.state;\n                toExport.Incident = this.constructor;\n            }\n\n            return toExport;\n        }\n\n        // *************************************************\n        /* PIPES SYSTEM\n            The Pipes system is a vertical interconnection system that runs out the full Incidents tree and connects all of them.\n            Through Pipes any Incident can communicate anything to all of its children or parents.\n            \n            In order to initialise a pipe message the user should use the putMessageOnPipe method. This method is exposed by all\n                Incidents, of all types, and it is first been processed by the receiver Incident and then passed further down to\n                its children (if any).\n            This method takes exactly 5 arguments:\n            - name (the name of the command). This should be unique among the full MC ecosystem including native message names & \n                plugins' message names. In order to avoid conflicts is good to use the convention: <plugin_npm_name>.<message_name>\n            - parameters (an object holding the parameters of the command)\n            - selfExecute (true/false) - If true the Incident will try to process the pipe command before further passing further up or down\n            - direction (default \"down\") - defines the direction of the pipe command. It can be either \"down\" so it passes it down to \n                its children or \"up\" so it passes it up to its parents\n            - target. The target defines / describes the receivers of the pipe message. This might be:\n                - null (default) - targets all incidents\n                - type: \"group\" - targets only groups (including clips)\n                - type: \"clip\" - targets only clips\n                - type: \"rootClip\" - targets only the root clip of the tree\n                - id: \"<id>\" - targets a specific incident with specific id\n                - plugin: \"<plugin_npm_name>\" - targets only Incidents of a specific plugin\n            \n            Handling pipe messages:\n            The putMessageOnPipe method decides whether it should be processed or\n            not by the Incident depending on the target. This method is the _processPipeMessage. If the Incident should process the \n            pipe message the _processPipeMessage method calls the \"handlePipeMessage\" method passing the name and the parameters.\n            The \"handlePipeMessage\" is a built in method as well and the developers should just overwrite it so they handle the \n            various pipes messages based on their names.\n            \n            Pipe messages targeting the clip return a result.\n        */\n\n    }, {\n        key: 'putMessageOnPipe',\n        value: function putMessageOnPipe(name, params, selfExecute, direction) {\n            var target = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n            if (selfExecute) {\n                if (target === null) {\n                    this.handlePipeMessage(name, params);\n                } else {\n                    if (target.hasOwnProperty('type')) {\n                        if (target.type === 'group' && this.hasIncidents) {\n                            this.handlePipeMessage(name, params);\n                        } else if (target.type === 'clip' && this.isTheClip) {\n                            this.handlePipeMessage(name, params);\n                        } else if (target.type === \"rootClip\" && this.isTheClip && !this.checkParentScene()) {\n                            return this.handlePipeMessage(name, params);\n                        }\n                    } else if (target.hasOwnProperty('id')) {\n                        if (this.id === target.id) {\n                            this.handlePipeMessage(name, params);\n                            return;\n                        }\n                    } else if (target.hasOwnProperty('plugin')) {\n                        if (this.mc_plugin_npm_name === target.plugin) {\n                            this.handlePipeMessage(name, params);\n                        }\n                    }\n                }\n            }\n\n            if (direction === \"down\" && this.hasIncidents) {\n                for (var i = 0; i < this.incidents.length; i++) {\n                    this.incidents[i].incident.putMessageOnPipe(name, params, true, direction, target);\n                }\n            } else if (direction === \"up\" && this.checkParentScene()) {\n                this.parentSceneObject.putMessageOnPipe(name, params, true, direction, target);\n            }\n        }\n    }, {\n        key: 'handlePipeMessage',\n        value: function handlePipeMessage(name, params) {}\n        // Plugins developers can overwrite this method so they can handle pipe messages per name\n\n\n        // *************************************************\n        /* BLOCKING WAITINGS\n        The triggerBlockingWatiing method that can be used by any Incident at any time. The Incident can trigger a blocking waiting. \n        The \"blocking waitings\" block the root Clip's execution (puts it to blocked state). \n        Any blocking waiting has an id (it must be unique) and it can be unblocked by any Incident at any time through the triggerUnblock\n        method which takes an id and removes the corresponding blocking waiting. \n        */\n\n    }, {\n        key: 'triggerBlockingWatiing',\n        value: function triggerBlockingWatiing(id) {\n            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            params.blockingWaitingID = id;\n            this.putMessageOnPipe(pipeMessges._BLOCKING_WAITING, params, true, \"up\", { type: 'rootClip' });\n        }\n    }, {\n        key: 'triggerUnblock',\n        value: function triggerUnblock(id) {\n            var params = {\n                blockingWaitingID: id\n            };\n            this.putMessageOnPipe(pipeMessges._UNBLOCK_WAITING, params, true, \"up\", { type: 'rootClip' });\n        }\n\n        // *************************************************\n        // ACTUAL BAHAVIOUR FUNCTIONS THAT SHOULD BE IMPLEMENTED BY ALL CLASSES EXTENDING INCIDENT\n        // this is a chance to block play of an incident by returning false\n\n    }, {\n        key: 'onBeforePlay',\n        value: function onBeforePlay() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            return true;\n        }\n    }, {\n        key: 'onPlay',\n        value: function onPlay(props) {\n            helper.info('Overwritte the \"onPlay\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onResume',\n        value: function onResume(props) {\n            helper.info('Overwritte the \"onResume\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onBeforeResume',\n        value: function onBeforeResume() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            return true;\n        }\n\n        /**\n         * Helper function that normalises the millisecond to pass to the Incidents on goTo\n         * If millisecond < 0 it makes it 0\n         * If millisecond > duration of the Incident it makes it equals to the duration\n         * @param {int} millisecond - the millisecond to normalise. It represents the distance of the time to go to from\n         *  the start of the Incident\n         * @returns {int} - the normalised millisecond\n        **/\n\n    }, {\n        key: 'normaliseGoToTarget',\n        value: function normaliseGoToTarget(millisecond) {\n            if (millisecond < 0) {\n                millisecond = 0;\n            } else if (millisecond > this.duration) {\n                millisecond = this.duration;\n            }\n\n            return millisecond;\n        }\n\n        /**\n         * goTo on the Incident level implements the logic of passing the authority of execution to its parent\n         * (if there is any)\n         * Incidents that implement their own goTo logic should overwrite the goTo method otherwise the goTo\n         * will be passed up until either it reaches a context owner or a tree root\n         * @param {int} millisecond - (optional) the millisecond where we want to goTo. If not provided we use the current millisecond of the Incident\n         * @returns {boolean} - if the context owner of the Incident actually executes the goTo command the\n         *  method returns true otherwise it returns false\n        **/\n\n    }, {\n        key: 'goTo',\n        value: function goTo(millisedond) {\n            // if the incident has a parent scene\n            if (this.checkParentScene()) {\n                if (this.parentSceneObject.goTo(millisedond, { relativeTo: this.id })) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\n         * Returns the milliseconds delta between the Incident's start point and its root Scene's current millisecond.\n         * If the result is negative it means the root scene's current millisecond is prior to the Incident's start point\n         * @returns {int}\n        **/\n\n    }, {\n        key: 'getRootCurrentMillisecondDeltaFromStart',\n        value: function getRootCurrentMillisecondDeltaFromStart() {\n            if (this.checkParentScene()) {\n                return this.parentSceneObject.getRootCurrentMillisecondDeltaFromIncidentsStart(this.id);\n            } else {\n                return this.runTimeInfo.currentMillisecond;\n            }\n        }\n    }, {\n        key: 'beOn',\n        value: function beOn(millisecond) {\n            var goTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            var previousState = this.state + \"\";\n            this.stop();\n            if (goTo) {\n                this.goTo(millisecond);\n            }\n            this.setCurrentMillisecond(millisecond);\n            this.recalcState(millisecond);\n            var newState = this.state + \"\";\n            return {\n                previousState: previousState,\n                newState: newState\n            };\n        }\n    }, {\n        key: '_onGetContextOnce',\n        value: function _onGetContextOnce() {\n            if (!this.gotContext) {\n                this.onGetContext();\n                this.gotContext = true;\n            }\n        }\n    }, {\n        key: 'onGetContext',\n        value: function onGetContext() {\n            helper.info('Overwritte the \"onGetContext\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onStop',\n        value: function onStop(props) {\n            helper.info('Overwritte the \"onBeforeStop\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onReset',\n        value: function onReset(props) {\n            helper.info('Overwritte the \"onReset\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onBeforeComplete',\n        value: function onBeforeComplete(props) {\n            helper.info('Overwritte the \"onBeforeEnd\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onBlock',\n        value: function onBlock(props) {\n            helper.info('Overwritte the \"onBlock\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onUnblock',\n        value: function onUnblock(props) {\n            helper.info('Overwritte the \"onUnblock\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onWait',\n        value: function onWait(props) {\n            helper.info('Overwritte the \"onWait\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onArm',\n        value: function onArm(props) {\n            helper.info('Overwritte the \"onArm\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'lastWish',\n        value: function lastWish() {\n            this.stop();\n        }\n    }, {\n        key: 'onInitialise',\n        value: function onInitialise(attrs, props) {\n            helper.info('Overwritte the \"onInialise\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'onSpeedChange',\n        value: function onSpeedChange(speed) {\n            helper.info('Overwritte the \"onSpeedChange\" method with the code you want to get executed', 'info');\n        }\n    }, {\n        key: 'isOnTestMode',\n        get: function get() {\n            if (this.checkParentScene()) {\n                return this.parentSceneObject.isOnTestMode;\n            } else {\n                return this.testMode;\n            }\n        }\n    }, {\n        key: 'selector',\n        get: function get() {\n            return this.props.selector;\n        }\n\n        /* shortcuts for attrs.attrs and attrs.animatedAttrs */\n\n    }, {\n        key: 'animAttributes',\n        get: function get() {\n            return this.attrs.animatedAttrs;\n        }\n    }, {\n        key: 'confAttributes',\n        get: function get() {\n            return this.attrs.attrs;\n        }\n    }, {\n        key: 'element',\n        get: function get() {\n            if (this.contex === null) {\n                return [];\n            }\n            if (this.context.getElementByMCID) {\n                return this.context.getElementByMCID(this.props.mcid);\n            }\n            return this.context.getElements(this.selector)[0];\n        }\n\n        /*\n        returns the initialised channel by the Clip the Incident belongs to\n        */\n\n    }, {\n        key: 'channel',\n        get: function get() {\n            if (this.checkParentScene()) {\n                return this.parentSceneObject._getChannel(this.mc_plugin_npm_name);\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: 'elements',\n        get: function get() {\n            if (this.contex === null) {\n                return [];\n            }\n            return this.context.getElements(this.selector);\n        }\n    }, {\n        key: 'executionSpeed',\n        set: function set(speed) {\n            this.speed = parseFloat(speed);\n            this.onSpeedChange(speed);\n            // this.beOn(this.runTimeInfo.currentMillisecond);\n        }\n\n        /**\n         * gets the Incident's duration. This method should be overwriten accordingly by all Incidents\n         */\n\n    }, {\n        key: 'duration',\n        get: function get() {\n            return 0;\n        },\n        set: function set(duration) {\n            ;\n        }\n    }, {\n        key: 'state',\n        get: function get() {\n            return this.runTimeInfo.state;\n        }\n    }, {\n        key: 'context',\n        get: function get() {\n            if (this.checkParentScene()) {\n                return this.parentSceneObject.context;\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: 'direction',\n        get: function get() {\n            return this.speed > 0 ? \"forwards\" : \"backwards\";\n        }\n    }]);\n\n    return Incident;\n}();\n\nmodule.exports = Incident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Incident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/TimedIncident.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/TimedIncident.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Incident = __webpack_require__(/*! ./Incident */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Incident.js\");\nvar Helper = __webpack_require__(/*! ../_coreUtils//Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar isTimePausingState = __webpack_require__(/*! ../configuration/allowedStateChanges */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/allowedStateChanges.js\").isTimePausingState;\n\n/** @classdesc\n * A TimedIncident is an incident that lasts some time. It has duration and a timer of its own. It can take all the states.\n *\n */\n\nvar TimedIncident = function (_Incident) {\n    _inherits(TimedIncident, _Incident);\n\n    function TimedIncident() {\n        var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, TimedIncident);\n\n        var _this = _possibleConstructorReturn(this, (TimedIncident.__proto__ || Object.getPrototypeOf(TimedIncident)).call(this, attrs, props));\n\n        _this.resetState();\n\n        /**\n          @member {object} - listeners are functions to be executed on time change of the Timed Incident. It has the following format:\n           listeners: {\n            listener_id: {\n                     funct : the function to be executed\n                     threshold : the threshold of delta\n                     roundTo : round millisecond\n                 },\n                 listener_id: {\n                     funct : the function to be executed\n                     threshold : the threshold of delta\n                     roundTo : round millisecond\n                 },\n                 ...\n           }\n           */\n        _this.listeners = {};\n\n        _this.bitIncident = false;\n        return _this;\n    }\n\n    _createClass(TimedIncident, [{\n        key: 'requestAnimaFrame',\n        value: function requestAnimaFrame(fn) {\n            /* if the Incident is on test mode we want to prevent requestAnimationFrame as execution\n                during testing is controlled through emulateStep method */\n            if (this.isOnTestMode) {\n                return function () {};\n            }\n\n            try {\n                return this.context.window.requestAnimationFrame(fn);\n            } catch (e) {\n                helper.error('Your browser does not support requestAnimationFrame');\n                return function (fn) {};\n            }\n        }\n\n        /**\n         * when the Incident is on test mode (this.isOnTestMode = true) the emulateStep method\n         * becomes functional.\n         * The method takes as input the millisecondsDelta from the previous timestamp and triggers\n         * the step function passing in a baked timestamp so the Incident behaves exactly as if the requestAnimationFrame run\n         * passing a timestamp that has exactly millisecondsDelta difference from the previous one\n         * @param {int} millisecondsDelta - the milliseconds difference between the previous timestamp and the new one\n        */\n\n    }, {\n        key: 'emulateStep',\n        value: function emulateStep(millisecondsDelta) {\n            if (!this.isOnTestMode) {\n                helper.error('emulateStep method can only be used on test mode');\n            } else {\n                this.step(this.runTimeInfo.previousTimeStamp + millisecondsDelta);\n            }\n        }\n\n        /**\n         * All TimedIncidents must implement the get duration method\n        **/\n\n    }, {\n        key: 'checkResizedIncident',\n\n\n        /**\n         * checks if a duration edit is feasible and doesn't cause conflicts\n         * @param {int} duration - the new duration\n        **/\n        value: function checkResizedIncident(durationFraction, incident) {\n            var adjustMillisecond = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n            // IF THE GROUP HAS NO PARENTS (IS A CLIP)\n            if (this.isTheClip && incident.id != this.id) {\n                // get all incidents separated by plugin\n                var incidentsById = incident.getIncidentsByPlugin();\n\n                // prepare the return payload\n                var toReturnResult = true;\n                var toReturnErrors = [];\n                var toReturnExecutables = [];\n                // for each key of the incidentsById object perform the check\n\n                for (var key in incidentsById) {\n                    // perform the check\n                    var adjustedIncidents = helper.systoleDiastoleProjections(incidentsById[key], durationFraction, adjustMillisecond);\n                    var pluginResult = this.instantiatedChannels[key].checkResizedIncidents(adjustedIncidents);\n                    toReturnResult = toReturnResult && pluginResult.result;\n                    if (pluginResult.result === false) {\n                        toReturnErrors = toReturnErrors.concat(pluginResult.errors);\n                    } else {\n                        toReturnExecutables.push(pluginResult.execute);\n                    }\n                } // enf of iteration on the incidentsById keys\n\n                var toReturnExecute = function toReturnExecute() {\n                    for (var i = 0; i < toReturnExecutables.length; i++) {\n                        toReturnExecutables[i]();\n                    }\n                };\n\n                var editResult = {\n                    result: toReturnResult,\n                    errors: toReturnErrors,\n                    execute: toReturnExecute\n                };\n                return editResult;\n            } else if (this.isTheClip) {\n                return { result: true, execute: function execute() {} };\n                // the resizing of the internal Channels occurs on the systolDiastole method of the Groups when they identify that the Groups is actually a Clip\n            } else if (this.isHeadlessClip) {\n                return { result: true, execute: function execute() {} };\n            } else {\n                // IF THE GROUP HAS NO PARENT (ACT AS THE CLIP)\n                return this.parentSceneObject.checkResizedIncident(durationFraction, incident, adjustMillisecond + this.parentSceneObject.getIncidentMillisecond(this.id));\n            }\n        }\n\n        /**\n         * Edits the duration of the Incident\n         * @param {int} duration - the new duration in milliseconds\n        **/\n\n    }, {\n        key: 'resize',\n        value: function resize(duration) {\n            // console.trace();\n            // don't waste cpu resources if the new duration equals the current value\n            if (duration === this.duration) {\n                return { result: true };\n            } else if (duration <= 0) {\n                helper.error('resizeIncident method of Scene only accepts integers > 0 as the new duration of the Scene. ' + duration + ' provided.');\n                return {\n                    result: false\n                };\n            }\n            // stop the execution\n            this.stop();\n\n            var editCheck = this.checkResizedIncident(duration / this.duration, this);\n\n            if (editCheck.result === false) {\n                helper.error(editCheck);\n                return editCheck;\n            }\n\n            this.systolDiastole(duration / this.duration);\n            editCheck.execute();\n            var whereAmI = this.getRootCurrentMillisecondDeltaFromStart();\n            // whereAmI = this.normaliseGoToTarget(whereAmI);\n            // this.goTo(whereAmI);\n\n            if (this.checkParentScene()) {\n                this.parentSceneObject.getDurationAfterIncidentAffected();\n            }\n            this.broadcastEvent('duration-change', { newDuration: this.duration });\n            return { result: true };\n        }\n    }, {\n        key: 'systolDiastole',\n        value: function systolDiastole(durationFraction) {\n            this.duration = this.duration * durationFraction;\n        }\n    }, {\n        key: 'resetState',\n        value: function resetState() {\n            _get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'resetState', this).call(this);\n            // the current millisecond having as 0 the start of the animation\n            if (this.state === 'idle') this.runTimeInfo.currentMillisecond = 0; // the current millisecond of the incident as it's calculated based on the speed of the Incident\n            else if (this.state === 'completed') this.runTimeInfo.currentMillisecond = this.duration;\n            // in other words the millisecond that the Incident is on the UI\n            this.runTimeInfo.start = null; // the millisecond started as provided by requestAnimationFrame\n            this.runTimeInfo.previousTimeStamp = null; // the timestamp of the previous circle as provided by requestAnimationFrame\n            this.runTimeInfo.pauseMoment = null; // the pause moment as provided by new Date().getTime()\n            this.runTimeInfo.pauseMillisecond = 0; // the pauseMillisecond is the current millisecond at the pause moment\n            for (var key in this.listeners) {\n                this.listeners[key].cavaDelta = 0;\n            }\n        }\n\n        /**\n         * This method calculates the previousTimeStamp based on the target UI millisecond we want to go to and\n         * the speed of the Incident.\n         * E.g. if targetUIMillisecond = 2000 and speed =2 then we will take the timestamp from requestAnimationFrame (ra_stamp) and\n         * set the previousMillisecond to ra_stamp-1000\n         * @param {int} currentMIllisecond - the millisecond to which we want our Inicdent to be on\n        */\n\n    }, {\n        key: 'programmaticSetPreviousTimeStamp',\n        value: function programmaticSetPreviousTimeStamp(targetUIMillisecond) {\n            var _this2 = this;\n\n            var that = this;\n\n            if (this.isOnTestMode) {\n                that.runTimeInfo.previousTimeStamp = 0;\n            }\n\n            this.requestAnimaFrame(function (timestamp) {\n                that.runTimeInfo.previousTimeStamp = timestamp - targetUIMillisecond / _this2.speed;\n            });\n        }\n\n        // ******** INCIDENT METHODS IMPLEMENTATION **************\n        // *******************************************************\n\n    }, {\n        key: 'play',\n        value: function play() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (!this.onBeforePlay(props)) {\n                return false;\n            }\n            if (!this.checkStateTransition('playing')) {\n                return false;\n            }\n\n            var that = this;\n            this._setState('playing');\n            this.onPlay(props);\n\n            if (!this.isOnTestMode) {\n                this.requestAnimaFrame(function (timestamp) {\n                    that.step(timestamp, props);\n                }.bind(that));\n            } else {\n                this.runTimeInfo.previousTimeStamp = 0;\n                this.emulateStep(props.startFrom);\n            }\n        }\n    }, {\n        key: 'complete',\n        value: function complete() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            _get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'complete', this).call(this);\n            this.resetState();\n        }\n\n        // timer blocking\n\n    }, {\n        key: 'wait',\n        value: function wait(props, waitCallerId) {\n            var previousState = this.runTimeInfo.state;\n            if (_get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'wait', this).call(this, props, waitCallerId)) {\n                if (!isTimePausingState(previousState)) {\n                    this.runTimeInfo.pauseMillisecond = this.runTimeInfo.currentMillisecond * 1;\n                    this.runTimeInfo.pauseMoment = new Date().getTime();\n                }\n                return true;\n            }\n            return false;\n        }\n\n        // timer blocking\n\n    }, {\n        key: 'block',\n        value: function block(props) {\n            var previousState = this.runTimeInfo.state;\n            if (_get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'block', this).call(this, props)) {\n                if (!isTimePausingState(previousState)) {\n                    this.runTimeInfo.pauseMillisecond = this.runTimeInfo.currentMillisecond * 1;\n                    this.runTimeInfo.pauseMoment = new Date().getTime();\n                }\n                return true;\n            }\n            return false;\n        }\n\n        // timer unblocking\n\n    }, {\n        key: 'resume',\n        value: function resume(props) {\n            if (_get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'resume', this).call(this, props)) {\n                var delta = new Date().getTime() - this.runTimeInfo.pauseMoment;\n                this.runTimeInfo.previousTimeStamp += delta;\n                this.requestAnimaFrame(this.step.bind(this));\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: 'reset',\n        value: function reset(props) {\n            if (_get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'reset', this).call(this, props)) {\n                this.resetState();\n            }\n\n            return false;\n        }\n    }, {\n        key: 'stop',\n        value: function stop(props) {\n            if (_get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'stop', this).call(this, props)) {\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: 'arm',\n        value: function arm(props) {\n            if (_get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'arm', this).call(this, props)) {\n                // sets the pause moment to the current time...\n                this.runTimeInfo.pauseMoment = new Date().getTime();\n                var that = this;\n\n                this.programmaticSetPreviousTimeStamp(0);\n                this.runTimeInfo.currentMillisecond = props.targetMillisecondDeltaFromStart;\n                this.runTimeInfo.pauseMillisecond = this.runTimeInfo.currentMillisecond * 1;\n                return true;\n            }\n            return false;\n        }\n\n        // *******************************************************\n        // STEP FUNCTION\n\n    }, {\n        key: 'step',\n        value: function step(timestamp) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            var that = this;\n\n            // start from is the number of milliseconds elapsed from the actual starting point of the Incident caused mainly\n            // by CPU performance. (each requestAnimationFrame cirlce doesn't happen every one millisecond\n            // so an Incident that was supposed to start on millisecond 100 of a Group might get fired 10 milliseconds later than\n            // its actual starting point, so tth startFrom will be 10)\n            if (props != null) {\n                var startFrom = props.startFrom;\n                if (!props.hasOwnProperty('startFrom')) {\n                    if (this.direction === \"forwards\") {\n                        startFrom = 0;\n                    } else {\n                        startFrom = this.duration;\n                    }\n                }\n\n                if (this.speed > 0) {\n                    this.runTimeInfo.previousTimeStamp = timestamp - startFrom / this.speed;\n                } else {\n                    this.runTimeInfo.previousTimeStamp = timestamp - (this.duration - startFrom) / Math.abs(this.speed);\n                }\n            }\n\n            var informListeners = function informListeners(progress) {\n                for (var key in that.listeners) {\n                    var listner = that.listeners[key];\n                    if (Math.abs(progress.milliseconds + listner.cavaDelta - that.runTimeInfo.currentMillisecond) > listner.threshold) {\n                        listner.funct(progress.milliseconds, timestamp, helper.roundNumberTo(listner.roundTo));\n                        listner.cavaDelta = 0;\n                    } else {\n                        listner.cavaDelta += Math.abs(progress.milliseconds - that.runTimeInfo.currentMillisecond);\n                    }\n                }\n            };\n\n            // helper.log('got into step on ' + this.id);\n            if (this.runTimeInfo.state !== 'playing') {\n                return;\n            }\n\n            // progressStep is the progress made from previousTimeStamp both in milliseconds and in fraction [0 to 1]\n            var progress = {\n                milliseconds: Math.round(this.runTimeInfo.currentMillisecond + (timestamp - this.runTimeInfo.previousTimeStamp) * this.speed),\n                fraction: (this.runTimeInfo.currentMillisecond + (timestamp - this.runTimeInfo.previousTimeStamp) * this.speed) / this.duration\n            };\n            // helper.notice(`calculation properties of progress for ${this.id}`);\n            // helper.log(`this.runTimeInfo.currentMillisecond: ${this.runTimeInfo.currentMillisecond}, timestamp: ${timestamp}, this.runTimeInfo.previousTimeStamp: ${this.runTimeInfo.previousTimeStamp}`)\n\n            // helper.log(this.id, progress);\n\n            if (progress.fraction >= 1 && !this.hasIncidents) {\n                // if it's not a Group as groups need to get completed through their incidents completion\n                this.onProgress(1, this.duration);\n                informListeners({ fraction: 1, milliseconds: this.duration });\n                this.complete();\n                return;\n            } else if (progress.fraction < 0) {\n                this.onProgress(0, 0);\n                informListeners({ fraction: 0, milliseconds: 0 });\n                this._dontTellMamaStateChange('idle');\n                this.broadcastEvent('state-change', { oldState: \"playing\", newState: \"idle\" });\n                this.resetState();\n                return;\n            }\n\n            this.onProgress(progress.fraction, progress.milliseconds);\n\n            // helper.log(this.id);\n            // helper.log(this.runTimeInfo.currentMillisecond);\n            // helper.log(this.id + ' progress: ', progress);\n            // handle listeners\n            informListeners(progress);\n\n            this.runTimeInfo.currentMillisecond = progress.milliseconds;\n            this.runTimeInfo.previousTimeStamp = timestamp;\n\n            // helper.log(this.runTimeInfo.currentMillisecond);\n\n            // helper.log('this.runtimeInfo.state on ' + this.id + ' = ' + this.runTimeInfo.state);\n            this.requestAnimaFrame(that.step.bind(that));\n        }\n\n        // ***** PUB SUB ***********\n        // *************************\n\n        /** Scene is responsible for knowing the time of it at any given moment. Also it acts as the single pipeline\n          that transfers play, wait, resume, goto requests from to its Incidents.\n          Scene is responsible for distributing the time information to any interested party\n           In order for any Class / module to be aware about the time of any Scene it should subscribe to its dispatch functions\n          By subscribing a module can get notified about changes on the Scene's time\n           subscribe method subscribes a function to the time change dispatcher. As Scene uses requestAnimationFrame for its timing\n          each cyrcle / step gets the current time and subtracts the previous time so it know how many milliseconds has elapsed\n          since last step. Subscribers can set to get informed about time changes only if the delta is greater than a given\n          number (e.g. greater than 300ms). That property is passed as the second argument \"threshold\".\n          Finally if any of the subscribers want the Scene to provide back a rounded number of the milliseconds. Options:\n            - 1 (round it on its actual units\n           - 10 (round it on tenths)\n           - 100 (round it on hundreds)\n           - 1000 (round it on thousands)\n           the first argument provides an id to the listener for future reference (deletion etc)\n          the second argument is a function that takes two arguments: millisecond, state (current millisecond of the Scene\n          and the state of it  */\n\n    }, {\n        key: 'subscribe',\n        value: function subscribe(id, funct, threshold, roundTo) {\n            if (!threshold) {\n                threshold = 0;\n            }\n            if (!roundTo) {\n                roundTo = 1; // round second to its units, meaning leave it as it is\n            }\n            this.listeners[id] = {\n                funct: funct,\n                threshold: threshold,\n                roundTo: roundTo,\n                cavaDelta: 0\n            };\n        }\n\n        /**\n         * This method's (which should be called whenever a slip ends) purpose is to calculate and set\n         * the right state of the Incident based on the target millisecond.\n         * The parameter it takes is relative to the beginning of the Incident itself and it might be negative\n         * Negative targetMillisecond means the target millisecond is N milliseconds BEFORE the start of the Incident\n         * @param {int} targetMillisecondDeltaFromStart - the delta of the target millisecond compared to the Incident start\n         */\n\n    }, {\n        key: 'recalcState',\n        value: function recalcState() {\n            var targetMillisecondDeltaFromStart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            if (targetMillisecondDeltaFromStart === null) {\n                targetMillisecondDeltaFromStart = this.runTimeInfo.currentMillisecond;\n            }\n            // helper.log('recalculating state for Incident: ' + this.id, targetMillisecondDeltaFromStart);\n            if (targetMillisecondDeltaFromStart >= this.duration) {\n                // if it ends before the targetMillisecond\n                // helper.log('completes');\n                this.statusBeforeHalt = \"completed\";\n                this.runTimeInfo.currentMillisecond = this.duration;\n                this._dontTellMamaStateChange('completed');\n            } else if (targetMillisecondDeltaFromStart <= this.duration && targetMillisecondDeltaFromStart > 0) {\n                // if the targetMillisecond is in the middle of it\n                if (this.state === 'playing') {\n                    return;\n                }\n                this.statusBeforeHalt = \"playing\";\n                this.arm({ targetMillisecondDeltaFromStart: targetMillisecondDeltaFromStart });\n            } else if (targetMillisecondDeltaFromStart <= 0) {\n                // if it has been completed on targetMillisecond\n                // helper.log('resets to idle');\n                this.statusBeforeHalt = \"idle\";\n                this.runTimeInfo.currentMillisecond = 0;\n                this._dontTellMamaStateChange('idle');\n                this.resetState();\n            }\n        }\n\n        /**\n         * Method called on progress of the timed incident.\n         * @param {float} fraction - a number from 0 to 1 representing the fraction of duration covered\n         * @param {int} milliseconds - the number of milliseconds passed from start of the incident\n        */\n\n    }, {\n        key: 'onProgress',\n        value: function onProgress(fraction, milliseconds) {}\n    }, {\n        key: 'beOn',\n        value: function beOn(millisecond) {\n            var beOnResult = _get(TimedIncident.prototype.__proto__ || Object.getPrototypeOf(TimedIncident.prototype), 'beOn', this).call(this, millisecond);\n            if (beOnResult.previousState === \"playing\" && beOnResult.newState === \"waiting\") {\n                this.resume();\n                beOnResult.newState = \"playing\";\n            }\n            return beOnResult;\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            return this.props.duration;\n        }\n\n        /**\n         * All TimedIncidents must implement the duration setter method\n        **/\n        ,\n        set: function set(duration) {\n            this.props.duration = duration;\n        }\n    }]);\n\n    return TimedIncident;\n}(Incident);\n\nmodule.exports = TimedIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/TimedIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_Channels/Channel.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_Channels/Channel.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\n\nvar Channel = function () {\n    function Channel(props) {\n        _classCallCheck(this, Channel);\n\n        this.runTimeInfo = props.runTimeInfo;\n        this.context = props.context;\n        this.onInitialise();\n        // this.type = \"plain\";\n    }\n\n    _createClass(Channel, [{\n        key: 'onInitialise',\n        value: function onInitialise() {\n            ;\n        }\n    }, {\n        key: '_resize',\n        value: function _resize() {\n            helper.log('Please overwite the _resize method of the Channel');\n        }\n\n        /**\n         * @param {array} incidents - A collection of Incidents in the form:\n         * {\n         *  millisecond\n         *  incident\n         *  id\n         * }\n         * @returns either:\n         *   {\n         *       result:true,\n         *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n         *   }\n         *   or\n         *   {\n         *       result: false,\n         *       errors\n         *   }\n        */\n\n    }, {\n        key: 'addIncidents',\n        value: function addIncidents(incidents) {\n            // first check the Incidents addition directly using the checkAddition method of the class\n            var result = this.checkAddition(incidents);\n\n            if (result.result === false) {\n                return {\n                    result: false,\n                    errors: result.errors\n                };\n            } else {\n                return {\n                    result: true,\n                    execute: result.execute\n                };\n            }\n        }\n\n        /**\n         * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n         * that apply the change\n         * @param {array} incidents - the list of the incidents to edit in an array format [object, object, ...]\n         * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n         * @returns {object} -\n         * either:\n         {\n            result: true,\n            execute: // array of functions to be executed in order to apply the edit\n         }\n         or\n         {\n             result: false,\n             errors: // an array including all the errors / conflicts found on edit\n         }\n        */\n\n    }, {\n        key: 'editIncidents',\n        value: function editIncidents(incidents, millisecondsDelta, instantiatedChannels) {\n            // first check the Incidents addition directly using the checkAddition method of the class\n            var result = this.checkEdit(incidents, millisecondsDelta);\n            if (result.result === false) {\n                return {\n                    result: false,\n                    errors: result.errors\n                };\n            } else {\n                return {\n                    result: true,\n                    execute: result.execute\n                };\n            }\n        }\n\n        /**\n         * Method to remove incidents\n         * @param {array} incidents - the ids of the incidents to remove in an array format\n         * @param {object} props - if passed it supports the preventSlip key which if false the channel should not slip. This case is for \n            flashDOM of DOMAwareIncidents where we have elements deleted so slipping on their lanes is not valid nor necessaryi\n         * @retuns {object} -\n         * either:\n         {\n            result: true,\n            execute: // array of functions to be executed in order to apply the edit\n         }\n         or\n         {\n             result: false,\n             errors: // an array including all the errors / conflicts found on edit\n         }\n        */\n\n    }, {\n        key: 'removeIncidents',\n        value: function removeIncidents(incidents) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            // first check the Incidents addition directly using the checkAddition method of the class\n            var result = this.checkDelete(incidents, props);\n            if (result.result === false) {\n                return {\n                    result: false,\n                    errors: result.errors\n                };\n            } else {\n                return {\n                    result: true,\n                    execute: result.execute\n                };\n            }\n        }\n\n        /**\n         * On this method the user defines the specific rules that apply on the plugin itself and on the Incidents of the plugin itself\n         * The method should either return {result: true} or {result: false, errors:[{error-object}]}, where error-object has the structure:\n         *  {\n                incident: // reference to the Incident object that has bee discarded\n                error: // text\n            }\n        * @param {array} incidents - a colleciton of all incidents to be added on the form:\n        *\n            {\n                id\n                millisecond\n                incident\n            }\n        * @returns {object} -\n        * either:\n            {\n                result:true,\n                execute: // a function that when executed it will add the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n        key: 'checkAddition',\n        value: function checkAddition(incidents) {\n            return { result: true, execute: function execute() {} };\n        }\n    }, {\n        key: 'checkEdit',\n        value: function checkEdit(incidentsArray, millisecondsDelta) {\n            return { result: true, execute: function execute() {} };\n        }\n    }, {\n        key: 'checkDelete',\n        value: function checkDelete(incidentIds) {\n            return { result: true, execute: function execute() {} };\n        }\n    }, {\n        key: 'checkResizedIncidents',\n        value: function checkResizedIncidents(incidents) {\n            return { result: true, execute: function execute() {} };\n        }\n    }, {\n        key: 'goTo',\n        value: function goTo(millisecond) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            // first decide the millisecond we want to goTo\n            if (millisecond === null || millisecond === undefined) {\n                millisecond = this.runTimeInfo.currentMillisecond;\n            }\n            if (props.hasOwnProperty('relativeTo')) {\n                millisecond += this.getIncidentMillisecond(props.relativeTo);\n            }\n\n            var startFrom = this.runTimeInfo.currentMillisecond;\n            if (props.hasOwnProperty('previousStop')) {\n                startFrom = props.previousStop;\n            }\n\n            this.moveTo(startFrom, millisecond);\n        }\n    }, {\n        key: 'moveTo',\n        value: function moveTo(from, to) {\n            ;\n        }\n    }, {\n        key: 'exportState',\n        value: function exportState(props) {\n            return {\n                class: this.constructor.name,\n                Incident: this.constructor\n            };\n        }\n    }], [{\n        key: 'type',\n        get: function get() {\n            return \"plain\";\n        }\n    }]);\n\n    return Channel;\n}();\n\nmodule.exports = Channel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_Channels/Channel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/AttributeChannel.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/AttributeChannel.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Channel = __webpack_require__(/*! ../Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/Channel.js\");\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\n\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\n\nvar lanesHandler = __webpack_require__(/*! ./LanesHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/LanesHandler.js\");\n\nvar AttributeChannel = function (_Channel) {\n    _inherits(AttributeChannel, _Channel);\n\n    function AttributeChannel(props) {\n        _classCallCheck(this, AttributeChannel);\n\n        /*\n        comboAttributes are attributes of type object, holding a number of other attributes.\n        E.g. CSS \"transform\" attribute is a combo that holds a number of other attributes such as:\n        translateX, translateY, etc. The lanes handler keeps just one lane for the combo attrs \n        in an object format keeping the value of each attribute at any given point.\n        Combo attributes are passed on the constructor of the Channel in the format:\n        props.comboAttributes: {\n            transition: ['translateX', 'translateY', ...],\n            <something_else>: ['<attrName1>', '<attrName2>', ...]\n        }\n        */\n        var _this = _possibleConstructorReturn(this, (AttributeChannel.__proto__ || Object.getPrototypeOf(AttributeChannel)).call(this, props));\n\n        _this.comboAttributes = {};\n\n        /**\n         * For incidents that do not have animatedAttrs there should be only one lane per element. \n         * The attributes Channel will use a default (fake), fixed attribute for this cases so it always ends\n         * up with just one lane per element: <element_id>_<this.fixedAttributeName>\n        */\n        _this.fixedAttributeName = \"_\";\n\n        if (props.comboAttributes != null) {\n            _this.comboAttributes = props.comboAttributes;\n        }\n\n        _this.LanesHandler = new lanesHandler({ comboAttributes: _this.comboAttributes });\n        // this.type = \"attributes\";\n        return _this;\n    }\n\n    _createClass(AttributeChannel, [{\n        key: 'setComboAttributes',\n        value: function setComboAttributes(comboAttributes) {\n            this.comboAttributes = comboAttributes;\n            this.LanesHandler = new lanesHandler({ comboAttributes: this.comboAttributes });\n        }\n    }, {\n        key: '_resize',\n        value: function _resize(durationFraction) {\n            this.LanesHandler._resize(durationFraction);\n        }\n\n        /**\n         * Checks whether the incident has animatedAttrs or not. \n        **/\n\n    }, {\n        key: '_incidentHasAnimatedAttrs',\n        value: function _incidentHasAnimatedAttrs(incident) {\n            if (incident.attrs.hasOwnProperty('animatedAttrs')) {\n                return true;\n            }\n            return false;\n        }\n\n        /* *******************************************************\n         DECISION METHODS\n         ********************************************************/\n\n        /**\n         * All of the incidents coming to this method are element-attribute incidents meaning that they only\n         * target just one element and also they include just a single attribute on the incident.attrs.animatedAttrs\n         * object\n         *\n         * @param {array} incidents - A collection of Incidents in the form:\n         * {\n         *  millisecond\n         *  incident\n         *  id\n         * }\n         * @param {string} type - can be either \"all-or-nothing\" (default) or \"keep-passing\". If type = \"all-or-nothing\"\n         *  the addition passes only if all incidents pass. If type = \"keep-passing\" the method will still return true\n         *  but will also include an errors array on its return and also will only include the success callbacks on \n         *  the execute key of its return\n         * @returns either:\n         *   {\n         *       result:true,\n         *       execute: // an array of functions that when executed it will add the Incidents on the Channels\n         *   }\n         *   or\n         *   {\n         *       result: false,\n         *       errors\n         *   }\n        */\n\n    }, {\n        key: 'checkAddition',\n        value: function checkAddition(incidents) {\n            var _this2 = this;\n\n            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"all-or-nothing\";\n\n            var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n            /* an array where we keep all affected lanes so we can slip on them at the end. \n            The format for each affected lane we keep is:\n            {\n                mcid: mcid,\n                attribute: attribute\n            }\n            */\n            var affectedLanes = [];\n\n            // while the LanesHandlerSanbox adds lane items it makes decisions of which permanent changes should be made to\n            // the permanent and pre-existing objects it handles, such as changes on the initial values of existing animations.\n            // Because of the fact the LanesSandboxHandler is only there for testing we don't want to execute these changes\n            // during checks but still we need to know them on success. For this, the onSuccessActions array holds all executable\n            // functions retured by various LanesHandlerSanbox functions so it can execute them on success.\n            var onSuccessActions = [];\n\n            var conflicts = [];\n\n            var _loop = function _loop(i) {\n                var incidentConflicts = false; // a boolean that keeps the information whether the incident conflicts or not\n                var laneItem = incidents[i];\n                var incident = laneItem.incident;\n\n                var mcid = _this2.context.getMCID(incident.element);\n\n                // console.log(\"the incident\",incident)\n                var attribute = _this2.fixedAttributeName;\n                if (_this2._incidentHasAnimatedAttrs(incident)) {\n                    attribute = Object.keys(incident.attrs.animatedAttrs)[0];\n                }\n\n                LanesHandlerSandbox.laneExists(mcid, attribute); // create the lane if it doesn't exist already\n\n                affectedLanes.push({\n                    mcid: mcid,\n                    attribute: attribute\n                });\n\n                if (LanesHandlerSandbox.animationIDExists(mcid, attribute, incident.id)) {\n                    incidentConflicts = true;\n                    conflicts.push({\n                        type: 'duplicate Animation id',\n                        meta: {\n                            id: incident.id\n                        }\n                    });\n                }\n\n                // **** if the lane did exist before the new addition check for conflicts\n                var overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(laneItem, mcid, attribute);\n\n                // helper.log(overlappingAnim)\n                if (overlappingAnims.length > 0) {\n                    incidentConflicts = true;\n                    conflicts.push({\n                        type: 'unauthorised, overlapping incidents on the same element',\n                        meta: {\n                            element_mcid: mcid,\n                            attribute: attribute,\n                            incident: laneItem,\n                            overlappingAnims: overlappingAnims\n                        }\n                    });\n                }\n\n                if (!incidentConflicts) {\n                    onSuccessActions.push(function () {\n                        LanesHandlerSandbox.addElementToLane(mcid, attribute, laneItem.millisecond, incident);\n                        incident._onGetContextOnce();\n                    });\n                }\n            };\n\n            for (var i = 0; i < incidents.length; i++) {\n                _loop(i);\n            } // end for each incident\n\n            // if we have conflicts and the type = \"all-or-nothing\"\n            if (conflicts.length > 0 && type === \"all-or-nothing\") {\n                return {\n                    result: false,\n                    errors: conflicts\n                };\n            } else {\n                // as soon as we want all passing additions to get applied the Lanes Handler will create a callback that will be passed to the result.\n                // This callback will apply all passing additions.\n\n                // success message\n                var that = this;\n                var exec = function exec() {\n                    for (var i = 0; i < onSuccessActions.length; i++) {\n                        onSuccessActions[i]();\n                    }\n                    that.LanesHandler.applySandboxChanges(LanesHandlerSandbox);\n\n                    // TODO how exactly are we handling slipping?\n                    for (var _i = 0; _i < affectedLanes.length; _i++) {\n                        var affectedLane = affectedLanes[_i];\n                        that.slipIntoLaneForwards(that.LanesHandler.getLane(affectedLane.mcid, affectedLane.attribute), affectedLane, 0, that.runTimeInfo.currentMillisecond);\n                    }\n                };\n\n                return {\n                    result: true,\n                    errors: conflicts,\n                    execute: exec\n                };\n            }\n        }\n\n        /**\n        * It initially checks if the edit is allowed and if it is it retuns an array of executable functions\n        * that apply the change\n        * @param {array} incidents - the list of the lane items to edit in an array format [object, object, ...]\n        * @param {int} millisecondsDelta - the milliseconds delta to apply to the incidents\n        * @returns {object} -\n        * either:\n        {\n           result: true,\n           execute: // array of functions to be executed in order to apply the edit\n        }\n        or\n        {\n            result: false,\n            errors: // an array including all the errors / conflicts found on edit\n        }\n        */\n\n    }, {\n        key: 'checkEdit',\n        value: function checkEdit(incidents, millisecondsDelta) {\n\n            var affectedIncidentIds = [];\n            for (var i = 0; i < incidents.length; i++) {\n                affectedIncidentIds.push(incidents[i].id);\n            }\n\n            var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n\n            var conflicts = [];\n            var affectedLanes = [];\n\n            // for each of the affectedAnimations\n            for (var _i2 = 0; _i2 < incidents.length; _i2++) {\n                var _incident = incidents[_i2].incident;\n                var incidentId = _incident.id;\n                var _mcid = this.context.getMCID(_incident.element);\n                var _attribute = this.fixedAttributeName;\n                if (this._incidentHasAnimatedAttrs(_incident)) {\n                    _attribute = Object.keys(_incident.attrs.animatedAttrs)[0];\n                }\n                var lane = LanesHandlerSandbox.getLane(_mcid, _attribute);\n                var laneAttrs = {\n                    mcid: _mcid,\n                    attribute: _attribute\n\n                    // check for conflicts and edit lane items millisecond\n                };for (var k = 0; k < lane.length; k++) {\n                    if (lane[k].incident.id === incidentId) {\n                        affectedLanes.push(laneAttrs);\n                        var affectedAnim = lane[k];\n                        var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n                        testLaneElement.millisecond += millisecondsDelta;\n                        var _overlappingAnims = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, _mcid, _attribute, affectedIncidentIds);\n\n                        if (_overlappingAnims.length > 0) {\n                            conflicts.push({\n                                type: 'anauthorised, overlapping animations on the same element',\n                                meta: {\n                                    element_mcid: _mcid,\n                                    attribute: _attribute,\n                                    newAnimation: testLaneElement,\n                                    overlappingAnims: _overlappingAnims\n                                }\n                            });\n                        }\n\n                        break;\n                    } // end of if we found the specific animation on the lane's sequence\n                } // end of each lane's item\n\n            } // end for each affected animation's id\n\n            if (conflicts.length > 0) {\n                return {\n                    result: false,\n                    errors: conflicts\n                };\n            } else {\n                var that = this;\n                var exec = function exec() {\n                    // as soon as there are no conflicts the Lanes Handler applies the changes before sending over the\n                    // success message\n                    that.LanesHandler.updateLane(affectedIncidentIds, millisecondsDelta);\n\n                    for (var _i3 = 0; _i3 < affectedLanes.length; _i3++) {\n                        var affectedLane = affectedLanes[_i3];\n                        var theActualLane = that.LanesHandler.getLane(affectedLane.mcid, affectedLane.attribute);\n                        that.slipIntoLaneForwards(theActualLane, affectedLane, 0, that.runTimeInfo.currentMillisecond);\n                    }\n                };\n                return {\n                    result: true,\n                    execute: exec\n                };\n            }\n        }\n\n        /**\n         * @param {array} affectedAnimations - [{id, start, end, startDelta}]\n         * @param {boolean} fullChannelResize - if set to true then the full html channel is resizing. This is a special case as in\n         *  that case no checks should be actually perfomed nor the projected candidate should be applied directly\n        **/\n\n    }, {\n        key: 'checkResizedIncidents',\n        value: function checkResizedIncidents(affectedAnimations) {\n            var fullChannelResize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n            var excludeIdsFromCheck = [];\n            for (var i = 0; i < affectedAnimations.length; i++) {\n                excludeIdsFromCheck.push(affectedAnimations[i].id);\n            }\n\n            var LanesHandlerSandbox = this.LanesHandler.createTestLanesSanbox();\n\n            var conflicts = [];\n            var affectedLanes = [];\n\n            // for each of the affectedAnimations\n            for (var _i4 = 0; _i4 < affectedAnimations.length; _i4++) {\n                var belongingLanes = LanesHandlerSandbox.belongingLaneKeysByAnimationId._get(affectedAnimations[_i4].id);\n                var testDuration = affectedAnimations[_i4].end - affectedAnimations[_i4].start;\n\n                // for each lane the affected Animation appears in\n                for (var j in belongingLanes) {\n                    var lane = LanesHandlerSandbox.lanes._get(belongingLanes[j]);\n                    var laneData = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]);\n\n                    // check for conflicts and edit lane items millisecond\n                    for (var k = 0; k < lane.length; k++) {\n                        if (lane[k].incident.id === affectedAnimations[_i4].id) {\n                            affectedLanes.push(laneData);\n                            if (fullChannelResize === false) {\n                                var affectedAnim = lane[k];\n                                var testLaneElement = LanesHandlerSandbox.getLaneElementsClone(affectedAnim);\n                                testLaneElement.millisecond += affectedAnimations[_i4].startDelta;\n                                var _overlappingAnims2 = LanesHandlerSandbox.getOverlappingAnims(testLaneElement, laneData.mcid, laneData.attribute, excludeIdsFromCheck, testDuration);\n\n                                if (_overlappingAnims2.length > 0) {\n                                    conflicts.push({\n                                        type: 'anauthorised overlapping animations on the same element',\n                                        meta: {\n                                            element_mcid: laneData.mcid,\n                                            attribute: laneData.attribute,\n                                            newAnimation: testLaneElement,\n                                            overlappingAnims: _overlappingAnims2\n                                        }\n                                    });\n                                }\n                            }\n\n                            break;\n                        } // end of if we found the specific animation on the lane's sequence\n                    } // end of each lane's item\n\n                } // end of each belonging lane\n            } // end for each affected animation's id\n\n            if (conflicts.length > 0) {\n                return {\n                    result: false,\n                    conflicts: conflicts\n                };\n            } else {\n                // unlike the case of editing the start millisecond of a Scene / Incident on editing the duration of a Scene\n                // or an Incident slipping to lanes should occur depends not only on the positioning of the Animations on\n                // the lanes but also on their duration. Editing the duration occurs on the Scene that received the editDuration\n                // command and thus at that point the HTMLChannel (and its LanesHaldler) is not ready to slip as the affected\n                // Animations still have the old (un-edited) duration.\n                // For this reason and only on the case of duration edit slip to lanes will take place not here and not now\n                // but on the scope of the Scene that got the command, at the point it receives the success ({result:true}).\n                // For this we will create a callback function which holds the slipping to lanes commands and pass it on the\n                // \"callback\" key of the result object ({success:true, callback:function(){that slips into lanes}})\n                var that = this;\n\n                var exec = function exec() {\n                    var slippingCommands = []; // an array that will hold all of the slipping commands in all of the affected lanes\n\n                    // updateLanes (only this time animation by animation as the milliseconds delta is not standard for all)\n                    // as soon as there are no conflicts the Lanes Handler applies the changes before sending over the\n                    // success message\n                    for (var _i5 = 0; _i5 < affectedAnimations.length; _i5++) {\n                        that.LanesHandler.updateLane([affectedAnimations[_i5].id], affectedAnimations[_i5].startDelta);\n                    }\n\n                    var _loop2 = function _loop2(_i6) {\n                        var affectedLane = affectedLanes[_i6];\n                        var theActualLane = that.LanesHandler.getLane(affectedLane.mcid, affectedLane.attribute);\n                        // put the slip command on the slippingCommands array\n                        slippingCommands.push(function () {\n                            that.slipIntoLaneForwards(theActualLane, affectedLane, 0, that.runTimeInfo.currentMillisecond);\n                        });\n                    };\n\n                    for (var _i6 = 0; _i6 < affectedLanes.length; _i6++) {\n                        _loop2(_i6);\n                    }\n\n                    for (var _i7 = 0; _i7 < slippingCommands.length; _i7++) {\n                        slippingCommands[_i7]();\n                    }\n                };\n\n                return {\n                    execute: exec,\n                    result: true\n                };\n            }\n        }\n\n        /**\n         * \n        */\n\n    }, {\n        key: 'checkDelete',\n        value: function checkDelete(removedAnimations) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            var removedAnimationIds = [];\n            for (var i = 0; i < removedAnimations.length; i++) {\n                removedAnimationIds.push(removedAnimations[i].id);\n            }\n\n            // no slipping is needed as on deletion the Animations set their elements to their initial values\n            var that = this;\n            var exec = function exec() {\n                var affectedLanes = that.LanesHandler.deleteAnimations(removedAnimationIds, that.runTimeInfo.currentMillisecond);\n                for (var laneKey in affectedLanes) {\n                    var _affectedLane = affectedLanes[laneKey];\n                    var _theActualLane = that.LanesHandler.getLane(_affectedLane.mcid, _affectedLane.attribute);\n                    if (props.preventSlip != true) {\n                        that.slipIntoLaneForwards(_theActualLane, _affectedLane, 0, that.runTimeInfo.currentMillisecond);\n                    }\n                }\n            };\n\n            return {\n                result: true,\n                execute: exec\n            };\n        }\n\n        /**\n         * checks if a duration edit is feasible and doesn't cause conflicts\n         * @param {int} duration - the new duration\n         * @param {array} ids - (optional) if provided it only checks resizes on the given ids (not all incidents have been re)\n        **/\n\n    }, {\n        key: 'checkDurationEdit',\n        value: function checkDurationEdit(durationFraction) {\n            var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n            // using ProjectionsHanlder it will create the candidates and the projections to pass up to the parent\n            // returned object keys: candidateOwnProjectedAnimations, affectedAnimations\n            var projectedAnimations = this.projectionsHandler.systoleDiastoleProjections(durationFraction, ids);\n            // once it gets the porojectedAnimations from its projections hanlder it will pass it up for check\n\n            // if the ids array is provided that means the checkDurationEdit is been used by an Animation directly\n            // belonging to the html channel, so it's not a full channel resize\n            var check = this.checkResizedAnimations(projectedAnimations.affectedAnimations, ids.length === 0 ? true : false);\n\n            return check;\n        }\n\n        /**\n         * Method that is invoked by Animation objects when one of their attributes value is edited\n         * The purpose of this method here on the HTMLChannel is to update the lanes accordingly and slip into the\n         * corresponding lanes\n         * @param {string} animationId - the id of the Animation object that has been edited\n         * @param {string} attr - the name of the attribute that has been edited\n         * @param {string} value - the new value of the edited attribute\n        */\n\n    }, {\n        key: 'animationAttributeValueChange',\n        value: function animationAttributeValueChange(animationId, attr, value) {\n            var affectedLanes = this.LanesHandler.updateAttributeOnLanes(animationId, attr, value);\n            for (var i = 0; i < affectedLanes.length; i++) {\n                var _affectedLane2 = affectedLanes[i];\n                var _theActualLane2 = this.LanesHandler.getLane(_affectedLane2.mcid, _affectedLane2.attribute);\n                this.slipIntoLaneForwards(_theActualLane2, _affectedLane2, 0, this.runTimeInfo.currentMillisecond);\n            }\n        }\n\n        /**\n         * Slips to just one lane forwards\n         * @param {array} lane - the lane to slip into\n         * @param {object} laneData - an object with keys: attribute & mcid\n         * @param {int} currentMillisecond - the millisecond the slip starts from\n         * @param {int} millisecond - the target millisecond of the slip\n         */\n\n    }, {\n        key: 'slipIntoLaneForwards',\n        value: function slipIntoLaneForwards(lane, laneData, currentMillisecond, millisecond) {\n            // helper.log(lane, currentMillisecond, millisecond);\n            var participatingAnims = _filter(lane, function (laneItem) {\n                return laneItem.millisecond + laneItem.incident.duration >= currentMillisecond && laneItem.millisecond + laneItem.incident.duration <= millisecond || // it ends after currentMillisecond and before target millisecond\n                laneItem.incident.duration + laneItem.millisecond >= millisecond && laneItem.millisecond <= millisecond; // or it ends after the target millisecond but also starts before it\n            });\n\n            if (participatingAnims.length == 0) {\n                return true;\n            }\n\n            participatingAnims = _sortBy(participatingAnims, [function (laneItem) {\n                return laneItem.millisecond;\n            }]);\n\n            // now we have all participatingAnims of the slip action in chronological order\n            // our first job is to create a variable that will hold the last known value of the lane\n            var lastValue = null;\n            for (var i = 0; i < participatingAnims.length; i++) {\n                var participatingAnim = participatingAnims[i].incident;\n                var startMillisecond = participatingAnims[i].millisecond;\n\n                // if the animation has no start values go ahead and calculated them now\n                if (!participatingAnim.hasInitialValue(laneData.attribute) && lastValue === null) {\n                    // helper.log('setting initial value: ', laneData.mcid, laneData.attribute, 'calculated');\n                    participatingAnim.setInitialValue(laneData.mcid, laneData.attribute);\n                } else if (!participatingAnim.hasInitialValue(laneData.attribute) && lastValue != null) {\n                    // helper.log('setting initial value: ', laneData.mcid, laneData.attribute, lastValue);\n                    participatingAnim.setInitialValue(laneData.mcid, laneData.attribute, lastValue);\n                }\n\n                // if the animation ends before the target millisecond\n                // helper.log('participatingAnim.duration + startMillisecond', participatingAnim.duration + startMillisecond, millisecond);\\\n\n                if (participatingAnim.duration + startMillisecond <= millisecond) {\n                    // helper.log('ends before target')\n                    if (participatingAnim.attrs.hasOwnProperty('animatedAttrs')) {\n                        lastValue = participatingAnim.attrs.animatedAttrs[laneData.attribute];\n                    }\n                    if (i === participatingAnims.length - 1) {\n                        participatingAnim.onProgress(1, participatingAnim.duration);\n                    }\n                } else {\n                    // slip for the specific element and the specific attribute. Set the Animation as paused or playing a\n                    // and store this info somewhere\n                    var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n                    participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond);\n                }\n            }\n        }\n\n        /**\n         * Slips to just one lane backwards\n         * @param {array} lane - the lane to slip into\n         * @param {object} laneData - an object with keys: attribute & mcid\n         * @param {int} currentMillisecond - the millisecond the slip starts from\n         * @parama {int} millisecond - the target millisecond of the slip\n         */\n\n    }, {\n        key: 'slipToLaneBackwards',\n        value: function slipToLaneBackwards(lane, laneData, currentMillisecond, millisecond) {\n            // we take all Animations that are either currently running or\n            // they end after the destination point\n            // helper.log('<------');\n            var participatingAnims = _filter(lane, function (laneItem) {\n                var laneItemEnd = laneItem.incident.duration + laneItem.millisecond;\n                return laneItemEnd <= millisecond && laneItemEnd >= currentMillisecond || // they end in the hot area\n                laneItem.millisecond >= currentMillisecond && laneItem.millisecond <= millisecond || // they start in the hot area\n                laneItem.millisecond < currentMillisecond && laneItemEnd > millisecond; // they overlap the hot area\n            });\n\n            if (participatingAnims.length == 0) {\n                return true;\n            }\n\n            participatingAnims = _sortBy(participatingAnims, [function (laneItem) {\n                return laneItem.millisecond;\n            }]);\n\n            var lastValue = null;\n            for (var i = participatingAnims.length - 1; i >= 0; i--) {\n                var participatingAnim = participatingAnims[i].incident;\n                var startMillisecond = participatingAnims[i].millisecond;\n                if (startMillisecond >= millisecond) {\n                    participatingAnim.onProgress(0, 0);\n                } else {\n                    var percentageComplete = (millisecond - startMillisecond) / participatingAnim.duration;\n\n                    participatingAnim.onProgress(percentageComplete, millisecond - startMillisecond);\n                }\n            }\n        }\n\n        /**\n         @param {int} from - the millisecond to start from\n         @param {int} to - the millisecond to go to\n         */\n\n    }, {\n        key: 'moveTo',\n        value: function moveTo(from, to) {\n            // step 1: iterate through all lanes\n            var laneKeys = this.lanes._keys();\n            for (var i = 0; i < laneKeys.length; i++) {\n                var laneid = laneKeys[i];\n                var lane = this.lanes._get(laneid);\n                var laneData = helper.getMCIDandAttrOutOfLaneKey(laneid);\n                if (from < to) {\n                    // helper.log(laneid);\n                    this.slipIntoLaneForwards(lane, laneData, from, to);\n                } else if (from >= to) {\n                    this.slipToLaneBackwards(lane, laneData, from, to);\n                }\n            }\n        }\n    }, {\n        key: 'lanes',\n        get: function get() {\n            return this.LanesHandler.lanes;\n        }\n    }], [{\n        key: 'type',\n        get: function get() {\n            return \"attributes\";\n        }\n    }]);\n\n    return AttributeChannel;\n}(Channel);\n\nmodule.exports = AttributeChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/AttributeChannel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/LanesHandler.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/LanesHandler.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _cloneDeep = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.clonedeep/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.clonedeep/index.js\");\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\nvar _findIndex = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.findindex/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js\");\nvar _find = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.find/index */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.find/index.js\");\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper({ logLevel: 4 });\n\nvar Collection = __webpack_require__(/*! ./helpers/Collection */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/Collection.js\");\nvar SandboxLanes = __webpack_require__(/*! ./helpers/SandboxLanes */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxLanes.js\");\nvar SandboxCollection = __webpack_require__(/*! ./helpers/SandboxCollection */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxCollection.js\");\n\nvar LanesHandler = function () {\n    function LanesHandler() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, LanesHandler);\n\n        /*\n         * Keeps the lanes of the Channel in the form:\n         * {\n         *  <motorcortex-id>_<attribute>: [\n         *      {\n         *          millisecond: the millisecond of the channel this Animation (that affects the selector/attribute pair) runs\n         *          incident: Animation (the animation object that holds the affecting animation\n         *      }\n         *  ]\n         * }\n         /** @type {{}}\n         */\n        this.lanes = new Collection({});\n        if (props.lanes) {\n            this.lanes = props.lanes;\n        }\n\n        this.comboAttributes = {};\n        if (props.comboAttributes != null) {\n            this.comboAttributes = props.comboAttributes;\n        }\n\n        /*\n        Keeps an indexing of the lanes each Animation belongs to. The form is the following:\n        belongingLaneKeysByAnimationId: {\n            <animation_id>: [laneKey1, laneKey2, ...],\n            <animation_id>: [laneKey2, laneKey3, ...],\n            ...\n        }\n         */\n        this.belongingLaneKeysByAnimationId = new Collection({});\n        if (props.belongingLaneKeysByAnimationId) {\n            this.belongingLaneKeysByAnimationId = props.belongingLaneKeysByAnimationId;\n        }\n    }\n\n    /**\n     * This method resizes all the lanes of the Lanes Handler by the durationFraction provided.\n     * No checks are performed. \n     * This method is been invoked in cases where a full Clip gets resized, so no conflict checks need to\n     * run.\n     * @param {float} durationFration: the fraction between the new duration and the current\n    */\n\n\n    _createClass(LanesHandler, [{\n        key: '_resize',\n        value: function _resize(durationFraction) {\n            var keys = this.lanes._keys();\n\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                var theLane = this.lanes._get(key);\n                for (var _i = 0; _i < theLane.length; _i++) {\n                    theLane[_i].millisecond = theLane[_i].millisecond * durationFraction;\n                }\n            }\n        }\n\n        /**\n         * it creates a new LanesHandler that acts as a sanbox for testing changes\n        */\n\n    }, {\n        key: 'createTestLanesSanbox',\n        value: function createTestLanesSanbox() {\n            var props = {\n                lanes: new SandboxLanes(this.lanes._export()),\n                belongingLaneKeysByAnimationId: new SandboxCollection(this.belongingLaneKeysByAnimationId._export()) //JSON.parse(JSON.stringify(this.belongingLaneKeysByAnimationId))\n            };\n\n            if (this.comboAttributes) {\n                props.comboAttributes = this.comboAttributes;\n            }\n\n            return new LanesHandler(props);\n        }\n    }, {\n        key: 'getLanesCopy',\n        value: function getLanesCopy(lane) {\n            var laneToReturn = [];\n            for (var i = 0; i < lane.length; i++) {\n                laneToReturn.push({\n                    id: lane[i].id,\n                    incident: lane[i].incident,\n                    millisecond: lane[i].millisecond * 1\n                });\n            }\n            return laneToReturn;\n        }\n    }, {\n        key: 'getLaneElementsClone',\n        value: function getLaneElementsClone(laneElement) {\n            // return _cloneDeep(laneElement);\n            return {\n                id: laneElement.id,\n                millisecond: laneElement.millisecond * 1,\n                incident: {\n                    duration: laneElement.incident.duration * 1,\n                    id: laneElement.incident.id\n                }\n                // return JSON.parse(JSON.stringify(laneElement));\n            };\n        }\n    }, {\n        key: 'applySandboxChanges',\n        value: function applySandboxChanges(SanboxObject) {\n            this.lanes = new Collection(SanboxObject.lanes._export());\n\n            this.belongingLaneKeysByAnimationId = new Collection(SanboxObject.belongingLaneKeysByAnimationId._export());\n        }\n    }, {\n        key: 'getLane',\n        value: function getLane(mcid, attr) {\n            return this.lanes._get(helper.getLaneKey(mcid, attr));\n        }\n\n        /**\n         * Checks whether the incident has animatedAttrs or not. \n        **/\n\n    }, {\n        key: '_incidentHasAnimatedAttrs',\n        value: function _incidentHasAnimatedAttrs(incident) {\n            if (incident.attrs.hasOwnProperty('animatedAttrs')) {\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * return true if lane exists or false otherwise\n         * @param {String} mcid\n         * @param {String} attr\n         * @param {boolean} ifNotCreateIt - if is set to true and the lane doesn't exist it creates it but still returning false\n        */\n\n    }, {\n        key: 'laneExists',\n        value: function laneExists(mcid, attr) {\n            var ifNotCreateIt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            var laneKey = helper.getLaneKey(mcid, attr);\n            if (!this.lanes._hasOwnProperty(laneKey)) {\n                if (ifNotCreateIt) {\n                    this.lanes._set(laneKey, []);\n                }\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }, {\n        key: 'animationIDExists',\n        value: function animationIDExists(mcid, attr, animationID) {\n            if (this.belongingLaneKeysByAnimationId._hasOwnProperty(animationID)) {\n                if (this.belongingLaneKeysByAnimationId._get(animationID).indexOf(helper.getLaneKey(mcid, attr)) >= 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * @param {Object} newAnim - an object of the form of a lane item (with keys \"millisecond\" and \"incident\"\n         * @param {string} mcid\n         * @param {String} attr\n         * @param {array} excludeIdsFromCheck - optional. If exists it excludes all the ids of this array from check. This\n         *  parameter has been added for the edit checks where an animation might overlap another animation that participates on\n         *  the move, something that should not happen as the edited animations pre-existed without conflicts and the move of all\n         *  of them together guarantees that there is going to be no conflict between them even after the edit\n         * @param {int} testDuration - optional. This parameter is used when the channel needs to check overlaps after duration\n         *  edits, so the testDuration is passed (we don't want to polute the original animation object as it refers to the real one)\n         * @retuns {array} - a list of all overlapping animations of the lane\n        */\n\n    }, {\n        key: 'getOverlappingAnims',\n        value: function getOverlappingAnims(newAnim, mcid, attr) {\n            var excludeIdsFromCheck = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n            var testDuration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n            var overlappingAnims = _filter(this.lanes._get(helper.getLaneKey(mcid, attr)), function (existingAnim) {\n                var durationToUseOnChecks = newAnim.incident.duration;\n                if (testDuration != null) {\n                    durationToUseOnChecks = testDuration;\n                }\n\n                return existingAnim.incident.id != newAnim.incident.id && excludeIdsFromCheck.indexOf(existingAnim.incident.id) < 0 && (\n                // existing anim starts within the new anim's extend\n                existingAnim.millisecond >= newAnim.millisecond && existingAnim.millisecond < durationToUseOnChecks + newAnim.millisecond ||\n                // or ends within the new anim's extend\n                existingAnim.millisecond + existingAnim.incident.duration > newAnim.millisecond && existingAnim.millisecond + existingAnim.incident.duration <= durationToUseOnChecks + newAnim.millisecond\n                // or it starts before and ends after the new anim's extend\n                || existingAnim.millisecond < newAnim.millisecond && existingAnim.millisecond + existingAnim.incident.duration > durationToUseOnChecks + newAnim.millisecond);\n            });\n\n            return overlappingAnims;\n        }\n\n        /**\n         * it justs adds the lane item to the lane and adjusts the initial values of the Anims in sequence\n         * No checks are performed, just execution.\n         * @param {String} mcid\n         * @param {String} attr\n         * @param {int} millisecond\n         * @param {Object} incident\n        */\n\n    }, {\n        key: 'addElementToLane',\n        value: function addElementToLane(mcid, attr, millisecond, incident) {\n\n            var laneKey = helper.getLaneKey(mcid, attr);\n\n            var laneElement = {\n                millisecond: millisecond,\n                incident: incident,\n                id: incident.id\n            };\n\n            this.laneExists(mcid, attr, true);\n            var theLane = this.lanes._get(laneKey);\n\n            theLane.push(laneElement);\n            theLane = _sortBy(theLane, ['millisecond']);\n\n            // indexing stuff\n            if (!this.belongingLaneKeysByAnimationId._hasOwnProperty(incident.id)) {\n                this.belongingLaneKeysByAnimationId._set(incident.id, []);\n            }\n            this.belongingLaneKeysByAnimationId._get(incident.id).push(laneKey);\n            // indexing\n            var newAnimsIndex = _findIndex(theLane, function (item) {\n                return item.incident.id === incident.id;\n            });\n\n            /* if the incident has no animated attributes we don't need to work on start and final values */\n            if (!this._incidentHasAnimatedAttrs(incident)) {\n                return { onSuccessAction: function onSuccessAction() {} };\n            }\n\n            // helper.log(newAnimsIndex);\n            // step 1: set the intial values of the new Animation\n            if (newAnimsIndex === 0) {\n                // if the newly entered animation is the first of the lane\n                if (theLane.length > 1) {\n                    // and it has other animations too\n                    if (theLane[1].incident.hasInitialValue(attr)) {\n                        // if the initial value of the following animation\n                        // which used to be first is already calculated \"steal\" it\n                        incident.setInitialValue(attr, theLane[1].incident.getInitialValue(attr));\n                    }\n                } else {\n                    // else take it directly from the dom\n                    incident.setInitialValue(attr, incident.getScratchValue(mcid, attr));\n                }\n            } else {\n                incident.setInitialValue(attr, theLane[newAnimsIndex - 1].incident.attrs.animatedAttrs[attr]);\n            }\n\n            /* if the attribute of the lane is a compo attribute */\n            if (this.comboAttributes.hasOwnProperty(attr)) {\n                var incidentInitialValues = incident.getInitialValue(attr);\n                for (var key in incidentInitialValues) {\n                    if (!incident.attrs.animatedAttrs[attr].hasOwnProperty(key)) {\n                        incident.attrs.animatedAttrs[attr][key] = incidentInitialValues[key];\n                    }\n                }\n            }\n\n            var onSuccessAction = function onSuccessAction() {};\n            // step 2: set the inital values of the following Animation (if any)\n            if (newAnimsIndex + 1 < theLane.length) {\n                onSuccessAction = function onSuccessAction() {\n                    theLane[newAnimsIndex + 1].incident.setInitialValue(attr, incident.attrs.animatedAttrs[attr]);\n                };\n            }\n\n            return onSuccessAction;\n        }\n\n        /**\n         * it justs updates the lane\n         * No checks are performed, just execution\n         * @param {array} affectedAnimationsIds\n         * @param {String} attr\n         * @param {int} millisecondDelta\n        */\n\n    }, {\n        key: 'updateLane',\n        value: function updateLane(affectedAnimationsIds, millisecondsDelta) {\n            var _this = this;\n\n            // first we group the affected animations by lanes\n            var affectedLanes = {};\n            var that = this;\n            for (var i = 0; i < affectedAnimationsIds.length; i++) {\n                var belongingLanes = this.belongingLaneKeysByAnimationId._get(affectedAnimationsIds[i]);\n                for (var j = 0; j < belongingLanes.length; j++) {\n                    var laneKey = belongingLanes[j];\n                    if (!affectedLanes.hasOwnProperty(laneKey)) {\n                        affectedLanes[laneKey] = {\n                            animations: [],\n                            lane: that.lanes._get(laneKey),\n                            laneData: helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j])\n                        };\n                    }\n                    affectedLanes[laneKey].animations.push(affectedAnimationsIds[i]);\n                }\n            }\n\n            // for each of the affected lanes\n            for (var _laneKey in affectedLanes) {\n                var affectedLane = affectedLanes[_laneKey];\n                var lane = affectedLane.lane;\n                var laneData = affectedLane.laneData;\n                var laneBeforeEdit = _sortBy(this.getLanesCopy(lane), ['millisecond']);\n\n                // edit lane items millisecond\n                for (var k = 0; k < lane.length; k++) {\n                    if (affectedLane.animations.indexOf(lane[k].incident.id) >= 0) {\n                        lane[k].millisecond += millisecondsDelta;\n                    }\n                } // end for searching for the animations within the lane\n\n                var sortedLane = _sortBy(lane, ['millisecond']);\n                this.lanes._set(_laneKey, sortedLane);\n                lane = sortedLane;\n                // console.log(this);\n\n                var _loop = function _loop(_i2) {\n                    var animationToCheck = affectedLane.animations[_i2];\n                    var animationIndexBeforeEdit = _findIndex(laneBeforeEdit, function (item) {\n                        return item.incident.id === animationToCheck;\n                    });\n                    var animationIndexAfterEdit = _findIndex(lane, function (item) {\n                        return item.incident.id === animationToCheck;\n                    });\n                    var animation = lane[animationIndexAfterEdit].incident;\n\n                    /**\n                     * if the first animation doesn't have animated attributes that means no one on this channel has. Brake\n                     * and exit the loop that handles start and end values\n                    */\n                    if (!_this._incidentHasAnimatedAttrs(animation)) {\n                        return 'break';\n                    }\n\n                    if (animationIndexBeforeEdit !== animationIndexAfterEdit || animationIndexAfterEdit > 1) {\n                        if (animationIndexBeforeEdit + 1 < lane.length) {\n                            // if the animation was not the last animation on the lane before the edit\n                            // we should take care of the initial values of the animation's previous successor\n                            if (animationIndexBeforeEdit === 0) {\n                                // if the edited animation was the first one before the edit\n                                // if it has initial values, pass them to its previous successor as its new initial values\n                                if (animation.hasInitialValue(laneData.attribute) !== false) {\n                                    // get the initial value of the edited animation and set it as initial value of the new 0 index\n                                    laneBeforeEdit[1].incident.setInitialValue(laneData.attribute, animation.getInitialValue(laneData.mcid, laneData.attribute));\n                                } else {\n                                    // otherwise calculate the initial value on the fly, out of the dom and set it to the new 0\n                                    laneBeforeEdit[1].incident.setInitialValue(laneData.attribute, laneBeforeEdit[1].incident.getScratchValue(laneData.mcid, laneData.attribute));\n                                }\n                            } else {\n                                // else if the edited animation was not the first one before the edit\n                                // meaning its previous successor is not the first one on the lane after the edit\n                                // just grab the target value of the new previous animation of the animation's previous successor and set it as initial value\n                                laneBeforeEdit[animationIndexBeforeEdit + 1].incident.setInitialValue(laneData.attribute, laneBeforeEdit[animationIndexBeforeEdit - 1].incident.attrs.animatedAttrs[laneData.attribute]);\n                            }\n                        }\n\n                        // for the edited animation itself now:\n                        if (animationIndexAfterEdit === 0) {\n                            // is it the first one (after edit)?\n                            // does the previously zero index animation has initial value?\n                            if (laneBeforeEdit[0].incident.hasInitialValue(laneData.attribute)) {\n                                // get the initial values of the previously 0 indexed animation of the lane\n                                animation.setInitialValue(laneData.attribute, laneBeforeEdit[0].incident.getInitialValue(laneData.mcid, laneData.attribute));\n                            } else {\n                                // otherwise calculate the initial value on the fly, our of the dom\n                                animation.setInitialValue(laneData.mcid, laneData.attribute, animation.getScratchValue(laneData.mcid, laneData.attribute));\n                            }\n                        } else {\n                            // else if it is not the first one after edit\n                            // just grab the target value of the previous animation on the updated lane and set it as its initial value\n                            animation.setInitialValue(laneData.attribute, lane[animationIndexAfterEdit - 1].incident.attrs.animatedAttrs[laneData.attribute]);\n                        }\n\n                        // for its new next animation (if it has one)\n                        if (animationIndexAfterEdit + 1 < lane.length) {\n                            // set its initial value to equal the target value of the edited animation\n                            lane[animationIndexAfterEdit + 1].incident.setInitialValue(laneData.attribute, animation.attrs.animatedAttrs[laneData.attribute]);\n                        }\n                    }\n                };\n\n                for (var _i2 = 0; _i2 < affectedLane.animations.length; _i2++) {\n                    var _ret = _loop(_i2);\n\n                    if (_ret === 'break') break;\n                }\n            } // end for each of the belonging lanes of the animation\n        }\n\n        /**\n         * removes the list of animations as provided\n         * @param {array} removedAnimations - an array with the removed animations' ids\n        */\n\n    }, {\n        key: 'deleteAnimations',\n        value: function deleteAnimations(removedAnimations, currentMillisecond) {\n            var affectedLanes = {};\n\n            for (var i = 0; i < removedAnimations.length; i++) {\n                var id = removedAnimations[i];\n                // for each lane the affected Animation appears in\n                var belongingLanes = this.belongingLaneKeysByAnimationId._get(id);\n                for (var j = 0; j < belongingLanes.length; j++) {\n                    var lane = this.lanes._get(belongingLanes[j]);\n\n                    var _animationIndexBeforeEdit = -1;\n                    for (var k = 0; k < lane.length; k++) {\n                        if (lane[k].incident.id === id) {\n                            _animationIndexBeforeEdit = k;\n                            break;\n                        }\n                    }\n\n                    // helper.log(animationIndexBeforeEdit);\n                    var animationToDelete = Object.assign({}, lane[_animationIndexBeforeEdit]);\n                    var animationObjectToDelete = animationToDelete.incident;\n                    var laneData = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]);\n\n                    // gets the lane without the removed animation\n                    var newLane = [];\n                    for (var _k = 0; _k < lane.length; _k++) {\n                        if (lane[_k].incident.id != id) {\n                            newLane.push(lane[_k]);\n                        }\n                    }\n                    this.lanes._set(belongingLanes[j], newLane);\n                    lane = this.lanes._get(belongingLanes[j]);\n\n                    if (lane.length === 0) {\n                        this.lanes._delete(belongingLanes[j]);\n                        if (affectedLanes.hasOwnProperty(belongingLanes[j])) {\n                            delete affectedLanes[belongingLanes[j]];\n                        }\n                    } else {\n                        if (this._incidentHasAnimatedAttrs(animationToDelete.incident)) {\n                            affectedLanes[belongingLanes[j]] = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[j]);\n                            if (_animationIndexBeforeEdit < lane.length && animationToDelete.incident.getInitialValue(laneData.mcid, laneData.attribute) !== false) {\n                                lane[_animationIndexBeforeEdit].incident.setInitialValue(laneData.attribute, animationToDelete.incident.getInitialValue(laneData.mcid, laneData.attribute));\n                            }\n                        }\n                    }\n                }\n                this.belongingLaneKeysByAnimationId._delete(removedAnimations[i]);\n            }\n            return affectedLanes;\n        }\n\n        /**\n         * This method handles edits on the final value of a specific attribute of a specific animation object\n         * @param {string} animationId - the id of the Animation object that has been edited\n         * @param {string} attr - the name of the attribute that has been edited\n         * @param {string} value - the new value of the edited attribute\n        */\n\n    }, {\n        key: 'updateAttributeOnLanes',\n        value: function updateAttributeOnLanes(animationId, attr, value) {\n            var belongingLanes = this.belongingLaneKeysByAnimationId._get(animationId);\n            var affectedLanes = [];\n            for (var i = 0; i < belongingLanes.length; i++) {\n                var lane = this.lanes._get(belongingLanes[i]);\n                var laneData = helper.getMCIDandAttrOutOfLaneKey(belongingLanes[i]);\n\n                // get the index of the animation on the lane\n                var animationIndex = -1;\n                for (var k = 0; k < lane.length; k++) {\n                    if (lane[k].incident.id === animationId) {\n                        animationIndex = k;\n                        break;\n                    }\n                }\n\n                // if the animation is not the last one on the lane\n                if (lane.length - 1 != animationIndex) {\n                    lane[animationIndex + 1].incident.setInitialValue(laneData.mcid, laneData.attribute, value);\n                }\n\n                affectedLanes.push(laneData);\n            }\n\n            return affectedLanes;\n        }\n    }]);\n\n    return LanesHandler;\n}();\n\nmodule.exports = LanesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/LanesHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/Collection.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/Collection.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Collection = function () {\n    function Collection() {\n        var initialArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        _classCallCheck(this, Collection);\n\n        this.realArray = [];\n        if (initialArray != null) {\n            this.realArray = initialArray;\n        }\n    }\n\n    _createClass(Collection, [{\n        key: \"_hasOwnProperty\",\n        value: function _hasOwnProperty(key) {\n            return this.realArray.hasOwnProperty(key);\n        }\n    }, {\n        key: \"_get\",\n        value: function _get(key) {\n            return this.realArray[key];\n        }\n    }, {\n        key: \"_set\",\n        value: function _set(key, value) {\n            this.realArray[key] = value;\n        }\n    }, {\n        key: \"_keys\",\n        value: function _keys() {\n            return Object.keys(this.realArray);\n        }\n    }, {\n        key: \"_delete\",\n        value: function _delete(key) {\n            return delete this.realArray[key];\n        }\n\n        /**\n         * exports a Collection object \n        */\n\n    }, {\n        key: \"_export\",\n        value: function _export() {\n            return this.realArray;\n        }\n    }]);\n\n    return Collection;\n}();\n\nmodule.exports = Collection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fQ2hhbm5lbHMvX0F0dHJpYnV0ZS9oZWxwZXJzL0NvbGxlY3Rpb24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fQ2hhbm5lbHMvX0F0dHJpYnV0ZS9oZWxwZXJzL0NvbGxlY3Rpb24uanM/MzljZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIENvbGxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29sbGVjdGlvbigpIHtcbiAgICAgICAgdmFyIGluaXRpYWxBcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sbGVjdGlvbik7XG5cbiAgICAgICAgdGhpcy5yZWFsQXJyYXkgPSBbXTtcbiAgICAgICAgaWYgKGluaXRpYWxBcnJheSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWxBcnJheSA9IGluaXRpYWxBcnJheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDb2xsZWN0aW9uLCBbe1xuICAgICAgICBrZXk6IFwiX2hhc093blByb3BlcnR5XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFzT3duUHJvcGVydHkoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFsQXJyYXkuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIl9nZXRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFsQXJyYXlba2V5XTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIl9zZXRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZWFsQXJyYXlba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiX2tleXNcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9rZXlzKCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVhbEFycmF5KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIl9kZWxldGVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMucmVhbEFycmF5W2tleV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogZXhwb3J0cyBhIENvbGxlY3Rpb24gb2JqZWN0IFxuICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiX2V4cG9ydFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2V4cG9ydCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWxBcnJheTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDb2xsZWN0aW9uO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbGxlY3Rpb247Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/Collection.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxCollection.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxCollection.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * The goal of this class is to get an original array, provide all the functionality\n * of the Collection class but by keeping the originalArray clean as it was provided.\n*/\n\nvar SandboxCollection = function () {\n    function SandboxCollection(originalArray) {\n        _classCallCheck(this, SandboxCollection);\n\n        this.originalArray = originalArray;\n        this.extraArray = {};\n        this.addedKeys = [];\n        this.removedKeys = [];\n    }\n\n    _createClass(SandboxCollection, [{\n        key: \"_hasOwnProperty\",\n        value: function _hasOwnProperty(key) {\n            return this.originalArray.hasOwnProperty(key) || this.extraArray.hasOwnProperty(key);\n        }\n    }, {\n        key: \"_get\",\n        value: function _get(key) {\n            if (this.extraArray.hasOwnProperty(key)) {\n                return this.extraArray[key];\n            } else if (!this.originalArray.hasOwnProperty(key)) {\n                return undefined;\n            } else {\n                this.extraArray[key] = Object.assign({}, this.originalArray[key]);\n                return this.extraArray[key];\n            }\n        }\n    }, {\n        key: \"_set\",\n        value: function _set(key, value) {\n            this.extraArray[key] = value;\n            if (!this.originalArray.hasOwnProperty(key)) {\n                this.addedKeys.push(key);\n            }\n            var indexOnRemovedKeys = this.removedKeys.indexOf(key);\n            if (indexOnRemovedKeys > -1) {\n                this.removedKeys.splice(indexOnRemovedKeys, 1);\n            }\n        }\n    }, {\n        key: \"_keys\",\n        value: function _keys() {\n            var allKeys = Object.keys(this.originalArray).concat(this.addedKeys);\n            for (var i = 0; i < this.removedKeys.length; i++) {\n                var indexOnArray = this.removedKeys.indexOf(this.removedKeys[i]);\n                allKeys.splice(indexOnArray, 1);\n            }\n            return allKeys;\n        }\n    }, {\n        key: \"_delete\",\n        value: function _delete(key) {\n            var indexOnAddedKeys = this.addedKeys.indexOf(key);\n            if (indexOnAddedKeys > -1) {\n                this.addedKeys.splice(indexOnAddedKeys);\n                return delete this.extraArray[key];\n            } else {\n                return this.removedKeys.push(key);\n            }\n        }\n    }, {\n        key: \"_export\",\n        value: function _export() {\n            for (var key in this.extraArray) {\n                this.originalArray[key] = this.extraArray[key];\n            }\n\n            for (var i = 0; i < this.removedKeys.length; i++) {\n                delete this.originalArray[this.removedKeys[i]];\n            }\n\n            return this.originalArray;\n        }\n    }]);\n\n    return SandboxCollection;\n}();\n\nmodule.exports = SandboxCollection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fQ2hhbm5lbHMvX0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hDb2xsZWN0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvX0NoYW5uZWxzL19BdHRyaWJ1dGUvaGVscGVycy9TYW5kYm94Q29sbGVjdGlvbi5qcz8xNTBjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFRoZSBnb2FsIG9mIHRoaXMgY2xhc3MgaXMgdG8gZ2V0IGFuIG9yaWdpbmFsIGFycmF5LCBwcm92aWRlIGFsbCB0aGUgZnVuY3Rpb25hbGl0eVxuICogb2YgdGhlIENvbGxlY3Rpb24gY2xhc3MgYnV0IGJ5IGtlZXBpbmcgdGhlIG9yaWdpbmFsQXJyYXkgY2xlYW4gYXMgaXQgd2FzIHByb3ZpZGVkLlxuKi9cblxudmFyIFNhbmRib3hDb2xsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNhbmRib3hDb2xsZWN0aW9uKG9yaWdpbmFsQXJyYXkpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNhbmRib3hDb2xsZWN0aW9uKTtcblxuICAgICAgICB0aGlzLm9yaWdpbmFsQXJyYXkgPSBvcmlnaW5hbEFycmF5O1xuICAgICAgICB0aGlzLmV4dHJhQXJyYXkgPSB7fTtcbiAgICAgICAgdGhpcy5hZGRlZEtleXMgPSBbXTtcbiAgICAgICAgdGhpcy5yZW1vdmVkS2V5cyA9IFtdO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTYW5kYm94Q29sbGVjdGlvbiwgW3tcbiAgICAgICAga2V5OiBcIl9oYXNPd25Qcm9wZXJ0eVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhc093blByb3BlcnR5KGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxBcnJheS5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IHRoaXMuZXh0cmFBcnJheS5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiX2dldFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldChrZXkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmV4dHJhQXJyYXkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3JpZ2luYWxBcnJheS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5leHRyYUFycmF5W2tleV0gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9yaWdpbmFsQXJyYXlba2V5XSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiX3NldFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmV4dHJhQXJyYXlba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9yaWdpbmFsQXJyYXkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbmRleE9uUmVtb3ZlZEtleXMgPSB0aGlzLnJlbW92ZWRLZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgICAgICAgIGlmIChpbmRleE9uUmVtb3ZlZEtleXMgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlZEtleXMuc3BsaWNlKGluZGV4T25SZW1vdmVkS2V5cywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJfa2V5c1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2tleXMoKSB7XG4gICAgICAgICAgICB2YXIgYWxsS2V5cyA9IE9iamVjdC5rZXlzKHRoaXMub3JpZ2luYWxBcnJheSkuY29uY2F0KHRoaXMuYWRkZWRLZXlzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZW1vdmVkS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleE9uQXJyYXkgPSB0aGlzLnJlbW92ZWRLZXlzLmluZGV4T2YodGhpcy5yZW1vdmVkS2V5c1tpXSk7XG4gICAgICAgICAgICAgICAgYWxsS2V5cy5zcGxpY2UoaW5kZXhPbkFycmF5LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbGxLZXlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiX2RlbGV0ZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgICAgICAgICAgIHZhciBpbmRleE9uQWRkZWRLZXlzID0gdGhpcy5hZGRlZEtleXMuaW5kZXhPZihrZXkpO1xuICAgICAgICAgICAgaWYgKGluZGV4T25BZGRlZEtleXMgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkZWRLZXlzLnNwbGljZShpbmRleE9uQWRkZWRLZXlzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJfZXhwb3J0XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZXhwb3J0KCkge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZXh0cmFBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxBcnJheVtrZXldID0gdGhpcy5leHRyYUFycmF5W2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZW1vdmVkS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm9yaWdpbmFsQXJyYXlbdGhpcy5yZW1vdmVkS2V5c1tpXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsQXJyYXk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2FuZGJveENvbGxlY3Rpb247XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2FuZGJveENvbGxlY3Rpb247Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxCollection.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxLanes.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxLanes.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar SandboxCollection = __webpack_require__(/*! ./SandboxCollection */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxCollection.js\");\n\nvar SandboxLanes = function (_SandboxCollection) {\n    _inherits(SandboxLanes, _SandboxCollection);\n\n    function SandboxLanes() {\n        _classCallCheck(this, SandboxLanes);\n\n        return _possibleConstructorReturn(this, (SandboxLanes.__proto__ || Object.getPrototypeOf(SandboxLanes)).apply(this, arguments));\n    }\n\n    _createClass(SandboxLanes, [{\n        key: '_get',\n        value: function _get(key) {\n            if (this.extraArray.hasOwnProperty(key)) {\n                return this.extraArray[key];\n            } else if (!this.originalArray.hasOwnProperty(key)) {\n                return undefined;\n            } else {\n                this.extraArray[key] = [];\n                for (var i = 0; i < this.originalArray[key].length; i++) {\n                    this.extraArray[key].push({\n                        id: this.originalArray[key][i].id,\n                        incident: this.originalArray[key][i].incident,\n                        millisecond: this.originalArray[key][i].millisecond * 1\n                    });\n                }\n                return this.extraArray[key];\n            }\n        }\n    }]);\n\n    return SandboxLanes;\n}(SandboxCollection);\n\nmodule.exports = SandboxLanes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fQ2hhbm5lbHMvX0F0dHJpYnV0ZS9oZWxwZXJzL1NhbmRib3hMYW5lcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L19DaGFubmVscy9fQXR0cmlidXRlL2hlbHBlcnMvU2FuZGJveExhbmVzLmpzPzY4ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTYW5kYm94Q29sbGVjdGlvbiA9IHJlcXVpcmUoJy4vU2FuZGJveENvbGxlY3Rpb24nKTtcblxudmFyIFNhbmRib3hMYW5lcyA9IGZ1bmN0aW9uIChfU2FuZGJveENvbGxlY3Rpb24pIHtcbiAgICBfaW5oZXJpdHMoU2FuZGJveExhbmVzLCBfU2FuZGJveENvbGxlY3Rpb24pO1xuXG4gICAgZnVuY3Rpb24gU2FuZGJveExhbmVzKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2FuZGJveExhbmVzKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNhbmRib3hMYW5lcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNhbmRib3hMYW5lcykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTYW5kYm94TGFuZXMsIFt7XG4gICAgICAgIGtleTogJ19nZXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldChrZXkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmV4dHJhQXJyYXkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dHJhQXJyYXlba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3JpZ2luYWxBcnJheS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5leHRyYUFycmF5W2tleV0gPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub3JpZ2luYWxBcnJheVtrZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0cmFBcnJheVtrZXldLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jaWRlbnQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLmluY2lkZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmQ6IHRoaXMub3JpZ2luYWxBcnJheVtrZXldW2ldLm1pbGxpc2Vjb25kICogMVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFBcnJheVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNhbmRib3hMYW5lcztcbn0oU2FuZGJveENvbGxlY3Rpb24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNhbmRib3hMYW5lczsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/helpers/SandboxLanes.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** @classdesc Helper maintains a number of helpful functions in a single point  */\nvar conf = __webpack_require__(/*! ../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\n\nvar Helper = function () {\n    function Helper(configuration) {\n        _classCallCheck(this, Helper);\n\n        var logLevel = 2;\n        if (configuration) {\n            if (configuration.hasOwnProperty('logLevel')) {\n                logLevel = configuration.logLevel;\n            }\n        }\n\n        this.lanesMCIDattrsSeperator = '___';\n\n        for (var i = 0; i < conf.logTypes.length; i++) {\n            var logType = conf.logTypes[i];\n            if (logLevel >= logType.level) this[logType.key] = window.console.log.bind(window.console, \"MotorCortex - %c%s\", logType.style);else this[logType.key] = function () {};\n        }\n\n        if (logLevel >= 3) this.log = window.console.log.bind(window.console, \"MotorCortex - \");else this.log = function () {};\n    }\n\n    _createClass(Helper, [{\n        key: 'renderTemplate',\n        value: function renderTemplate(templateString, templateVars) {\n            return new Function(\"return `\" + templateString + \"`;\").call(templateVars);\n        }\n\n        /**\n         * @returns {string} in the form \"1bc45f78-ab23-jl59\"\n         */\n\n    }, {\n        key: 'getAnId',\n        value: function getAnId() {\n            var underscore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            var specialChar = '-';\n            if (underscore) {\n                specialChar = '_';\n            }\n            function s4() {\n                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n            }\n            return s4() + s4() + specialChar + s4() + specialChar + s4();\n        }\n    }, {\n        key: 'getLaneKey',\n        value: function getLaneKey(mcid, attribute) {\n            return mcid + this.lanesMCIDattrsSeperator + attribute;\n        }\n    }, {\n        key: 'getMCIDandAttrOutOfLaneKey',\n        value: function getMCIDandAttrOutOfLaneKey(laneKey) {\n            var laneArray = laneKey.split(this.lanesMCIDattrsSeperator);\n            return {\n                mcid: laneArray[0],\n                attribute: laneArray[1]\n            };\n        }\n    }, {\n        key: 'getElementByMCID',\n        value: function getElementByMCID(context, mcid) {\n            return context.document.querySelectorAll('[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]')[0];\n        }\n    }, {\n        key: 'getMCIDOfElement',\n        value: function getMCIDOfElement(element) {\n            return element.getAttribute(conf.elements_data_attribute_name);\n        }\n\n        /**\n        subdivision might be rounding the number to its:\n        - units (subdivision = 1)\n        - tenths (subdivision = 10)\n        - hundreds (subdivision = 100)\n        - thousands (subdivision = 1000)\n         @param {string} int\n         @param {subdivision} int\n         @returns {int} the rounded number\n        */\n\n    }, {\n        key: 'roundNumberTo',\n        value: function roundNumberTo(number, subdivision) {\n            return Math.round(number / subdivision) * subdivision;\n        }\n    }, {\n        key: 'isInteger',\n        value: function isInteger(number) {\n            if (number === parseInt(number, 10)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }, {\n        key: 'isString',\n        value: function isString(test) {\n            if (typeof test === 'string' || test instanceof String) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }, {\n        key: 'isObject',\n        value: function isObject(test) {\n            return (typeof test === 'undefined' ? 'undefined' : _typeof(test)) === \"object\";\n        }\n    }, {\n        key: 'isArray',\n        value: function isArray(test) {\n            return Array.isArray(test);\n        }\n    }, {\n        key: 'isFunction',\n        value: function isFunction(functionToCheck) {\n            return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n        }\n    }, {\n        key: 'addClass',\n        value: function addClass(el, className) {\n            if (el.classList) el.classList.add(className);else el.className += ' ' + className;\n        }\n    }, {\n        key: 'removeClass',\n        value: function removeClass(el, className) {\n            if (el.classList) el.classList.remove(className);else el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n        }\n    }, {\n        key: 'addStyle',\n        value: function addStyle(el, style) {\n            for (var key in style) {\n                el.style[key] = style[key];\n            }\n        }\n\n        /**\n         * systole / diastole of the projections\n         * @param {float} fraction - the duration fraction of the parent Scene\n         * @returns {array} - collection of objects with keys: {id, start, end, startDelta}\n        **/\n\n    }, {\n        key: 'systoleDiastoleProjections',\n        value: function systoleDiastoleProjections(projections, durationFraction, adjustMillisecond) {\n            var alteredProjections = [];\n\n            for (var i = 0; i < projections.length; i++) {\n                var projectedIncident = projections[i];\n\n                if (durationFraction != 1) {\n                    alteredProjections.push({\n                        id: projectedIncident.incident.id,\n                        start: projectedIncident.millisecond * durationFraction + adjustMillisecond,\n                        end: projectedIncident.millisecond * durationFraction + projectedIncident.incident.duration * durationFraction + adjustMillisecond,\n                        startDelta: projectedIncident.millisecond * durationFraction - projectedIncident.millisecond\n                    });\n                }\n            }\n\n            return alteredProjections;\n        }\n    }]);\n\n    return Helper;\n}();\n\nmodule.exports = Helper;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\n\nvar Journey = function () {\n    function Journey(props) {\n        _classCallCheck(this, Journey);\n\n        if (!props.hasOwnProperty('incident')) {\n            helper.error('Journey constructor expects an Incident on its properties on the key \"incident\"');\n            return false;\n        }\n\n        this.memory = props.calpuleMemory;\n        this.stations = [];\n\n        this.incident = props.incident;\n        this.startMillisecond = this.incident.runTimeInfo.currentMillisecond * 1;\n        this.startState = this.incident.state + \"\";\n        this.incident.stop();\n    }\n\n    _createClass(Journey, [{\n        key: 'station',\n        value: function station(millisecond) {\n            var props = {};\n            if (this.stations.length > 0) {\n                props.previousStop = this.stations[this.stations.length - 1];\n            }\n            this.stations.push(millisecond);\n            // helper.log(`CAPSULE passes as previousStop: ${props.previousStop}`);\n            // helper.log(this.stations);\n            this.incident.goTo(millisecond, props);\n        }\n    }, {\n        key: 'destination',\n        value: function destination() {\n            var millisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            if (millisecond != null) {\n                this.station(millisecond);\n            } else {\n                millisecond = this.stations[this.stations.length - 1];\n            }\n            this.incident.beOn(millisecond, false);\n            if (this.startState === 'playing' || this.startState === 'blocked') {\n                this.incident.resume();\n            }\n            this.memory.push(this.exportJourneyLog);\n        }\n    }, {\n        key: 'exportJourneyLog',\n        value: function exportJourneyLog() {\n            return {\n                startMillisecond: this.startMillisecond,\n                startState: this.startState,\n                incident: this.incident.exportState(),\n                stations: this.stations\n            };\n        }\n    }]);\n\n    return Journey;\n}();\n\nvar TimeCapsule = function () {\n    function TimeCapsule() {\n        _classCallCheck(this, TimeCapsule);\n\n        this.memory = [];\n    }\n\n    _createClass(TimeCapsule, [{\n        key: 'startJourney',\n        value: function startJourney(incident) {\n            if (!incident) {\n                helper.error('startJourney expects an Incident as an argument');\n                return false;\n            }\n\n            return new Journey({ incident: incident, calpuleMemory: this.memory });\n        }\n    }]);\n\n    return TimeCapsule;\n}();\n\nmodule.exports = TimeCapsule;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9fY29yZVV0aWxzL1RpbWVDYXBzdWxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvX2NvcmVVdGlscy9UaW1lQ2Fwc3VsZS5qcz9kNTRkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEhlbHBlciA9IHJlcXVpcmUoJy4uL19jb3JlVXRpbHMvSGVscGVyJyk7XG52YXIgaGVscGVyID0gbmV3IEhlbHBlcigpO1xuXG52YXIgSm91cm5leSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBKb3VybmV5KHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBKb3VybmV5KTtcblxuICAgICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KCdpbmNpZGVudCcpKSB7XG4gICAgICAgICAgICBoZWxwZXIuZXJyb3IoJ0pvdXJuZXkgY29uc3RydWN0b3IgZXhwZWN0cyBhbiBJbmNpZGVudCBvbiBpdHMgcHJvcGVydGllcyBvbiB0aGUga2V5IFwiaW5jaWRlbnRcIicpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tZW1vcnkgPSBwcm9wcy5jYWxwdWxlTWVtb3J5O1xuICAgICAgICB0aGlzLnN0YXRpb25zID0gW107XG5cbiAgICAgICAgdGhpcy5pbmNpZGVudCA9IHByb3BzLmluY2lkZW50O1xuICAgICAgICB0aGlzLnN0YXJ0TWlsbGlzZWNvbmQgPSB0aGlzLmluY2lkZW50LnJ1blRpbWVJbmZvLmN1cnJlbnRNaWxsaXNlY29uZCAqIDE7XG4gICAgICAgIHRoaXMuc3RhcnRTdGF0ZSA9IHRoaXMuaW5jaWRlbnQuc3RhdGUgKyBcIlwiO1xuICAgICAgICB0aGlzLmluY2lkZW50LnN0b3AoKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSm91cm5leSwgW3tcbiAgICAgICAga2V5OiAnc3RhdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0aW9uKG1pbGxpc2Vjb25kKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBwcm9wcy5wcmV2aW91c1N0b3AgPSB0aGlzLnN0YXRpb25zW3RoaXMuc3RhdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0YXRpb25zLnB1c2gobWlsbGlzZWNvbmQpO1xuICAgICAgICAgICAgLy8gaGVscGVyLmxvZyhgQ0FQU1VMRSBwYXNzZXMgYXMgcHJldmlvdXNTdG9wOiAke3Byb3BzLnByZXZpb3VzU3RvcH1gKTtcbiAgICAgICAgICAgIC8vIGhlbHBlci5sb2codGhpcy5zdGF0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmluY2lkZW50LmdvVG8obWlsbGlzZWNvbmQsIHByb3BzKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVzdGluYXRpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdGluYXRpb24oKSB7XG4gICAgICAgICAgICB2YXIgbWlsbGlzZWNvbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChtaWxsaXNlY29uZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0aW9uKG1pbGxpc2Vjb25kKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWlsbGlzZWNvbmQgPSB0aGlzLnN0YXRpb25zW3RoaXMuc3RhdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluY2lkZW50LmJlT24obWlsbGlzZWNvbmQsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0U3RhdGUgPT09ICdwbGF5aW5nJyB8fCB0aGlzLnN0YXJ0U3RhdGUgPT09ICdibG9ja2VkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jaWRlbnQucmVzdW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1lbW9yeS5wdXNoKHRoaXMuZXhwb3J0Sm91cm5leUxvZyk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2V4cG9ydEpvdXJuZXlMb2cnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXhwb3J0Sm91cm5leUxvZygpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhcnRNaWxsaXNlY29uZDogdGhpcy5zdGFydE1pbGxpc2Vjb25kLFxuICAgICAgICAgICAgICAgIHN0YXJ0U3RhdGU6IHRoaXMuc3RhcnRTdGF0ZSxcbiAgICAgICAgICAgICAgICBpbmNpZGVudDogdGhpcy5pbmNpZGVudC5leHBvcnRTdGF0ZSgpLFxuICAgICAgICAgICAgICAgIHN0YXRpb25zOiB0aGlzLnN0YXRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEpvdXJuZXk7XG59KCk7XG5cbnZhciBUaW1lQ2Fwc3VsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lQ2Fwc3VsZSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbWVDYXBzdWxlKTtcblxuICAgICAgICB0aGlzLm1lbW9yeSA9IFtdO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhUaW1lQ2Fwc3VsZSwgW3tcbiAgICAgICAga2V5OiAnc3RhcnRKb3VybmV5JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0Sm91cm5leShpbmNpZGVudCkge1xuICAgICAgICAgICAgaWYgKCFpbmNpZGVudCkge1xuICAgICAgICAgICAgICAgIGhlbHBlci5lcnJvcignc3RhcnRKb3VybmV5IGV4cGVjdHMgYW4gSW5jaWRlbnQgYXMgYW4gYXJndW1lbnQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm91cm5leSh7IGluY2lkZW50OiBpbmNpZGVudCwgY2FscHVsZU1lbW9yeTogdGhpcy5tZW1vcnkgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGltZUNhcHN1bGU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGltZUNhcHN1bGU7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_responsiveness/AttributeAwareIncident.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_responsiveness/AttributeAwareIncident.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Group = __webpack_require__(/*! ../_BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Group.js\");\nvar conf = __webpack_require__(/*! ../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\n\nvar AttributesAwareIncident = function (_Group) {\n    _inherits(AttributesAwareIncident, _Group);\n\n    function AttributesAwareIncident(incident) {\n        _classCallCheck(this, AttributesAwareIncident);\n\n        var _this = _possibleConstructorReturn(this, (AttributesAwareIncident.__proto__ || Object.getPrototypeOf(AttributesAwareIncident)).call(this, incident.attrs, incident.props));\n\n        _this.setUp(incident);\n        return _this;\n    }\n\n    _createClass(AttributesAwareIncident, [{\n        key: 'setUp',\n        value: function setUp(incident) {\n            this.IncidentClass = incident.constructor;\n            this.toPassToElementIncidents = {\n                plugin_channel_class: incident.plugin_channel_class,\n                mc_plugin_npm_name: incident.mc_plugin_npm_name\n            };\n            this.attributeIncidentsByAttribute = {};\n            this.cleanProps = Object.assign({}, this.props);\n            this.cleanAttrs = Object.assign({}, this.attrs);\n            delete this.cleanProps.id;\n            this.cleanAttrs.animatedAttrs = {};\n\n            for (var attr in this.attrs.animatedAttrs) {\n                this._createAttributeIncident(attr);\n            }\n        }\n\n        /**\n        * attribute groups\n        Can have on their timeline:\n        - An incident\n        Can’t have on their timeline:\n        - A plain group\n        - A dom group\n        - Another attribute group\n        */\n\n    }, {\n        key: '_prepareInicdentForAddition',\n        value: function _prepareInicdentForAddition(incident) {\n            if (!incident.hasIncidents) {\n                // if it is not a group\n                return incident;\n            } else {\n                helper.error(\"attribute groups can not accept groups on their timeline\");\n                return null;\n            }\n        }\n    }, {\n        key: '_createAttributeIncident',\n        value: function _createAttributeIncident(attribute) {\n            var propsToPass = Object.assign({}, this.cleanProps);\n            var attrsToPass = Object.assign({}, this.cleanAttrs);\n            attrsToPass.animatedAttrs = {};\n            if (_typeof(this.attrs.animatedAttrs[attribute]) === 'object' && !Array.isArray(this.attrs.animatedAttrs[attribute])) {\n                attrsToPass.animatedAttrs[attribute] = Object.assign({}, this.attrs.animatedAttrs[attribute]);\n            } else if (_typeof(this.attrs.animatedAttrs[attribute]) === 'object' && Array.isArray(this.attrs.animatedAttrs[attribute])) {\n                attrsToPass.animatedAttrs[attribute] = this.attrs.animatedAttrs[attribute].splice(0);\n            } else {\n                attrsToPass.animatedAttrs[attribute] = this.attrs.animatedAttrs[attribute];\n            }\n\n            propsToPass.id = this.id + '_' + attribute;\n            propsToPass.autogeneratedID = true;\n\n            var attributeIncident = new this.IncidentClass(attrsToPass, propsToPass);\n            attributeIncident.plugin_channel_class = this.toPassToElementIncidents.plugin_channel_class;\n            attributeIncident.mc_plugin_npm_name = this.toPassToElementIncidents.mc_plugin_npm_name;\n            this.addIncident(attributeIncident, 0);\n            this.attributeIncidentsByAttribute[attribute] = attributeIncident;\n        }\n    }, {\n        key: 'attributesChange',\n        value: function attributesChange(newAttrs) {\n            for (var i = 0; i < this.incidents; i++) {\n                // TODO execute attribute change by passing down the command\n            }\n        }\n    }, {\n        key: 'groupType',\n        get: function get() {\n            return \"attribute\";\n        }\n    }]);\n\n    return AttributesAwareIncident;\n}(Group);\n\nmodule.exports = AttributesAwareIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_responsiveness/AttributeAwareIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/_responsiveness/DOMAwareIncident.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/_responsiveness/DOMAwareIncident.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Group = __webpack_require__(/*! ../_BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Group.js\");\nvar conf = __webpack_require__(/*! ../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\n\nvar DOMAwareIncident = function (_Group) {\n    _inherits(DOMAwareIncident, _Group);\n\n    function DOMAwareIncident(incident) {\n        _classCallCheck(this, DOMAwareIncident);\n\n        var _this = _possibleConstructorReturn(this, (DOMAwareIncident.__proto__ || Object.getPrototypeOf(DOMAwareIncident)).call(this, incident.attrs, incident.props));\n\n        _this.setUp(incident);\n        return _this;\n    }\n\n    _createClass(DOMAwareIncident, [{\n        key: 'setUp',\n\n\n        // props must have the elements collection and the millisecond\n        // id is also mandatory\n        value: function setUp(incident) {\n            this.originalIncident = incident;\n            this.IncidentClass = incident.constructor;\n            this.toPassToElementIncidents = {\n                plugin_channel_class: incident.plugin_channel_class,\n                mc_plugin_npm_name: incident.mc_plugin_npm_name\n            };\n            this.elementIncidentsByMCID = {};\n            this.cleanProps = Object.assign({}, this.props);\n            delete this.cleanProps.id;\n\n            if (this.context) {\n                var elements = Array.from(this.context.document.querySelectorAll(this.props.selector));\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i];\n                    this._createElementIncident(element);\n                }\n            }\n        }\n    }, {\n        key: 'systolDiastole',\n        value: function systolDiastole(durationFraction) {\n            _get(DOMAwareIncident.prototype.__proto__ || Object.getPrototypeOf(DOMAwareIncident.prototype), 'systolDiastole', this).call(this, durationFraction);\n            this.originalIncident.props.duration *= durationFraction;\n        }\n\n        /**\n         * dom groups\n            Can have on their timeline:\n            - An incident with no animatedAttrs \n            - An attribute group (this method should actually turn any incident with animatedAttrs to one)\n            Can’t have on their timeline:\n            - A plain group\n            - Another dom group\n         */\n\n    }, {\n        key: '_prepareInicdentForAddition',\n        value: function _prepareInicdentForAddition(incident) {\n            if (!incident.attrs.hasOwnProperty('animatedAttrs') && !incident.hasIncidents) {\n                // if the incident is not a group and it has no animatedAttrs proceed normally\n                return incident;\n            } else if (incident.groupType === \"plain\") {\n                // if the Incident is a plain group proceed normally\n                helper.error(\"dom groups can not accept plain groups on their timeline\");\n                return null;\n            } else if (incident.groupType === \"dom\") {\n                helper.error(\"dom groups can not accept other dom groups on their timeline\");\n                return null;\n            }\n\n            // We need to turn the Incident to an AttrsAwareIncident\n            // before adding it to the group\n            var AttrsAwareIncident = __webpack_require__(/*! ./AttributeAwareIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/_responsiveness/AttributeAwareIncident.js\");\n            var theAttrsAwareIncident = new AttrsAwareIncident(incident);\n            return theAttrsAwareIncident;\n        }\n    }, {\n        key: '_createElementIncident',\n        value: function _createElementIncident(element) {\n            var mcid = this.context.getMCID(element);\n            if (!mcid) {\n                mcid = helper.getAnId(true);\n                this.context.setMCID(element, mcid);\n            }\n\n            var propsToPass = Object.assign({}, this.cleanProps);\n            propsToPass.selector = this.context.getElementSelectorByMCID(mcid); // '[data-motorocortext2-id=\"mcid1\"]' querySelectorAll()\n            propsToPass.mcid = mcid;\n            propsToPass.id = this.id + '_' + mcid;\n            propsToPass.autogeneratedID = true;\n            var elementIncident = new this.IncidentClass(this.attrs, propsToPass);\n            elementIncident.plugin_channel_class = this.toPassToElementIncidents.plugin_channel_class;\n            elementIncident.mc_plugin_npm_name = this.toPassToElementIncidents.mc_plugin_npm_name;\n            var result = this.addIncident(elementIncident, 0);\n            if (result.result === true) {\n                this.elementIncidentsByMCID[mcid] = elementIncident;\n            }\n            return result;\n        }\n\n        /**\n         * flashDOM method expects the new elements collection and:\n         * 1. Identifies which of the existing elementIncidents should go (the dom element does not participate on the DOMAwareGroup any more)\n         * 2. Identifies which elements are new and add their elementIncident on the DOMAwareGroup\n         * @returns {object} - with keys additions and deletions each of which hold an array of functions that must be\n         *  executed for adding the new element incidents and deleting the element incidents that do not apply any more\n        */\n\n    }, {\n        key: 'flashDOM',\n        value: function flashDOM() {\n            var _this2 = this;\n\n            var elements = this.context.getElements(this.props.selector);\n\n            // deletions and additions of elementIncidents that should take place according to the new elements\n            var deletions = [];\n            var additions = [];\n\n            var that = this;\n\n            // an array that will keep all new elements' keys to be used later for identifying deletions\n            var stayingElementIncidents = [];\n            // first identify additions\n\n            var _loop = function _loop(i) {\n                // for each of the new elements\n                var element = elements[i];\n                var mcid = _this2.context.getMCID(element); // take its mcid\n\n                if (!mcid) {\n                    // if the element does not have an mcid yet that means it's a new one\n                    var addition = function addition() {\n                        return that._createElementIncident(element);\n                    };\n                    additions.push(addition);\n                } else if (!_this2.elementIncidentsByMCID.hasOwnProperty(mcid)) {\n                    // else if the element has an mcid that doesn't already exist on the elementIncidents\n                    var _addition = function _addition() {\n                        return that._createElementIncident(element);\n                    };\n                    additions.push(_addition);\n                } else {\n                    stayingElementIncidents.push(mcid);\n                }\n            };\n\n            for (var i = 0; i < elements.length; i++) {\n                _loop(i);\n            }\n\n            // next step is to compare the elementIncidents with the existing elements key to see which \n            // are missing from the new set and put them for delete\n            var alreadyExistingElementsKeys = Object.keys(this.elementIncidentsByMCID);\n            var underDeletion = alreadyExistingElementsKeys.filter(function (key) {\n                return stayingElementIncidents.indexOf(key) < 0;\n            });\n\n            var _loop2 = function _loop2(i) {\n                var deletion = function deletion() {\n                    that.removeIncident(that.elementIncidentsByMCID[underDeletion[i]].id, { preventSlip: true });\n                    delete that.elementIncidentsByMCID[that.elementIncidentsByMCID[underDeletion[i]].id];\n                };\n                deletions.push(deletion);\n            };\n\n            for (var i = 0; i < underDeletion.length; i++) {\n                _loop2(i);\n            }\n\n            var failedAdditions = [];\n            for (var i = 0; i < additions.length; i++) {\n                var additionResult = additions[i]();\n                if (additionResult.result === false) {\n                    failedAdditions.push(additionResult);\n                }\n            }\n\n            for (var _i = 0; _i < deletions.length; _i++) {\n                deletions[_i]();\n            }\n\n            return {\n                failedAdditions: failedAdditions\n\n                // return {\n                //     additions: additions,\n                //     deletions: deletions\n                // }\n            };\n        }\n    }, {\n        key: 'attributesChange',\n        value: function attributesChange(newAttrs) {\n            for (var i = 0; i < this.incidents; i++) {\n                // TODO execute attribute change by passing down the command\n            }\n        }\n    }, {\n        key: 'exportState',\n        value: function exportState() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (props.hasOwnProperty('unprocessed')) {\n                if (props.unprocessed === false) {\n                    return _get(DOMAwareIncident.prototype.__proto__ || Object.getPrototypeOf(DOMAwareIncident.prototype), 'exportState', this).call(this, props);\n                } else {\n                    return this.originalIncident.exportState();\n                }\n            }\n            return this.originalIncident.exportState();\n        }\n    }, {\n        key: 'groupType',\n        get: function get() {\n            return \"dom\";\n        }\n    }]);\n\n    return DOMAwareIncident;\n}(Group);\n\nmodule.exports = DOMAwareIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/_responsiveness/DOMAwareIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/configuration/_CONST.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/configuration/_CONST.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    'atTheEndOfTheGroup': {\n        value: 'end',\n        purpose: 'It\\'s used on Groups and more specifically on the addIncident (and thus also on addPassiveIncident) methods. It \\n            implies that the millisecond for the new incident to be added should be at the end of the Group'\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb25maWd1cmF0aW9uL19DT05TVC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L2NvbmZpZ3VyYXRpb24vX0NPTlNULmpzP2E0NmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnYXRUaGVFbmRPZlRoZUdyb3VwJzoge1xuICAgICAgICB2YWx1ZTogJ2VuZCcsXG4gICAgICAgIHB1cnBvc2U6ICdJdFxcJ3MgdXNlZCBvbiBHcm91cHMgYW5kIG1vcmUgc3BlY2lmaWNhbGx5IG9uIHRoZSBhZGRJbmNpZGVudCAoYW5kIHRodXMgYWxzbyBvbiBhZGRQYXNzaXZlSW5jaWRlbnQpIG1ldGhvZHMuIEl0IFxcbiAgICAgICAgICAgIGltcGxpZXMgdGhhdCB0aGUgbWlsbGlzZWNvbmQgZm9yIHRoZSBuZXcgaW5jaWRlbnQgdG8gYmUgYWRkZWQgc2hvdWxkIGJlIGF0IHRoZSBlbmQgb2YgdGhlIEdyb3VwJ1xuICAgIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/configuration/_CONST.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/configuration/allowedStateChanges.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/configuration/allowedStateChanges.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\n\nvar allowedStateChanges = {\n    // from which states an Incident can become one of the:\n\n    idle: {\n        forwards: ['transitional'], // only from transitional\n        backwards: ['transitional', 'playing']\n    },\n    transitional: {\n        forwards: ['idle', 'playing', 'waiting', 'sceneBlockingWaiting', 'clipBlockingWaiting', 'completed', 'blocked'],\n        backwards: ['idle', 'playing', 'waiting', 'sceneBlockingWaiting', 'clipBlockingWaiting', 'completed', 'blocked']\n    },\n    playing: {\n        forwards: ['idle', 'waiting', 'sceneBlockingWaiting', 'clipBlockingWaiting', 'blocked'],\n        backwards: ['completed', 'waiting', 'sceneBlockingWaiting', 'clipBlockingWaiting', 'blocked']\n    },\n    waiting: {\n        forwards: ['playing', 'blocked', 'transitional'],\n        backwards: ['playing', 'blocked', 'transitional']\n    },\n    sceneBlockingWaiting: {\n        forwards: ['playing', 'waiting', 'blocked'],\n        backwards: ['playing', 'waiting', 'blocked']\n    },\n    clipBlockingWaiting: {\n        forwards: ['playing', 'waiting', 'blocked'],\n        backwards: ['playing', 'waiting', 'blocked']\n    },\n    completed: {\n        forwards: ['transitional', 'playing'],\n        backwards: ['transitional']\n    },\n    blocked: {\n        forwards: ['transitional', 'playing', 'waiting', 'sceneBlockingWaiting'],\n        backwards: ['transitional', 'playing', 'waiting', 'sceneBlockingWaiting']\n    }\n};\n\nvar timePausingStates = ['blocked', 'waiting', 'sceneBlockingWaiting', 'clipBlockingWaiting'];\n\nvar checkTransition = function checkTransition(oldState, newState, direction) {\n    if (!allowedStateChanges.hasOwnProperty(oldState)) {\n        helper.error('The state ' + oldState + ' is not recognised as one of the supported Incident states');\n        return false;\n    } else if (!allowedStateChanges.hasOwnProperty(newState)) {\n        helper.error('The state ' + newState + ' is not recognised as one of the supported Incident states');\n        return false;\n    }\n\n    if (allowedStateChanges[newState][direction].indexOf(oldState) >= 0) {\n        return true;\n    } else {\n        // helper.error('The transition from ' + oldState + ' to ' + newState + ' is not allowed');\n        return false;\n    }\n};\n\nvar isTimePausingState = function isTimePausingState(state) {\n    return timePausingStates.indexOf(state) >= 0;\n};\n\nmodule.exports = { checkTransition: checkTransition, isTimePausingState: isTimePausingState };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb25maWd1cmF0aW9uL2FsbG93ZWRTdGF0ZUNoYW5nZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb25maWd1cmF0aW9uL2FsbG93ZWRTdGF0ZUNoYW5nZXMuanM/ZDZmYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi9fY29yZVV0aWxzL0hlbHBlcicpO1xudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcblxudmFyIGFsbG93ZWRTdGF0ZUNoYW5nZXMgPSB7XG4gICAgLy8gZnJvbSB3aGljaCBzdGF0ZXMgYW4gSW5jaWRlbnQgY2FuIGJlY29tZSBvbmUgb2YgdGhlOlxuXG4gICAgaWRsZToge1xuICAgICAgICBmb3J3YXJkczogWyd0cmFuc2l0aW9uYWwnXSwgLy8gb25seSBmcm9tIHRyYW5zaXRpb25hbFxuICAgICAgICBiYWNrd2FyZHM6IFsndHJhbnNpdGlvbmFsJywgJ3BsYXlpbmcnXVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbmFsOiB7XG4gICAgICAgIGZvcndhcmRzOiBbJ2lkbGUnLCAncGxheWluZycsICd3YWl0aW5nJywgJ3NjZW5lQmxvY2tpbmdXYWl0aW5nJywgJ2NsaXBCbG9ja2luZ1dhaXRpbmcnLCAnY29tcGxldGVkJywgJ2Jsb2NrZWQnXSxcbiAgICAgICAgYmFja3dhcmRzOiBbJ2lkbGUnLCAncGxheWluZycsICd3YWl0aW5nJywgJ3NjZW5lQmxvY2tpbmdXYWl0aW5nJywgJ2NsaXBCbG9ja2luZ1dhaXRpbmcnLCAnY29tcGxldGVkJywgJ2Jsb2NrZWQnXVxuICAgIH0sXG4gICAgcGxheWluZzoge1xuICAgICAgICBmb3J3YXJkczogWydpZGxlJywgJ3dhaXRpbmcnLCAnc2NlbmVCbG9ja2luZ1dhaXRpbmcnLCAnY2xpcEJsb2NraW5nV2FpdGluZycsICdibG9ja2VkJ10sXG4gICAgICAgIGJhY2t3YXJkczogWydjb21wbGV0ZWQnLCAnd2FpdGluZycsICdzY2VuZUJsb2NraW5nV2FpdGluZycsICdjbGlwQmxvY2tpbmdXYWl0aW5nJywgJ2Jsb2NrZWQnXVxuICAgIH0sXG4gICAgd2FpdGluZzoge1xuICAgICAgICBmb3J3YXJkczogWydwbGF5aW5nJywgJ2Jsb2NrZWQnLCAndHJhbnNpdGlvbmFsJ10sXG4gICAgICAgIGJhY2t3YXJkczogWydwbGF5aW5nJywgJ2Jsb2NrZWQnLCAndHJhbnNpdGlvbmFsJ11cbiAgICB9LFxuICAgIHNjZW5lQmxvY2tpbmdXYWl0aW5nOiB7XG4gICAgICAgIGZvcndhcmRzOiBbJ3BsYXlpbmcnLCAnd2FpdGluZycsICdibG9ja2VkJ10sXG4gICAgICAgIGJhY2t3YXJkczogWydwbGF5aW5nJywgJ3dhaXRpbmcnLCAnYmxvY2tlZCddXG4gICAgfSxcbiAgICBjbGlwQmxvY2tpbmdXYWl0aW5nOiB7XG4gICAgICAgIGZvcndhcmRzOiBbJ3BsYXlpbmcnLCAnd2FpdGluZycsICdibG9ja2VkJ10sXG4gICAgICAgIGJhY2t3YXJkczogWydwbGF5aW5nJywgJ3dhaXRpbmcnLCAnYmxvY2tlZCddXG4gICAgfSxcbiAgICBjb21wbGV0ZWQ6IHtcbiAgICAgICAgZm9yd2FyZHM6IFsndHJhbnNpdGlvbmFsJywgJ3BsYXlpbmcnXSxcbiAgICAgICAgYmFja3dhcmRzOiBbJ3RyYW5zaXRpb25hbCddXG4gICAgfSxcbiAgICBibG9ja2VkOiB7XG4gICAgICAgIGZvcndhcmRzOiBbJ3RyYW5zaXRpb25hbCcsICdwbGF5aW5nJywgJ3dhaXRpbmcnLCAnc2NlbmVCbG9ja2luZ1dhaXRpbmcnXSxcbiAgICAgICAgYmFja3dhcmRzOiBbJ3RyYW5zaXRpb25hbCcsICdwbGF5aW5nJywgJ3dhaXRpbmcnLCAnc2NlbmVCbG9ja2luZ1dhaXRpbmcnXVxuICAgIH1cbn07XG5cbnZhciB0aW1lUGF1c2luZ1N0YXRlcyA9IFsnYmxvY2tlZCcsICd3YWl0aW5nJywgJ3NjZW5lQmxvY2tpbmdXYWl0aW5nJywgJ2NsaXBCbG9ja2luZ1dhaXRpbmcnXTtcblxudmFyIGNoZWNrVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGNoZWNrVHJhbnNpdGlvbihvbGRTdGF0ZSwgbmV3U3RhdGUsIGRpcmVjdGlvbikge1xuICAgIGlmICghYWxsb3dlZFN0YXRlQ2hhbmdlcy5oYXNPd25Qcm9wZXJ0eShvbGRTdGF0ZSkpIHtcbiAgICAgICAgaGVscGVyLmVycm9yKCdUaGUgc3RhdGUgJyArIG9sZFN0YXRlICsgJyBpcyBub3QgcmVjb2duaXNlZCBhcyBvbmUgb2YgdGhlIHN1cHBvcnRlZCBJbmNpZGVudCBzdGF0ZXMnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWFsbG93ZWRTdGF0ZUNoYW5nZXMuaGFzT3duUHJvcGVydHkobmV3U3RhdGUpKSB7XG4gICAgICAgIGhlbHBlci5lcnJvcignVGhlIHN0YXRlICcgKyBuZXdTdGF0ZSArICcgaXMgbm90IHJlY29nbmlzZWQgYXMgb25lIG9mIHRoZSBzdXBwb3J0ZWQgSW5jaWRlbnQgc3RhdGVzJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dlZFN0YXRlQ2hhbmdlc1tuZXdTdGF0ZV1bZGlyZWN0aW9uXS5pbmRleE9mKG9sZFN0YXRlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGhlbHBlci5lcnJvcignVGhlIHRyYW5zaXRpb24gZnJvbSAnICsgb2xkU3RhdGUgKyAnIHRvICcgKyBuZXdTdGF0ZSArICcgaXMgbm90IGFsbG93ZWQnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbnZhciBpc1RpbWVQYXVzaW5nU3RhdGUgPSBmdW5jdGlvbiBpc1RpbWVQYXVzaW5nU3RhdGUoc3RhdGUpIHtcbiAgICByZXR1cm4gdGltZVBhdXNpbmdTdGF0ZXMuaW5kZXhPZihzdGF0ZSkgPj0gMDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyBjaGVja1RyYW5zaXRpb246IGNoZWNrVHJhbnNpdGlvbiwgaXNUaW1lUGF1c2luZ1N0YXRlOiBpc1RpbWVQYXVzaW5nU3RhdGUgfTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/configuration/allowedStateChanges.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\nknown events:\n- state-change / meta: the name of the new state\n- attribute-rejection / meta: animationID, attributes\n- animation-rejection / meta: animationID\n- conflicts-on-edit\n*/\n\nvar conf = {\n    keyframe_sec_key: 'sec_',\n    elements_data_attribute_name: 'data-motorcortex2-id',\n    selfContainedContextHandler: 'closed',\n    getMillisecondFromKeyframeKey: function getMillisecondFromKeyframeKey(keyframeKey) {\n        return parseInt(keyframeKey.slice(conf.keyframe_sec_key.length));\n    },\n    logTypes: [{\n        key: 'info',\n        style: 'color: #666;',\n        level: 5\n    }, {\n        key: 'notice',\n        style: 'background: rgba(0, 0, 0, 0.8); color:white; padding:8px;',\n        level: 4\n    }, {\n        key: 'warning',\n        style: 'color: black; background: orange;',\n        level: 2\n    }, {\n        key: 'error',\n        style: 'color: black; background: red;',\n        level: 1\n    }]\n};\n\nmodule.exports = conf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb25maWd1cmF0aW9uL2dlbmVyYWxDb25mLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9Aa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2Rpc3QvY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZi5qcz8yNzYzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLypcbmtub3duIGV2ZW50czpcbi0gc3RhdGUtY2hhbmdlIC8gbWV0YTogdGhlIG5hbWUgb2YgdGhlIG5ldyBzdGF0ZVxuLSBhdHRyaWJ1dGUtcmVqZWN0aW9uIC8gbWV0YTogYW5pbWF0aW9uSUQsIGF0dHJpYnV0ZXNcbi0gYW5pbWF0aW9uLXJlamVjdGlvbiAvIG1ldGE6IGFuaW1hdGlvbklEXG4tIGNvbmZsaWN0cy1vbi1lZGl0XG4qL1xuXG52YXIgY29uZiA9IHtcbiAgICBrZXlmcmFtZV9zZWNfa2V5OiAnc2VjXycsXG4gICAgZWxlbWVudHNfZGF0YV9hdHRyaWJ1dGVfbmFtZTogJ2RhdGEtbW90b3Jjb3J0ZXgyLWlkJyxcbiAgICBzZWxmQ29udGFpbmVkQ29udGV4dEhhbmRsZXI6ICdjbG9zZWQnLFxuICAgIGdldE1pbGxpc2Vjb25kRnJvbUtleWZyYW1lS2V5OiBmdW5jdGlvbiBnZXRNaWxsaXNlY29uZEZyb21LZXlmcmFtZUtleShrZXlmcmFtZUtleSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoa2V5ZnJhbWVLZXkuc2xpY2UoY29uZi5rZXlmcmFtZV9zZWNfa2V5Lmxlbmd0aCkpO1xuICAgIH0sXG4gICAgbG9nVHlwZXM6IFt7XG4gICAgICAgIGtleTogJ2luZm8nLFxuICAgICAgICBzdHlsZTogJ2NvbG9yOiAjNjY2OycsXG4gICAgICAgIGxldmVsOiA1XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdub3RpY2UnLFxuICAgICAgICBzdHlsZTogJ2JhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC44KTsgY29sb3I6d2hpdGU7IHBhZGRpbmc6OHB4OycsXG4gICAgICAgIGxldmVsOiA0XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd3YXJuaW5nJyxcbiAgICAgICAgc3R5bGU6ICdjb2xvcjogYmxhY2s7IGJhY2tncm91bmQ6IG9yYW5nZTsnLFxuICAgICAgICBsZXZlbDogMlxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZXJyb3InLFxuICAgICAgICBzdHlsZTogJ2NvbG9yOiBibGFjazsgYmFja2dyb3VuZDogcmVkOycsXG4gICAgICAgIGxldmVsOiAxXG4gICAgfV1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29uZjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/configuration/pipesConf.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/configuration/pipesConf.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    _BLOCKING_WAITING: \"motor-cortex-js.blocking-waiting\",\n    _UNBLOCK_WAITING: \"motor-cortex-js.unblock-waiting\",\n    _GAIN_CHANGE: \"motor-cortex-js.gain-change\",\n    _CLIP_EDITING_STATUS: \"motor-cortex.js.clip-editing-status\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb25maWd1cmF0aW9uL3BpcGVzQ29uZi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L2NvbmZpZ3VyYXRpb24vcGlwZXNDb25mLmpzP2EyOTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIF9CTE9DS0lOR19XQUlUSU5HOiBcIm1vdG9yLWNvcnRleC1qcy5ibG9ja2luZy13YWl0aW5nXCIsXG4gICAgX1VOQkxPQ0tfV0FJVElORzogXCJtb3Rvci1jb3J0ZXgtanMudW5ibG9jay13YWl0aW5nXCIsXG4gICAgX0dBSU5fQ0hBTkdFOiBcIm1vdG9yLWNvcnRleC1qcy5nYWluLWNoYW5nZVwiLFxuICAgIF9DTElQX0VESVRJTkdfU1RBVFVTOiBcIm1vdG9yLWNvcnRleC5qcy5jbGlwLWVkaXRpbmctc3RhdHVzXCJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/configuration/pipesConf.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/Channel.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/Channel.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar Channel = __webpack_require__(/*! ../../_Channels/Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/Channel.js\");\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index.js */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index.js */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar PIChannel = function (_Channel) {\n    _inherits(PIChannel, _Channel);\n\n    function PIChannel() {\n        _classCallCheck(this, PIChannel);\n\n        return _possibleConstructorReturn(this, (PIChannel.__proto__ || Object.getPrototypeOf(PIChannel)).apply(this, arguments));\n    }\n\n    _createClass(PIChannel, [{\n        key: 'onInitialise',\n\n        /*\n        this.incidents is a collection of {incident, id, millisecond} objects always kept in order\n            from lower to higher millisecond\n        this.incidetnsById is an index of the incidents kept by id (this.incidents[incident-id] = Incident)\n        */\n        value: function onInitialise() {\n            this.incidents = [];\n            this.incidentsById = {};\n        }\n    }, {\n        key: 'slipToLaneForwards',\n        value: function slipToLaneForwards(currentMillisecond, millisecond) {\n            var participatinIncidents = _filter(this.incidents, function (laneItem) {\n                return laneItem.millisecond > currentMillisecond && laneItem.millisecond <= millisecond;\n            });\n            // helper.log(`participating incidents: `, participatinIncidents);\n\n            for (var i = 0; i < participatinIncidents.length; i++) {\n                participatinIncidents[i].incident.command.forwards();\n            }\n\n            // this.runTimeInfo.currentMillisecond = millisecond;\n        }\n    }, {\n        key: 'slipToLaneBackwards',\n        value: function slipToLaneBackwards(currentMillisecond, millisecond) {\n            // helper.log(`participating incidents: `, participatinIncidents);\n            var participatinIncidents = _filter(this.incidents, function (laneItem) {\n                return laneItem.millisecond > millisecond && laneItem.millisecond <= currentMillisecond;\n            });\n\n            for (var i = participatinIncidents.length - 1; i >= 0; i--) {\n                participatinIncidents[i].incident.command.backwards();\n            }\n\n            // this.runTimeInfo.currentMillisecond = millisecond;\n        }\n\n        /**\n         * On this method the user defines the specific rules that apply on the plugin itself and on the Incidents of the plugin itself\n         * The method should either return {result: true} or {result: false, errors:[{error-object}]}, where error-object has the structure:\n         *  {\n                incident: // reference to the Incident object that has bee discarded\n                error: // text\n            }\n        * @param {array} incidents - a colleciton of all incidents to be added on the form:\n        *\n            {\n                id\n                millisecond\n                incident\n            }\n        * @returns {object} -\n        * either:\n            {\n                result:true,\n                execute: // a function that when executed it will add the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n        key: 'checkAddition',\n        value: function checkAddition(incidents) {\n            var errors = [];\n            var candidateIncidentsById = {};\n\n            for (var i = 0; i < incidents.length; i++) {\n                candidateIncidentsById[incidents[i].id] = incidents[i].incident;\n                if (this.incidentsById.hasOwnProperty(incidents[i].id)) {\n                    helper.error('Incident with the id ' + incidents[i].id + ' already exists. Addition is rejected.');\n                    errors.push({\n                        type: 'Already existing id',\n                        meta: {\n                            id: incidents[i].id\n                        }\n                    });\n                }\n            }\n\n            if (errors.length > 0) {\n                return {\n                    result: false,\n                    errors: errors\n                };\n            }\n\n            var that = this;\n            var exec = function exec() {\n                that.incidentsById = Object.assign(that.incidentsById, candidateIncidentsById);\n                that.incidents = that.incidents.concat(incidents);\n                that.incidents = _sortBy(that.incidents, [function (laneItem) {\n                    return laneItem.millisecond;\n                }]);\n                that.slipToLaneForwards(0, that.runTimeInfo.currentMillisecond);\n            };\n\n            return { result: true, execute: exec };\n        }\n\n        /**\n        @param {array} incidentsArray - A collection of the Incidetns to get edited in the form:\n        {\n            id\n            millisecond\n            incident\n        }\n        @param {int} millisecondsDelta- the delta of the star point of the provided incidents\n        */\n\n    }, {\n        key: 'checkEdit',\n        value: function checkEdit(incidentsArray, millisecondsDelta) {\n            var that = this;\n            var exec = function exec() {\n                for (var i = 0; i < incidentsArray.length; i++) {\n                    for (var j = 0; j < that.incidents.length; j++) {\n                        if (that.incidents[j].id === incidentsArray[i].id) {\n                            that.incidents[j].millisecond += millisecondsDelta;\n                            break;\n                        }\n                    }\n                }\n\n                that.incidents = _sortBy(that.incidents, [function (laneItem) {\n                    return laneItem.millisecond;\n                }]);\n\n                that.slipToLaneForwards(0, that.runTimeInfo.currentMillisecond);\n            };\n\n            return { result: true, execute: exec };\n        }\n    }, {\n        key: 'checkDelete',\n        value: function checkDelete(incidentsArray) {\n            var that = this;\n            var incidentIds = [];\n            for (var i = 0; i < incidentsArray.length; i++) {\n                incidentIds.push(incidentsArray[i].id);\n            }\n\n            var exec = function exec() {\n                var newIncidents = _filter(that.incidents, function (incident) {\n                    return incidentIds.indexOf(incident.id) === -1;\n                });\n\n                that.incidents = newIncidents;\n                for (var _i = 0; _i < incidentIds.length; _i++) {\n                    delete that.incidentsById[incidentIds[_i]];\n                }\n\n                that.slipToLaneForwards(0, that.runTimeInfo.currentMillisecond);\n            };\n\n            return { result: true, execute: exec };\n        }\n\n        /**\n        * @param {array} incidents - [{id, start, end, startDelta}]\n        */\n\n    }, {\n        key: 'checkResizedIncidents',\n        value: function checkResizedIncidents(incidents) {\n            var that = this;\n            var exec = function exec() {\n                for (var i = 0; i < incidents.length; i++) {\n                    for (var j = 0; j < that.incidents.length; j++) {\n                        if (that.incidents[j].id === incidents[i].id) {\n                            that.incidents[j].millisecond += incidents[i].startDelta;\n                            break;\n                        }\n                    }\n                }\n\n                that.incidents = _sortBy(that.incidents, [function (laneItem) {\n                    return laneItem.millisecond;\n                }]);\n\n                that.slipToLaneForwards(0, that.runTimeInfo.currentMillisecond);\n            };\n\n            return { result: true, execute: exec };\n        }\n\n        /**\n         @param {int} from - the millisecond to start from\n         @param {int} to - the millisecond to go to\n         */\n\n    }, {\n        key: 'moveTo',\n        value: function moveTo(from, to) {\n            if (from < to) {\n                // helper.log(`slipping to lane frowards from ${from} to ${to}`);\n                this.slipToLaneForwards(from, to);\n            } else if (from >= to) {\n                // helper.log(`slipping to lane backwards from ${from} to ${to}`);\n                this.slipToLaneBackwards(from, to);\n            }\n        }\n    }]);\n\n    return PIChannel;\n}(Channel);\n\nmodule.exports = PIChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/Channel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/DummyIncident.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/DummyIncident.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ProgrammaticIncident = __webpack_require__(/*! ./ProgrammaticIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/ProgrammaticIncident.js\");\n\nvar DummyIncident = function (_ProgrammaticIncident) {\n    _inherits(DummyIncident, _ProgrammaticIncident);\n\n    function DummyIncident() {\n        var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, DummyIncident);\n\n        return _possibleConstructorReturn(this, (DummyIncident.__proto__ || Object.getPrototypeOf(DummyIncident)).call(this, {\n            command: function command() {} }, {\n            id: props.id\n        }));\n    }\n\n    return DummyIncident;\n}(ProgrammaticIncident);\n\nmodule.exports = DummyIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb3JlUGx1Z2lucy9Qcm9ncmFtbWF0aWNJbmNpZGVudHMvRHVtbXlJbmNpZGVudC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L2NvcmVQbHVnaW5zL1Byb2dyYW1tYXRpY0luY2lkZW50cy9EdW1teUluY2lkZW50LmpzPzI3ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQcm9ncmFtbWF0aWNJbmNpZGVudCA9IHJlcXVpcmUoJy4vUHJvZ3JhbW1hdGljSW5jaWRlbnQnKTtcblxudmFyIER1bW15SW5jaWRlbnQgPSBmdW5jdGlvbiAoX1Byb2dyYW1tYXRpY0luY2lkZW50KSB7XG4gICAgX2luaGVyaXRzKER1bW15SW5jaWRlbnQsIF9Qcm9ncmFtbWF0aWNJbmNpZGVudCk7XG5cbiAgICBmdW5jdGlvbiBEdW1teUluY2lkZW50KCkge1xuICAgICAgICB2YXIgYXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEdW1teUluY2lkZW50KTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKER1bW15SW5jaWRlbnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEdW1teUluY2lkZW50KSkuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICBjb21tYW5kOiBmdW5jdGlvbiBjb21tYW5kKCkge30gfSwge1xuICAgICAgICAgICAgaWQ6IHByb3BzLmlkXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gRHVtbXlJbmNpZGVudDtcbn0oUHJvZ3JhbW1hdGljSW5jaWRlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1bW15SW5jaWRlbnQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/DummyIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/ProgrammaticIncident.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/ProgrammaticIncident.js ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar Incident = __webpack_require__(/*! ../../_BaseClasses/Incident */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Incident.js\");\n\nvar ProgrammaticIncident = function (_Incident) {\n    _inherits(ProgrammaticIncident, _Incident);\n\n    function ProgrammaticIncident() {\n        var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, ProgrammaticIncident);\n\n        var _this = _possibleConstructorReturn(this, (ProgrammaticIncident.__proto__ || Object.getPrototypeOf(ProgrammaticIncident)).call(this, attrs, props));\n\n        _this.command = {\n            forwards: function forwards() {},\n            backwards: function backwards() {}\n        };\n\n        if (!attrs.hasOwnProperty('command')) {\n            var _ret;\n\n            helper.error('Programmatic Incidents must have the \"command\" included on the properties');\n            return _ret = false, _possibleConstructorReturn(_this, _ret);\n        } else {\n            // if the user passed an object as the command\n            if (helper.isObject(attrs.command)) {\n                // we expect to find two functions residing on the \"forwards\" and \"backwards\" keys\n                if (attrs.command.hasOwnProperty('forwards')) {\n                    if (helper.isFunction(attrs.command.forwards)) {\n                        _this.command.forwards = attrs.command.forwards;\n                    } else {\n                        var _ret2;\n\n                        helper.error('ProgrammaticIncident\\'s command.forwards key should hold a function. ' + _typeof(attrs.command.forwards) + ' passed');\n                        return _ret2 = false, _possibleConstructorReturn(_this, _ret2);\n                    }\n                }\n                if (attrs.command.hasOwnProperty('backwards')) {\n                    if (helper.isFunction(attrs.command.backwards)) {\n                        _this.command.backwards = attrs.command.backwards;\n                    } else {\n                        var _ret3;\n\n                        helper.error('ProgrammaticIncident\\'s command.backwards key should hold a function. ' + _typeof(attrs.command.backwards) + ' passed');\n                        return _ret3 = false, _possibleConstructorReturn(_this, _ret3);\n                    }\n                }\n            } else if (helper.isFunction(attrs.command)) {\n                // else if the passed argument is a function we only hold this as the forwards command\n                _this.command.forwards = attrs.command;\n            } else {\n                var _ret4;\n\n                // else if the passed argument is neither function nor object return false\n                helper.error('command key of ProgrammaticIncidents\\' construction properties must be either an object or a function. ' + _typeof(attrs.command) + ' passed');\n                return _ret4 = false, _possibleConstructorReturn(_this, _ret4);\n            }\n        }\n        return _this;\n    }\n\n    _createClass(ProgrammaticIncident, [{\n        key: 'onPlay',\n        value: function onPlay(props) {\n            if (this.speed > 0) {\n                this.command.forwards(props);\n            } else {\n                this.command.backwards(props);\n            }\n        }\n    }]);\n\n    return ProgrammaticIncident;\n}(Incident);\n\nmodule.exports = ProgrammaticIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/ProgrammaticIncident.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/main.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/main.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar ProgrammaticIncident = __webpack_require__(/*! ./ProgrammaticIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/ProgrammaticIncident.js\");\nvar DummyIncident = __webpack_require__(/*! ./DummyIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/DummyIncident.js\");\nvar PIChannel = __webpack_require__(/*! ./Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/Channel.js\");\n\nmodule.exports = {\n    npm_name: \"@kissmybutton/programmatic-incidents\",\n    incidents: [{\n        exportable: ProgrammaticIncident,\n        name: \"ProgrammaticIncident\"\n    }, {\n        exportable: DummyIncident,\n        name: \"DummyIncident\"\n    }],\n    channel: PIChannel\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb3JlUGx1Z2lucy9Qcm9ncmFtbWF0aWNJbmNpZGVudHMvbWFpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L2NvcmVQbHVnaW5zL1Byb2dyYW1tYXRpY0luY2lkZW50cy9tYWluLmpzP2M1ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJvZ3JhbW1hdGljSW5jaWRlbnQgPSByZXF1aXJlKCcuL1Byb2dyYW1tYXRpY0luY2lkZW50Jyk7XG52YXIgRHVtbXlJbmNpZGVudCA9IHJlcXVpcmUoJy4vRHVtbXlJbmNpZGVudCcpO1xudmFyIFBJQ2hhbm5lbCA9IHJlcXVpcmUoJy4vQ2hhbm5lbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBucG1fbmFtZTogXCJAa2lzc215YnV0dG9uL3Byb2dyYW1tYXRpYy1pbmNpZGVudHNcIixcbiAgICBpbmNpZGVudHM6IFt7XG4gICAgICAgIGV4cG9ydGFibGU6IFByb2dyYW1tYXRpY0luY2lkZW50LFxuICAgICAgICBuYW1lOiBcIlByb2dyYW1tYXRpY0luY2lkZW50XCJcbiAgICB9LCB7XG4gICAgICAgIGV4cG9ydGFibGU6IER1bW15SW5jaWRlbnQsXG4gICAgICAgIG5hbWU6IFwiRHVtbXlJbmNpZGVudFwiXG4gICAgfV0sXG4gICAgY2hhbm5lbDogUElDaGFubmVsXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/main.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ClipFromDefinition.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ClipFromDefinition.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar Clip = __webpack_require__(/*! ./SCGroup */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCGroup.js\");\nvar Channel = __webpack_require__(/*! ./SCIChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCIChannel.js\");\n\nfunction ClipFromDefinition(definition) {\n    var clipClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (definition === null) {\n        helper.error('ClipFromDefinition expects the defintion parameter');\n        return false;\n    }\n\n    if (clipClass === null) {\n        clipClass = Clip;\n    }\n\n    var clip = new clipClass(definition.attrs, definition.props);\n    clip.plugin_channel_class = Channel;\n    clip.mc_plugin_npm_name = \"@kissmybutton/self-contained-incidents\";\n    constructIncidents(clip, definition);\n\n    return clip;\n}\n\nfunction constructIncidents(parentIncident, incidentDefinition) {\n    if (parentIncident.hasIncidents) {\n        for (var i = 0; i < incidentDefinition.incidents.length; i++) {\n            var incidentItem = incidentDefinition.incidents[i];\n            // incidentItem is an object:\n            /*\n            {\n                id\n                millisecond\n                incident\n            }\n            */\n\n            var theNewIncident = new incidentItem.incident.Incident(incidentItem.incident.attrs, incidentItem.incident.props);\n            theNewIncident.plugin_channel_class = incidentItem.incident.plugin_channel_class;\n            theNewIncident.mc_plugin_npm_name = incidentItem.incident.mc_plugin_npm_name;\n            parentIncident.addIncident(theNewIncident, incidentItem.millisecond);\n            constructIncidents(theNewIncident, incidentItem.incident);\n        }\n    }\n}\n\nmodule.exports = ClipFromDefinition;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb3JlUGx1Z2lucy9TZWxmQ29udGFpbmVkSW5jaWRlbnRzL0NsaXBGcm9tRGVmaW5pdGlvbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L2NvcmVQbHVnaW5zL1NlbGZDb250YWluZWRJbmNpZGVudHMvQ2xpcEZyb21EZWZpbml0aW9uLmpzP2Q0NmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcbnZhciBoZWxwZXIgPSBuZXcgSGVscGVyKCk7XG52YXIgQ2xpcCA9IHJlcXVpcmUoJy4vU0NHcm91cCcpO1xudmFyIENoYW5uZWwgPSByZXF1aXJlKCcuL1NDSUNoYW5uZWwnKTtcblxuZnVuY3Rpb24gQ2xpcEZyb21EZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgICB2YXIgY2xpcENsYXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gICAgaWYgKGRlZmluaXRpb24gPT09IG51bGwpIHtcbiAgICAgICAgaGVscGVyLmVycm9yKCdDbGlwRnJvbURlZmluaXRpb24gZXhwZWN0cyB0aGUgZGVmaW50aW9uIHBhcmFtZXRlcicpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGNsaXBDbGFzcyA9PT0gbnVsbCkge1xuICAgICAgICBjbGlwQ2xhc3MgPSBDbGlwO1xuICAgIH1cblxuICAgIHZhciBjbGlwID0gbmV3IGNsaXBDbGFzcyhkZWZpbml0aW9uLmF0dHJzLCBkZWZpbml0aW9uLnByb3BzKTtcbiAgICBjbGlwLnBsdWdpbl9jaGFubmVsX2NsYXNzID0gQ2hhbm5lbDtcbiAgICBjbGlwLm1jX3BsdWdpbl9ucG1fbmFtZSA9IFwiQGtpc3NteWJ1dHRvbi9zZWxmLWNvbnRhaW5lZC1pbmNpZGVudHNcIjtcbiAgICBjb25zdHJ1Y3RJbmNpZGVudHMoY2xpcCwgZGVmaW5pdGlvbik7XG5cbiAgICByZXR1cm4gY2xpcDtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SW5jaWRlbnRzKHBhcmVudEluY2lkZW50LCBpbmNpZGVudERlZmluaXRpb24pIHtcbiAgICBpZiAocGFyZW50SW5jaWRlbnQuaGFzSW5jaWRlbnRzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5jaWRlbnREZWZpbml0aW9uLmluY2lkZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGluY2lkZW50SXRlbSA9IGluY2lkZW50RGVmaW5pdGlvbi5pbmNpZGVudHNbaV07XG4gICAgICAgICAgICAvLyBpbmNpZGVudEl0ZW0gaXMgYW4gb2JqZWN0OlxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZFxuICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kXG4gICAgICAgICAgICAgICAgaW5jaWRlbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIHZhciB0aGVOZXdJbmNpZGVudCA9IG5ldyBpbmNpZGVudEl0ZW0uaW5jaWRlbnQuSW5jaWRlbnQoaW5jaWRlbnRJdGVtLmluY2lkZW50LmF0dHJzLCBpbmNpZGVudEl0ZW0uaW5jaWRlbnQucHJvcHMpO1xuICAgICAgICAgICAgdGhlTmV3SW5jaWRlbnQucGx1Z2luX2NoYW5uZWxfY2xhc3MgPSBpbmNpZGVudEl0ZW0uaW5jaWRlbnQucGx1Z2luX2NoYW5uZWxfY2xhc3M7XG4gICAgICAgICAgICB0aGVOZXdJbmNpZGVudC5tY19wbHVnaW5fbnBtX25hbWUgPSBpbmNpZGVudEl0ZW0uaW5jaWRlbnQubWNfcGx1Z2luX25wbV9uYW1lO1xuICAgICAgICAgICAgcGFyZW50SW5jaWRlbnQuYWRkSW5jaWRlbnQodGhlTmV3SW5jaWRlbnQsIGluY2lkZW50SXRlbS5taWxsaXNlY29uZCk7XG4gICAgICAgICAgICBjb25zdHJ1Y3RJbmNpZGVudHModGhlTmV3SW5jaWRlbnQsIGluY2lkZW50SXRlbS5pbmNpZGVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpcEZyb21EZWZpbml0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ClipFromDefinition.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ExtendableClip.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ExtendableClip.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar Group = __webpack_require__(/*! ../../_BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Group.js\");\nvar conf = __webpack_require__(/*! ../../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar pipeMessages = __webpack_require__(/*! ../../configuration/pipesConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/pipesConf.js\");\nvar ClipChannel = __webpack_require__(/*! ./SCIChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCIChannel.js\");\n\nvar ExtendableClip = function (_Group) {\n    _inherits(ExtendableClip, _Group);\n\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n     * - type (optional, defaults to \"iframe\") the type of the Clip. It can be one of the:\n     *  - iframe \n     *  - plain\n    */\n    function ExtendableClip() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        _classCallCheck(this, ExtendableClip);\n\n        var attrsToPass = void 0,\n            propsToUse = void 0;\n\n        /*\n        backwards compatibility. If the user doesn't pass a second argument on the constructor then this is \n        the new way of initialising a Group (only props).\n        */\n        if (oldProps === null) {\n            attrsToPass = {};\n            propsToUse = props;\n        } else {\n            // else, in case the user has passed two arguments then both should be used\n            attrsToPass = props;\n            propsToUse = oldProps;\n        }\n\n        if (!helper.isObject(propsToUse)) {\n            var _ret;\n\n            helper.error('Self Contained Incident expects an object on its second argument on the constructor. ' + (typeof propsToUse === 'undefined' ? 'undefined' : _typeof(propsToUse)) + ' passed');\n            return _ret = false, _possibleConstructorReturn(_this, _ret);\n        }\n\n        var _this = _possibleConstructorReturn(this, (ExtendableClip.__proto__ || Object.getPrototypeOf(ExtendableClip)).call(this, attrsToPass, propsToUse));\n\n        _this.mc_plugin_npm_name = \"@kissmybutton/self-contained-incidents\";\n        _this.plugin_channel_class = ClipChannel;\n\n        _this.isTheClip = true;\n\n        _this.volume = 1;\n\n        _this.editingStatus = 'editing'; // either normal or editing\n\n        _this.blockingWaitings = {};\n\n        _this.onClipInitialise();\n        return _this;\n    }\n\n    _createClass(ExtendableClip, [{\n        key: 'onClipInitialise',\n        value: function onClipInitialise() {\n            // called when group gets initialised\n        }\n    }, {\n        key: '_getChannel',\n        value: function _getChannel(channelId) {\n            if (!this.instantiatedChannels.hasOwnProperty(channelId)) {\n                return null;\n            } else {\n                return this.instantiatedChannels[channelId];\n            }\n        }\n    }, {\n        key: 'lastWish',\n        value: function lastWish() {\n            this.ownContext.unmount();\n        }\n    }, {\n        key: 'startEditing',\n        value: function startEditing() {\n            this.editingStatus = \"editing\";\n        }\n    }, {\n        key: 'doneEditing',\n        value: function doneEditing() {\n            this.stop();\n            this.setCurrentMillisecond(this.runTimeInfo.currentMillisecond);\n            this.recalcState(this.runTimeInfo.currentMillisecond);\n            this.restore();\n            this.editingStatus = \"editing\";\n        }\n    }, {\n        key: 'handlePipeMessage',\n        value: function handlePipeMessage(name, params) {\n            var waitingID = params.blockingWaitingID;\n            switch (name) {\n                case pipeMessages._BLOCKING_WAITING:\n                    if (this.blockingWaitings.hasOwnProperty(waitingID)) {\n                        helper.error('Blocking waiting with id=' + waitingID + ' already exists. Blocking waiting is going to be discarded');\n                        return;\n                    }\n                    helper.notice('adding blocking waiting with id: ' + waitingID);\n                    this.blockingWaitings[waitingID] = params;\n                    this.block();\n                    break;\n                case pipeMessages._UNBLOCK_WAITING:\n                    if (!this.blockingWaitings.hasOwnProperty(waitingID)) {\n                        helper.error('Blocking waiting with id=' + waitingID + ' does not exist and thus unblocking can not be performed');\n                        return;\n                    }\n                    delete this.blockingWaitings[waitingID];\n\n                    helper.notice('removing blocking waiting with id: ' + waitingID);\n                    // If after the unblocking there are no other blocking waitings:\n                    if (Object.keys(this.blockingWaitings).length === 0) {\n                        // if the Clip is on blocked state play\n                        this.unblock();\n                    }\n                    break;\n                case pipeMessages._CLIP_EDITING_STATUS:\n                    return this.editingStatus;\n            }\n        }\n    }, {\n        key: 'setVolume',\n        value: function setVolume(newVal) {\n            this.volume = parseFloat(newVal);\n            this.putMessageOnPipe(pipeMessages._GAIN_CHANGE, { gain: newVal }, false, \"down\");\n        }\n    }, {\n        key: 'onArm',\n        value: function onArm() {\n            this.blockingWaitings = {};\n        }\n    }, {\n        key: '_onGetContextOnce',\n        value: function _onGetContextOnce() {\n            return; // Clips do not get context from noone\n        }\n    }, {\n        key: 'exportState',\n        value: function exportState() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            var state = _get(ExtendableClip.prototype.__proto__ || Object.getPrototypeOf(ExtendableClip.prototype), 'exportState', this).call(this, props);\n\n            if (props.hasOwnProperty('exportChannels')) {\n                if (props.exportChannels === true) {\n                    var channelsToExport = [];\n                    for (var channel in this.instantiatedChannels) {\n                        var _state = this.instantiatedChannels[channel].exportState(props);\n                        _state.mc_plugin_npm_name = channel;\n                        channelsToExport.push(_state);\n                    }\n\n                    state.channels = channelsToExport;\n                }\n            }\n\n            return state;\n        }\n    }]);\n\n    return ExtendableClip;\n}(Group);\n\nmodule.exports = ExtendableClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ExtendableClip.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCGroup.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCGroup.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar Group = __webpack_require__(/*! ../../_BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Group.js\");\nvar conf = __webpack_require__(/*! ../../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar pipeMessages = __webpack_require__(/*! ../../configuration/pipesConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/pipesConf.js\");\n\n// context handlers\nvar IframeContextHandler = __webpack_require__(/*! ./helpers/IframeContextHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/IframeContextHandler.js\");\nvar PlainContextHandler = __webpack_require__(/*! ./helpers/PlainContextHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/PlainContextHandler.js\");\nvar WebComponentContextHandler = __webpack_require__(/*! ./helpers/WebComponentContextHandler */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/WebComponentContextHandler.js\");\n\nvar ExtendableClip = __webpack_require__(/*! ./ExtendableClip */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ExtendableClip.js\");\n\nvar Clip = function (_ExtendableClip) {\n    _inherits(Clip, _ExtendableClip);\n\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n     * - type (optional, defaults to \"closed\") the type of the Clip. It can be one of the:\n     *  - closed \n     *  - plain\n    */\n    function Clip() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        _classCallCheck(this, Clip);\n\n        var attrsToPass = void 0,\n            propsToUse = void 0;\n\n        /*\n        backwards compatibility. If the user doesn't pass a second argument on the constructor then this is \n        the new way of initialising a Group (only props).\n        */\n        if (oldProps === null) {\n            attrsToPass = {};\n            propsToUse = props;\n        } else {\n            // else, in case the user has passed two arguments then both should be used\n            attrsToPass = props;\n            propsToUse = oldProps;\n        }\n\n        var clipType = conf.selfContainedContextHandler;\n        if (propsToUse.hasOwnProperty(\"type\")) {\n            clipType = propsToUse.type;\n        }\n\n        if (!propsToUse.hasOwnProperty('html') && (clipType === \"iframe\" || clipType === \"openiframe\")) {\n            var _ret;\n\n            helper.error('Self Contained Incident expects the html key on its constructor properties which is missing');\n            return _ret = false, _possibleConstructorReturn(_this, _ret);\n        }\n\n        if (!propsToUse.hasOwnProperty('css') && clipType === \"iframe\") {\n            var _ret2;\n\n            helper.error('Self Contained Incident expects the css key on its constructor properties which is missing');\n            return _ret2 = false, _possibleConstructorReturn(_this, _ret2);\n        }\n\n        if (!propsToUse.hasOwnProperty('host')) {\n            var _ret3;\n\n            helper.error('Self Contained Incident expects the host key on its constructor properties which is missing');\n            return _ret3 = false, _possibleConstructorReturn(_this, _ret3);\n        }\n\n        var ContextHanlder = null;\n        if (clipType === 'closed') {\n            if (document.head.createShadowRoot || document.head.attachShadow) {\n                ContextHanlder = WebComponentContextHandler;\n            } else {\n                ContextHanlder = IframeContextHandler;\n            }\n        } else if (clipType === \"plain\") {\n            ContextHanlder = PlainContextHandler;\n        } else {\n            var _ret4;\n\n            helper.error('Clip type ' + clipType + ' is not supported');\n            return _ret4 = false, _possibleConstructorReturn(_this, _ret4);\n        }\n\n        var contextHanlder = new ContextHanlder(propsToUse);\n\n        var _this = _possibleConstructorReturn(this, (Clip.__proto__ || Object.getPrototypeOf(Clip)).call(this, attrsToPass, propsToUse));\n\n        _this.ownContext = contextHanlder.context;\n        _this.iframe = contextHanlder.iframeElement;\n\n        _this.forceExportIncidents = true;\n        return _this;\n    }\n\n    _createClass(Clip, [{\n        key: 'renderHTML',\n        value: function renderHTML() {}\n    }, {\n        key: 'renderCSS',\n        value: function renderCSS() {}\n    }, {\n        key: 'ready',\n        value: function ready() {\n            this.stop();\n            this.setCurrentMillisecond(0);\n            this.recalcState(0);\n            this.restore();\n        }\n    }, {\n        key: 'rootElement',\n        get: function get() {\n            return this.ownContext.clipContainer;\n        }\n    }]);\n\n    return Clip;\n}(ExtendableClip);\n\nmodule.exports = Clip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCGroup.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCIChannel.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCIChannel.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Helper = __webpack_require__(/*! ../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar Channel = __webpack_require__(/*! ../../_Channels/Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/Channel.js\");\nvar _sortBy = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.sortby/index.js */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\");\nvar _filter = __webpack_require__(/*! ../../../lodash-custom-build/modularize/lodash.filter/index.js */ \"../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\");\n\nvar SCIChannel = function (_Channel) {\n    _inherits(SCIChannel, _Channel);\n\n    function SCIChannel() {\n        _classCallCheck(this, SCIChannel);\n\n        return _possibleConstructorReturn(this, (SCIChannel.__proto__ || Object.getPrototypeOf(SCIChannel)).apply(this, arguments));\n    }\n\n    _createClass(SCIChannel, [{\n        key: 'onInitialise',\n\n        /*\n        this.incidents is a collection of {incident, id, millisecond} objects always kept in order\n            from lower to higher millisecond\n        this.incidetnsById is an index of the incidents kept by id (this.incidents[incident-id] = Incident)\n        */\n        value: function onInitialise() {\n            this.incidents = [];\n            this.incidentsById = {};\n        }\n    }, {\n        key: '_resize',\n        value: function _resize(durationFraction) {\n            for (var i = 0; i < this.incidents.length; i++) {\n                this.incidents[i].millisecond = this.incidents[i].millisecond * durationFraction;\n            }\n        }\n\n        /**\n         * On this method the user defines the specific rules that apply on the plugin itself and on the Incidents of the plugin itself\n         * The method should either return {result: true} or {result: false, errors:[{error-object}]}, where error-object has the structure:\n         *  {\n                incident: // reference to the Incident object that has bee discarded\n                error: // text\n            }\n        * @param {array} incidents - a colleciton of all incidents to be added on the form:\n        * \n            {\n                id\n                millisecond\n                incident\n            }\n        * @returns {object} - \n        * either:\n            {\n                result:true,\n                execute: // a function that when executed it will add the Incidents on the Channels\n            }\n            or\n            {\n                result: false,\n                errors\n            }\n        */\n\n    }, {\n        key: 'checkAddition',\n        value: function checkAddition(incidents) {\n            var errors = [];\n            var candidateIncidentsById = {};\n\n            for (var i = 0; i < incidents.length; i++) {\n                candidateIncidentsById[incidents[i].id] = incidents[i].incident;\n                if (this.incidentsById.hasOwnProperty(incidents[i].id)) {\n                    helper.error('Incident with the id ' + incidents[i].id + ' already exists. Addition is rejected.');\n                    errors.push({\n                        type: 'Already existing id',\n                        meta: {\n                            id: incidents[i].id\n                        }\n                    });\n                }\n            }\n\n            if (errors.length > 0) {\n                return {\n                    result: false,\n                    errors: errors\n                };\n            }\n\n            var that = this;\n            var exec = function exec() {\n                that.incidentsById = Object.assign(that.incidentsById, candidateIncidentsById);\n                that.incidents = that.incidents.concat(incidents);\n                that.incidents = _sortBy(that.incidents, [function (laneItem) {\n                    return laneItem.millisecond;\n                }]);\n                for (var _i = 0; _i < incidents.length; _i++) {\n                    incidents[_i].incident.goTo(that.runTimeInfo.currentMillisecond - incidents[_i].millisecond);\n                }\n            };\n\n            return { result: true, execute: exec };\n        }\n\n        /**\n        @param {array} incidentsArray - A collection of the Incidetns to get edited in the form:\n        {\n            id\n            millisecond\n            incident\n        }\n        @param {int} millisecondsDelta- the delta of the star point of the provided incidents\n        */\n\n    }, {\n        key: 'checkEdit',\n        value: function checkEdit(incidentsArray, millisecondsDelta) {\n            var that = this;\n            var exec = function exec() {\n                for (var i = 0; i < incidentsArray.length; i++) {\n                    for (var j = 0; j < that.incidents.length; j++) {\n                        if (that.incidents[j].id === incidentsArray[i].id) {\n                            that.incidents[j].millisecond += millisecondsDelta;\n                            that.incidents[i].incident.goTo(that.runTimeInfo.currentMillisecond - that.incidents[i].millisecond);\n                            break;\n                        }\n                    }\n                }\n\n                that.incidents = _sortBy(that.incidents, [function (laneItem) {\n                    return laneItem.millisecond;\n                }]);\n            };\n\n            return { result: true, execute: exec };\n        }\n    }, {\n        key: 'checkDelete',\n        value: function checkDelete(incidentsArray) {\n            var that = this;\n            var incidentIds = [];\n            for (var i = 0; i < incidentsArray.length; i++) {\n                incidentIds.push(incidentsArray[i].id);\n            }\n\n            var exec = function exec() {\n                var newIncidents = _filter(that.incidents, function (incident) {\n                    return incidentIds.indexOf(incident.id) === -1;\n                });\n\n                that.incidents = newIncidents;\n                for (var _i2 = 0; _i2 < incidentIds.length; _i2++) {\n                    delete that.incidentsById[incidentIds[_i2]];\n                }\n            };\n\n            return { result: true, execute: exec };\n        }\n\n        /**\n        * @param {array} incidents - [{id, start, end, startDelta}] \n        */\n\n    }, {\n        key: 'checkResizedIncidents',\n        value: function checkResizedIncidents(incidents) {\n            var that = this;\n            var exec = function exec() {\n                for (var i = 0; i < incidents.length; i++) {\n                    for (var j = 0; j < that.incidents.length; j++) {\n                        if (that.incidents[j].id === incidents[i].id) {\n                            that.incidents[j].millisecond += incidents[i].startDelta;\n                            that.incidents[i].incident.goTo(that.runTimeInfo.currentMillisecond - that.incidents[i].millisecond);\n                            break;\n                        }\n                    }\n                }\n\n                that.incidents = _sortBy(that.incidents, [function (laneItem) {\n                    return laneItem.millisecond;\n                }]);\n            };\n\n            return { result: true, execute: exec };\n        }\n\n        /**\n         @param {int} from - the millisecond to start from\n         @param {int} to - the millisecond to go to\n         */\n\n    }, {\n        key: 'moveTo',\n        value: function moveTo(from, to) {\n            for (var i = 0; i < this.incidents.length; i++) {\n                this.incidents[i].incident.goTo(to - this.incidents[i].millisecond, { previousStop: from - this.incidents[i].millisecond });\n            }\n        }\n    }]);\n\n    return SCIChannel;\n}(Channel);\n\nmodule.exports = SCIChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCIChannel.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/IframeContextHandler.js":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/IframeContextHandler.js ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\niframe[seamless]{\n    background-color: transparent;\n    border: 0px none transparent;\n    padding: 0px;\n    overflow: hidden;\n}\n\nmight need more work for IE. See here: https://stackoverflow.com/a/29209248\n*/\n\nvar Helper = __webpack_require__(/*! ../../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../../../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\n\nvar IframeContextHandler = function () {\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n    */\n    function IframeContextHandler() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, IframeContextHandler);\n\n        if (!helper.isObject(props)) {\n            helper.error('ContextHandler expects an object on its constructor. ' + (typeof props === 'undefined' ? 'undefined' : _typeof(props)) + ' passed');\n            return false;\n        }\n\n        if (!props.hasOwnProperty('html')) {\n            helper.error('ContextHandler expects the html key on its constructor properties which is missing');\n            return false;\n        }\n\n        if (!props.hasOwnProperty('css')) {\n            helper.error('ContextHandler expects the css key on its constructor properties which is missing');\n            return false;\n        }\n\n        var initParams = props.initParams;\n        if (!props.hasOwnProperty('initParams')) {\n            helper.info('ContextHandler got null initParams');\n            initParams = {};\n        }\n\n        if (!props.hasOwnProperty('host')) {\n            helper.error('ContextHandler expects the host key on its constructor properties which is missing');\n            return false;\n        }\n\n        this.isDOM = true;\n\n        var ownerDocument = props.host.ownerDocument;\n\n        if (!ownerDocument.getElementById(\"@kissmybutton/motorcortex/iframeContextHandler/css\")) {\n            var seamlessCSS = '\\n            iframe[seamless]{\\n                background-color: transparent;\\n                border: 0px none transparent;\\n                padding: 0px;\\n                overflow: hidden;\\n            }\\n            ';\n            var iframesCSS = ownerDocument.createElement('style');\n            iframesCSS.id = \"@kissmybutton/motorcortex/iframeContextHandler/css\";\n            iframesCSS.type = 'text/css';\n            var Head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];\n            if (iframesCSS.styleSheet) {\n                iframesCSS.styleSheet.cssText = seamlessCSS;\n            } else {\n                iframesCSS.appendChild(ownerDocument.createTextNode(seamlessCSS));\n            }\n\n            Head.appendChild(iframesCSS);\n        }\n\n        // Create an iframe:\n        var iframe = ownerDocument.createElement('iframe');\n        props.host.appendChild(iframe);\n        iframe.setAttribute(\"seamless\", \"seamless\");\n        if (props.hasOwnProperty('containerParams')) {\n            if (props.containerParams.hasOwnProperty('width')) {\n                iframe.setAttribute('width', props.containerParams.width);\n            }\n            if (props.containerParams.hasOwnProperty('height')) {\n                iframe.setAttribute('height', props.containerParams.height);\n            }\n        }\n        // Initialise the iframe\n        iframe.src = '';\n        // Put it in the document (but hidden):\n        var iframeDocument = iframe.contentWindow || iframe.contentDocument;\n        if (iframeDocument.document) {\n            iframeDocument = iframeDocument.document;\n        }\n\n        iframeDocument.write(helper.renderTemplate(props.html, { params: props.initParams }));\n\n        var bodyFixCSS = '\\n        body{\\n            padding:0;\\n            margin:0;\\n        }\\n        ';\n\n        var styleTag = iframeDocument.createElement('style');\n        styleTag.type = 'text/css';\n        if (styleTag.styleSheet) {\n            styleTag.styleSheet.cssText = helper.renderTemplate(props.css, { params: props.initParams }) + bodyFixCSS;\n        } else {\n            styleTag.appendChild(ownerDocument.createTextNode(props.css + bodyFixCSS));\n        }\n\n        var head = iframeDocument.head || iframeDocument.getElementsByTagName('head')[0];\n        head.appendChild(styleTag);\n\n        if (props.hasOwnProperty('fonts')) {\n            for (var i = 0; i < props.fonts.length; i++) {\n                var theFont = props.fonts[i];\n                if (theFont.type === \"google-font\") {\n                    var fontTag = iframeDocument.createElement('link');\n                    fontTag.setAttribute('rel', 'stylesheet');\n                    fontTag.setAttribute('src', theFont.src);\n                    head.appendChild(fontTag);\n                }\n            }\n        }\n\n        this.rootElement = iframe;\n\n        this.context = {\n            document: iframeDocument,\n            window: iframe.contentWindow || iframe,\n            clipContainer: iframe,\n            rootElement: iframeDocument.body,\n            unmount: function unmount() {\n                props.host.removeChild(iframe);\n            },\n            getElements: this.getElements.bind(this),\n            getMCID: this.getMCID.bind(this),\n            setMCID: this.setMCID.bind(this),\n            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n            getElementByMCID: this.getElementByMCID.bind(this)\n        };\n\n        iframeDocument.close();\n\n        this.elementsByMCID = {};\n    }\n\n    _createClass(IframeContextHandler, [{\n        key: 'getElementByMCID',\n        value: function getElementByMCID(mcid) {\n            if (this.elementsByMCID.hasOwnProperty(mcid)) {\n                return this.elementsByMCID[mcid];\n            } else {\n                var element = this.context.document.querySelector(this.getElementSelectorByMCID(mcid));\n                this.elementsByMCID[mcid] = element;\n                return element;\n            }\n        }\n    }, {\n        key: 'getElements',\n        value: function getElements(selector) {\n            return Array.from(this.context.document.querySelectorAll(selector));\n        }\n    }, {\n        key: 'getMCID',\n        value: function getMCID(element) {\n            return element.getAttribute(conf.elements_data_attribute_name);\n        }\n    }, {\n        key: 'setMCID',\n        value: function setMCID(element, mcid) {\n            element.setAttribute(conf.elements_data_attribute_name, mcid);\n        }\n    }, {\n        key: 'getElementSelectorByMCID',\n        value: function getElementSelectorByMCID(mcid) {\n            return '[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]';\n        }\n    }]);\n\n    return IframeContextHandler;\n}();\n\nmodule.exports = IframeContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb3JlUGx1Z2lucy9TZWxmQ29udGFpbmVkSW5jaWRlbnRzL2hlbHBlcnMvSWZyYW1lQ29udGV4dEhhbmRsZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb3JlUGx1Z2lucy9TZWxmQ29udGFpbmVkSW5jaWRlbnRzL2hlbHBlcnMvSWZyYW1lQ29udGV4dEhhbmRsZXIuanM/Nzg1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLypcbmlmcmFtZVtzZWFtbGVzc117XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiAwcHggbm9uZSB0cmFuc3BhcmVudDtcbiAgICBwYWRkaW5nOiAwcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxubWlnaHQgbmVlZCBtb3JlIHdvcmsgZm9yIElFLiBTZWUgaGVyZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI5MjA5MjQ4XG4qL1xuXG52YXIgSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vX2NvcmVVdGlscy9IZWxwZXInKTtcbnZhciBoZWxwZXIgPSBuZXcgSGVscGVyKCk7XG52YXIgY29uZiA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbmZpZ3VyYXRpb24vZ2VuZXJhbENvbmYnKTtcblxudmFyIElmcmFtZUNvbnRleHRIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyAtIGFuIG9iamVjdCB0aGF0IHNob3VsZCBjb250YWluIGFsbCBvZiB0aGUgZm9sbG93aW5nIGtleXM6XG4gICAgICogLSBodG1sICh0aGUgaHRtbCB0ZW1wbGF0ZSB0byByZW5kZXIpXG4gICAgICogLSBjc3MgKHRoZSBjc3MgdGVtcGxhdGUgb2YgdGhlIGlzb2xhdGVkIHRyZWUpXG4gICAgICogLSBpbml0UGFyYW1zIChvcHRpb25hbCAvIHRoZSBpbml0aWFsaXNhdGlvbiBwYXJhbWV0ZXJlcyB0aGF0IHdpbGwgYmUgcGFzc2VkIGJvdGggb24gdGhlIGNzcyBhbmQgdGhlIGh0bWwgdGVtcGxhdGVzIGluIG9yZGVyIHRvIHJlbmRlcilcbiAgICAgKiAtIGhvc3QgKGFuIEVsZW1lbnQgb2JqZWN0IHRoYXQgd2lsbCBob3N0IHRoZSBpc29sYXRlZCB0cmVlKVxuICAgICAqIC0gY29udGFpbmVyUGFyYW1zIChhbiBvYmplY3QgdGhhdCBob2xkcyBwYXJhbWV0ZXJzIHRvIGFmZmVjdCB0aGUgY29udGFpbmVyIG9mIHRoZSBpc29sYXRlZCB0cmVlLCBlLmcuIHdpZHRoLCBoZWlnaHQgZXRjKVxuICAgICovXG4gICAgZnVuY3Rpb24gSWZyYW1lQ29udGV4dEhhbmRsZXIoKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElmcmFtZUNvbnRleHRIYW5kbGVyKTtcblxuICAgICAgICBpZiAoIWhlbHBlci5pc09iamVjdChwcm9wcykpIHtcbiAgICAgICAgICAgIGhlbHBlci5lcnJvcignQ29udGV4dEhhbmRsZXIgZXhwZWN0cyBhbiBvYmplY3Qgb24gaXRzIGNvbnN0cnVjdG9yLiAnICsgKHR5cGVvZiBwcm9wcyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocHJvcHMpKSArICcgcGFzc2VkJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KCdodG1sJykpIHtcbiAgICAgICAgICAgIGhlbHBlci5lcnJvcignQ29udGV4dEhhbmRsZXIgZXhwZWN0cyB0aGUgaHRtbCBrZXkgb24gaXRzIGNvbnN0cnVjdG9yIHByb3BlcnRpZXMgd2hpY2ggaXMgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnY3NzJykpIHtcbiAgICAgICAgICAgIGhlbHBlci5lcnJvcignQ29udGV4dEhhbmRsZXIgZXhwZWN0cyB0aGUgY3NzIGtleSBvbiBpdHMgY29uc3RydWN0b3IgcHJvcGVydGllcyB3aGljaCBpcyBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5pdFBhcmFtcyA9IHByb3BzLmluaXRQYXJhbXM7XG4gICAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkoJ2luaXRQYXJhbXMnKSkge1xuICAgICAgICAgICAgaGVscGVyLmluZm8oJ0NvbnRleHRIYW5kbGVyIGdvdCBudWxsIGluaXRQYXJhbXMnKTtcbiAgICAgICAgICAgIGluaXRQYXJhbXMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkoJ2hvc3QnKSkge1xuICAgICAgICAgICAgaGVscGVyLmVycm9yKCdDb250ZXh0SGFuZGxlciBleHBlY3RzIHRoZSBob3N0IGtleSBvbiBpdHMgY29uc3RydWN0b3IgcHJvcGVydGllcyB3aGljaCBpcyBtaXNzaW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlzRE9NID0gdHJ1ZTtcblxuICAgICAgICB2YXIgb3duZXJEb2N1bWVudCA9IHByb3BzLmhvc3Qub3duZXJEb2N1bWVudDtcblxuICAgICAgICBpZiAoIW93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJAa2lzc215YnV0dG9uL21vdG9yY29ydGV4L2lmcmFtZUNvbnRleHRIYW5kbGVyL2Nzc1wiKSkge1xuICAgICAgICAgICAgdmFyIHNlYW1sZXNzQ1NTID0gJ1xcbiAgICAgICAgICAgIGlmcmFtZVtzZWFtbGVzc117XFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICAgICAgICAgICAgICBib3JkZXI6IDBweCBub25lIHRyYW5zcGFyZW50O1xcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7XFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICc7XG4gICAgICAgICAgICB2YXIgaWZyYW1lc0NTUyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgIGlmcmFtZXNDU1MuaWQgPSBcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvaWZyYW1lQ29udGV4dEhhbmRsZXIvY3NzXCI7XG4gICAgICAgICAgICBpZnJhbWVzQ1NTLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICAgICAgdmFyIEhlYWQgPSBvd25lckRvY3VtZW50LmhlYWQgfHwgb3duZXJEb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgICAgICAgaWYgKGlmcmFtZXNDU1Muc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgICAgIGlmcmFtZXNDU1Muc3R5bGVTaGVldC5jc3NUZXh0ID0gc2VhbWxlc3NDU1M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmcmFtZXNDU1MuYXBwZW5kQ2hpbGQob3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzZWFtbGVzc0NTUykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBIZWFkLmFwcGVuZENoaWxkKGlmcmFtZXNDU1MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuIGlmcmFtZTpcbiAgICAgICAgdmFyIGlmcmFtZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgIHByb3BzLmhvc3QuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZShcInNlYW1sZXNzXCIsIFwic2VhbWxlc3NcIik7XG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnY29udGFpbmVyUGFyYW1zJykpIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5jb250YWluZXJQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3dpZHRoJykpIHtcbiAgICAgICAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHByb3BzLmNvbnRhaW5lclBhcmFtcy53aWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcHMuY29udGFpbmVyUGFyYW1zLmhhc093blByb3BlcnR5KCdoZWlnaHQnKSkge1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHByb3BzLmNvbnRhaW5lclBhcmFtcy5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEluaXRpYWxpc2UgdGhlIGlmcmFtZVxuICAgICAgICBpZnJhbWUuc3JjID0gJyc7XG4gICAgICAgIC8vIFB1dCBpdCBpbiB0aGUgZG9jdW1lbnQgKGJ1dCBoaWRkZW4pOlxuICAgICAgICB2YXIgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdyB8fCBpZnJhbWUuY29udGVudERvY3VtZW50O1xuICAgICAgICBpZiAoaWZyYW1lRG9jdW1lbnQuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lRG9jdW1lbnQuZG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZnJhbWVEb2N1bWVudC53cml0ZShoZWxwZXIucmVuZGVyVGVtcGxhdGUocHJvcHMuaHRtbCwgeyBwYXJhbXM6IHByb3BzLmluaXRQYXJhbXMgfSkpO1xuXG4gICAgICAgIHZhciBib2R5Rml4Q1NTID0gJ1xcbiAgICAgICAgYm9keXtcXG4gICAgICAgICAgICBwYWRkaW5nOjA7XFxuICAgICAgICAgICAgbWFyZ2luOjA7XFxuICAgICAgICB9XFxuICAgICAgICAnO1xuXG4gICAgICAgIHZhciBzdHlsZVRhZyA9IGlmcmFtZURvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHN0eWxlVGFnLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICBpZiAoc3R5bGVUYWcuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgc3R5bGVUYWcuc3R5bGVTaGVldC5jc3NUZXh0ID0gaGVscGVyLnJlbmRlclRlbXBsYXRlKHByb3BzLmNzcywgeyBwYXJhbXM6IHByb3BzLmluaXRQYXJhbXMgfSkgKyBib2R5Rml4Q1NTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVUYWcuYXBwZW5kQ2hpbGQob3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShwcm9wcy5jc3MgKyBib2R5Rml4Q1NTKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGVhZCA9IGlmcmFtZURvY3VtZW50LmhlYWQgfHwgaWZyYW1lRG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZVRhZyk7XG5cbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KCdmb250cycpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmZvbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoZUZvbnQgPSBwcm9wcy5mb250c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodGhlRm9udC50eXBlID09PSBcImdvb2dsZS1mb250XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvbnRUYWcgPSBpZnJhbWVEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRUYWcuc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xuICAgICAgICAgICAgICAgICAgICBmb250VGFnLnNldEF0dHJpYnV0ZSgnc3JjJywgdGhlRm9udC5zcmMpO1xuICAgICAgICAgICAgICAgICAgICBoZWFkLmFwcGVuZENoaWxkKGZvbnRUYWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQgPSBpZnJhbWU7XG5cbiAgICAgICAgdGhpcy5jb250ZXh0ID0ge1xuICAgICAgICAgICAgZG9jdW1lbnQ6IGlmcmFtZURvY3VtZW50LFxuICAgICAgICAgICAgd2luZG93OiBpZnJhbWUuY29udGVudFdpbmRvdyB8fCBpZnJhbWUsXG4gICAgICAgICAgICBjbGlwQ29udGFpbmVyOiBpZnJhbWUsXG4gICAgICAgICAgICByb290RWxlbWVudDogaWZyYW1lRG9jdW1lbnQuYm9keSxcbiAgICAgICAgICAgIHVubW91bnQ6IGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMuaG9zdC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRzOiB0aGlzLmdldEVsZW1lbnRzLmJpbmQodGhpcyksXG4gICAgICAgICAgICBnZXRNQ0lEOiB0aGlzLmdldE1DSUQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHNldE1DSUQ6IHRoaXMuc2V0TUNJRC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lEOiB0aGlzLmdldEVsZW1lbnRTZWxlY3RvckJ5TUNJRC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZ2V0RWxlbWVudEJ5TUNJRDogdGhpcy5nZXRFbGVtZW50QnlNQ0lELmJpbmQodGhpcylcbiAgICAgICAgfTtcblxuICAgICAgICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudHNCeU1DSUQgPSB7fTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSWZyYW1lQ29udGV4dEhhbmRsZXIsIFt7XG4gICAgICAgIGtleTogJ2dldEVsZW1lbnRCeU1DSUQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudEJ5TUNJRChtY2lkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c0J5TUNJRC5oYXNPd25Qcm9wZXJ0eShtY2lkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzQnlNQ0lEW21jaWRdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuY29udGV4dC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lEKG1jaWQpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzQnlNQ0lEW21jaWRdID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0RWxlbWVudHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudHMoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY29udGV4dC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldE1DSUQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TUNJRChlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoY29uZi5lbGVtZW50c19kYXRhX2F0dHJpYnV0ZV9uYW1lKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2V0TUNJRCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNQ0lEKGVsZW1lbnQsIG1jaWQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGNvbmYuZWxlbWVudHNfZGF0YV9hdHRyaWJ1dGVfbmFtZSwgbWNpZCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEVsZW1lbnRTZWxlY3RvckJ5TUNJRCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbGVtZW50U2VsZWN0b3JCeU1DSUQobWNpZCkge1xuICAgICAgICAgICAgcmV0dXJuICdbJyArIGNvbmYuZWxlbWVudHNfZGF0YV9hdHRyaWJ1dGVfbmFtZSArICc9XCInICsgbWNpZCArICdcIl0nO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIElmcmFtZUNvbnRleHRIYW5kbGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElmcmFtZUNvbnRleHRIYW5kbGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/IframeContextHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/PlainContextHandler.js":
/*!************************************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/PlainContextHandler.js ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Helper = __webpack_require__(/*! ../../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../../../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\n\nvar PlainContextHandler = function () {\n    function PlainContextHandler() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, PlainContextHandler);\n\n        if (!helper.isObject(props)) {\n            helper.error('ContextHandler expects an object on its constructor. ' + (typeof props === 'undefined' ? 'undefined' : _typeof(props)) + ' passed');\n            return false;\n        }\n\n        if (!props.hasOwnProperty('host')) {\n            helper.error('ContextHandler expects the host key on its constructor properties which is missing');\n            return false;\n        }\n\n        var ownerDocument = props.host.ownerDocument;\n        var initParams = props.initParams;\n        if (!props.hasOwnProperty('initParams')) {\n            helper.info('ContextHandler got null initParams');\n            initParams = {};\n        }\n\n        if (props.hasOwnProperty('html')) {\n            props.host.innerHTML = helper.renderTemplate(props.html, { params: initParams });\n        }\n\n        if (props.hasOwnProperty('css')) {\n            var styleTag = ownerDocument.createElement('style');\n            styleTag.type = 'text/css';\n            if (styleTag.styleSheet) {\n                styleTag.styleSheet.cssText = helper.renderTemplate(props.css, { params: initParams });\n            } else {\n                styleTag.appendChild(ownerDocument.createTextNode(props.css));\n            }\n            var head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];\n            head.appendChild(styleTag);\n        }\n\n        this.isDOM = true;\n        this.rootElement = props.host;\n\n        this.context = {\n            document: ownerDocument,\n            window: ownerDocument.defaultView,\n            clipContainer: this.rootElement,\n            rootElement: props.host,\n            unmount: function unmount() {\n                props.host.innerHTML = \"\";\n            },\n            getElements: this.getElements.bind(this),\n            getMCID: this.getMCID.bind(this),\n            setMCID: this.setMCID.bind(this),\n            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n            getElementByMCID: this.getElementByMCID.bind(this)\n        };\n\n        this.elementsByMCID = {};\n    }\n\n    _createClass(PlainContextHandler, [{\n        key: 'getElementByMCID',\n        value: function getElementByMCID(mcid) {\n            if (this.elementsByMCID.hasOwnProperty(mcid)) {\n                return this.elementsByMCID[mcid];\n            } else {\n                var element = this.context.document.querySelector(this.getElementSelectorByMCID(mcid));\n                this.elementsByMCID[mcid] = element;\n                return element;\n            }\n        }\n    }, {\n        key: 'getElements',\n        value: function getElements(selector) {\n            return Array.from(this.context.rootElement.querySelectorAll(selector));\n        }\n    }, {\n        key: 'getMCID',\n        value: function getMCID(element) {\n            return element.getAttribute(conf.elements_data_attribute_name);\n        }\n    }, {\n        key: 'setMCID',\n        value: function setMCID(element, mcid) {\n            element.setAttribute(conf.elements_data_attribute_name, mcid);\n        }\n    }, {\n        key: 'getElementSelectorByMCID',\n        value: function getElementSelectorByMCID(mcid) {\n            return '[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]';\n        }\n    }]);\n\n    return PlainContextHandler;\n}();\n\nmodule.exports = PlainContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb3JlUGx1Z2lucy9TZWxmQ29udGFpbmVkSW5jaWRlbnRzL2hlbHBlcnMvUGxhaW5Db250ZXh0SGFuZGxlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleC9kaXN0L2NvcmVQbHVnaW5zL1NlbGZDb250YWluZWRJbmNpZGVudHMvaGVscGVycy9QbGFpbkNvbnRleHRIYW5kbGVyLmpzP2FmNjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi9fY29yZVV0aWxzL0hlbHBlcicpO1xudmFyIGhlbHBlciA9IG5ldyBIZWxwZXIoKTtcbnZhciBjb25mID0gcmVxdWlyZSgnLi4vLi4vLi4vY29uZmlndXJhdGlvbi9nZW5lcmFsQ29uZicpO1xuXG52YXIgUGxhaW5Db250ZXh0SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQbGFpbkNvbnRleHRIYW5kbGVyKCkge1xuICAgICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbGFpbkNvbnRleHRIYW5kbGVyKTtcblxuICAgICAgICBpZiAoIWhlbHBlci5pc09iamVjdChwcm9wcykpIHtcbiAgICAgICAgICAgIGhlbHBlci5lcnJvcignQ29udGV4dEhhbmRsZXIgZXhwZWN0cyBhbiBvYmplY3Qgb24gaXRzIGNvbnN0cnVjdG9yLiAnICsgKHR5cGVvZiBwcm9wcyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocHJvcHMpKSArICcgcGFzc2VkJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KCdob3N0JykpIHtcbiAgICAgICAgICAgIGhlbHBlci5lcnJvcignQ29udGV4dEhhbmRsZXIgZXhwZWN0cyB0aGUgaG9zdCBrZXkgb24gaXRzIGNvbnN0cnVjdG9yIHByb3BlcnRpZXMgd2hpY2ggaXMgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBwcm9wcy5ob3N0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBpbml0UGFyYW1zID0gcHJvcHMuaW5pdFBhcmFtcztcbiAgICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnaW5pdFBhcmFtcycpKSB7XG4gICAgICAgICAgICBoZWxwZXIuaW5mbygnQ29udGV4dEhhbmRsZXIgZ290IG51bGwgaW5pdFBhcmFtcycpO1xuICAgICAgICAgICAgaW5pdFBhcmFtcyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KCdodG1sJykpIHtcbiAgICAgICAgICAgIHByb3BzLmhvc3QuaW5uZXJIVE1MID0gaGVscGVyLnJlbmRlclRlbXBsYXRlKHByb3BzLmh0bWwsIHsgcGFyYW1zOiBpbml0UGFyYW1zIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KCdjc3MnKSkge1xuICAgICAgICAgICAgdmFyIHN0eWxlVGFnID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgc3R5bGVUYWcudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgICAgICBpZiAoc3R5bGVUYWcuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgICAgIHN0eWxlVGFnLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGhlbHBlci5yZW5kZXJUZW1wbGF0ZShwcm9wcy5jc3MsIHsgcGFyYW1zOiBpbml0UGFyYW1zIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZVRhZy5hcHBlbmRDaGlsZChvd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHByb3BzLmNzcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhlYWQgPSBvd25lckRvY3VtZW50LmhlYWQgfHwgb3duZXJEb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZVRhZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlzRE9NID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IHByb3BzLmhvc3Q7XG5cbiAgICAgICAgdGhpcy5jb250ZXh0ID0ge1xuICAgICAgICAgICAgZG9jdW1lbnQ6IG93bmVyRG9jdW1lbnQsXG4gICAgICAgICAgICB3aW5kb3c6IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgICAgICAgICBjbGlwQ29udGFpbmVyOiB0aGlzLnJvb3RFbGVtZW50LFxuICAgICAgICAgICAgcm9vdEVsZW1lbnQ6IHByb3BzLmhvc3QsXG4gICAgICAgICAgICB1bm1vdW50OiBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgICAgICAgICAgIHByb3BzLmhvc3QuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRFbGVtZW50czogdGhpcy5nZXRFbGVtZW50cy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZ2V0TUNJRDogdGhpcy5nZXRNQ0lELmJpbmQodGhpcyksXG4gICAgICAgICAgICBzZXRNQ0lEOiB0aGlzLnNldE1DSUQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRTZWxlY3RvckJ5TUNJRDogdGhpcy5nZXRFbGVtZW50U2VsZWN0b3JCeU1DSUQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRCeU1DSUQ6IHRoaXMuZ2V0RWxlbWVudEJ5TUNJRC5iaW5kKHRoaXMpXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5lbGVtZW50c0J5TUNJRCA9IHt9O1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhQbGFpbkNvbnRleHRIYW5kbGVyLCBbe1xuICAgICAgICBrZXk6ICdnZXRFbGVtZW50QnlNQ0lEJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRCeU1DSUQobWNpZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNCeU1DSUQuaGFzT3duUHJvcGVydHkobWNpZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c0J5TUNJRFttY2lkXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmNvbnRleHQuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmdldEVsZW1lbnRTZWxlY3RvckJ5TUNJRChtY2lkKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c0J5TUNJRFttY2lkXSA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEVsZW1lbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNvbnRleHQucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRNQ0lEJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1DSUQoZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKGNvbmYuZWxlbWVudHNfZGF0YV9hdHRyaWJ1dGVfbmFtZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldE1DSUQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TUNJRChlbGVtZW50LCBtY2lkKSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShjb25mLmVsZW1lbnRzX2RhdGFfYXR0cmlidXRlX25hbWUsIG1jaWQpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRFbGVtZW50U2VsZWN0b3JCeU1DSUQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudFNlbGVjdG9yQnlNQ0lEKG1jaWQpIHtcbiAgICAgICAgICAgIHJldHVybiAnWycgKyBjb25mLmVsZW1lbnRzX2RhdGFfYXR0cmlidXRlX25hbWUgKyAnPVwiJyArIG1jaWQgKyAnXCJdJztcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBQbGFpbkNvbnRleHRIYW5kbGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYWluQ29udGV4dEhhbmRsZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/PlainContextHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/WebComponentContextHandler.js":
/*!*******************************************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/WebComponentContextHandler.js ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\niframe[seamless]{\n    background-color: transparent;\n    border: 0px none transparent;\n    padding: 0px;\n    overflow: hidden;\n}\n\nmight need more work for IE. See here: https://stackoverflow.com/a/29209248\n*/\n\nvar Helper = __webpack_require__(/*! ../../../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../../../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\n\nvar WebComponentContextHandler = function () {\n    /**\n     * @param {object} props - an object that should contain all of the following keys:\n     * - html (the html template to render)\n     * - css (the css template of the isolated tree)\n     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)\n     * - host (an Element object that will host the isolated tree)\n     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)\n    */\n    function WebComponentContextHandler() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, WebComponentContextHandler);\n\n        if (!helper.isObject(props)) {\n            helper.error('ContextHandler expects an object on its constructor. ' + (typeof props === 'undefined' ? 'undefined' : _typeof(props)) + ' passed');\n            return false;\n        }\n\n        if (!props.hasOwnProperty('html')) {\n            helper.error('ContextHandler expects the html key on its constructor properties which is missing');\n            return false;\n        }\n\n        if (!props.hasOwnProperty('css')) {\n            helper.error('ContextHandler expects the css key on its constructor properties which is missing');\n            return false;\n        }\n\n        var initParams = props.initParams;\n        if (!props.hasOwnProperty('initParams')) {\n            helper.info('ContextHandler got null initParams');\n            initParams = {};\n        }\n\n        if (!props.hasOwnProperty('host')) {\n            helper.error('ContextHandler expects the host key on its constructor properties which is missing');\n            return false;\n        }\n\n        this.isDOM = true;\n\n        var ownerDocument = props.host.ownerDocument;\n\n        var shadow = props.host.attachShadow({ mode: 'closed' });\n        var wrapper = document.createElement('div');\n        if (props.hasOwnProperty('containerParams')) {\n            if (props.containerParams.hasOwnProperty('width')) {\n                wrapper.style.width = props.containerParams.width;\n            }\n            if (props.containerParams.hasOwnProperty('height')) {\n                wrapper.style.height = props.containerParams.height;\n            }\n        }\n        wrapper.innerHTML = helper.renderTemplate(props.html + '<slot></slot>', { params: props.initParams });\n        shadow.appendChild(wrapper);\n\n        var styleTag = document.createElement('style');\n        styleTag.type = 'text/css';\n        if (styleTag.styleSheet) {\n            styleTag.styleSheet.cssText = helper.renderTemplate(props.css, { params: props.initParams });\n        } else {\n            styleTag.appendChild(document.createTextNode(props.css));\n        }\n        shadow.appendChild(styleTag);\n\n        if (props.hasOwnProperty('fonts')) {\n            for (var i = 0; i < props.fonts.length; i++) {\n                var theFont = props.fonts[i];\n                if (theFont.type === \"google-font\") {\n                    var fontTag = document.createElement('link');\n                    fontTag.setAttribute('rel', 'stylesheet');\n                    fontTag.setAttribute('src', theFont.src);\n                    shadow.appendChild(fontTag);\n                }\n            }\n        }\n\n        wrapper.style.overflow = \"hidden\";\n\n        this.rootElement = wrapper;\n\n        this.context = {\n            document: document,\n            window: window,\n            clipContainer: this.rootElement,\n            rootElement: wrapper,\n            unmount: function unmount() {\n                props.host.removeChild(shadow);\n            },\n            getElements: this.getElements.bind(this),\n            getMCID: this.getMCID.bind(this),\n            setMCID: this.setMCID.bind(this),\n            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),\n            getElementByMCID: this.getElementByMCID.bind(this)\n        };\n\n        this.elementsByMCID = {};\n    }\n\n    _createClass(WebComponentContextHandler, [{\n        key: 'getElementByMCID',\n        value: function getElementByMCID(mcid) {\n            if (this.elementsByMCID.hasOwnProperty(mcid)) {\n                return this.elementsByMCID[mcid];\n            } else {\n                var element = this.context.rootElement.querySelector(this.getElementSelectorByMCID(mcid));\n                this.elementsByMCID[mcid] = element;\n                return element;\n            }\n        }\n    }, {\n        key: 'getElements',\n        value: function getElements(selector) {\n            return Array.from(this.context.rootElement.querySelectorAll(selector));\n        }\n    }, {\n        key: 'getMCID',\n        value: function getMCID(element) {\n            return element.getAttribute(conf.elements_data_attribute_name);\n        }\n    }, {\n        key: 'setMCID',\n        value: function setMCID(element, mcid) {\n            element.setAttribute(conf.elements_data_attribute_name, mcid);\n        }\n    }, {\n        key: 'getElementSelectorByMCID',\n        value: function getElementSelectorByMCID(mcid) {\n            return '[' + conf.elements_data_attribute_name + '=\"' + mcid + '\"]';\n        }\n    }]);\n\n    return WebComponentContextHandler;\n}();\n\nmodule.exports = WebComponentContextHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/helpers/WebComponentContextHandler.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/main.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/main.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Clip = __webpack_require__(/*! ./SCGroup */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCGroup.js\");\nvar Channel = __webpack_require__(/*! ./SCIChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCIChannel.js\");\nvar ClipFromDefinition = __webpack_require__(/*! ./ClipFromDefinition */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ClipFromDefinition.js\");\n\nmodule.exports = {\n    npm_name: \"@kissmybutton/self-contained-incidents\",\n    incidents: [{\n        exportable: Clip,\n        name: \"Clip\"\n    }],\n    channel: Channel\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb3JlUGx1Z2lucy9TZWxmQ29udGFpbmVkSW5jaWRlbnRzL21haW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BraXNzbXlidXR0b24vbW90b3Jjb3J0ZXgvZGlzdC9jb3JlUGx1Z2lucy9TZWxmQ29udGFpbmVkSW5jaWRlbnRzL21haW4uanM/OWFjOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDbGlwID0gcmVxdWlyZSgnLi9TQ0dyb3VwJyk7XG52YXIgQ2hhbm5lbCA9IHJlcXVpcmUoJy4vU0NJQ2hhbm5lbCcpO1xudmFyIENsaXBGcm9tRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vQ2xpcEZyb21EZWZpbml0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5wbV9uYW1lOiBcIkBraXNzbXlidXR0b24vc2VsZi1jb250YWluZWQtaW5jaWRlbnRzXCIsXG4gICAgaW5jaWRlbnRzOiBbe1xuICAgICAgICBleHBvcnRhYmxlOiBDbGlwLFxuICAgICAgICBuYW1lOiBcIkNsaXBcIlxuICAgIH1dLFxuICAgIGNoYW5uZWw6IENoYW5uZWxcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/main.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/main.js":
/*!**************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/main.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Channel = __webpack_require__(/*! ./_Channels/Channel */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/Channel.js\");\nvar Group = __webpack_require__(/*! ./_BaseClasses/Group */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Group.js\");\nvar Incident = __webpack_require__(/*! ./_BaseClasses/Incident */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/Incident.js\");\nvar TimedIncident = __webpack_require__(/*! ./_BaseClasses/TimedIncident */ \"../node_modules/@kissmybutton/motorcortex/dist/_BaseClasses/TimedIncident.js\");\nvar Helper = __webpack_require__(/*! ./_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");var helper = new Helper();\nvar AttributeChannel = __webpack_require__(/*! ./_Channels/_Attribute/AttributeChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/_Channels/_Attribute/AttributeChannel.js\");\nvar ClipFromDefinition = __webpack_require__(/*! ./corePlugins/SelfContainedIncidents/ClipFromDefinition */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ClipFromDefinition.js\");\nvar SelfContainedChannel = __webpack_require__(/*! ./corePlugins/SelfContainedIncidents/SCIChannel */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/SCIChannel.js\");\nvar pipeMessages = __webpack_require__(/*! ./configuration/pipesConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/pipesConf.js\");\n\nvar conf = __webpack_require__(/*! ./configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar Timer = __webpack_require__(/*! ./utils/Timer */ \"../node_modules/@kissmybutton/motorcortex/dist/utils/Timer.js\");\n\nvar checkPlugin = function checkPlugin(main) {\n    if (main.hasOwnProperty('default')) {\n        main = main.default;\n    }\n\n    var plugin_name = main.npm_name;\n    var check = true;\n\n    if (!main.hasOwnProperty('incidents')) {\n        helper.error('Error on plugin ' + plugin_name + '. A plugin must expose at least one Incident.\\n        Exposed plugin Incidents should be defined on the \"incidents\" key of the main.js file.');\n        check = false;\n    }\n\n    if (!helper.isArray(main.incidents)) {\n        helper.error('Error on plugin ' + plugin_name + '. thePlugin exposed Incidents are defined on the \"incidents\" key of the main.js file in array format.\\n        Please refer to the documentation');\n        check = false;\n    } else {\n        for (var i = 0; i < main.incidents.length; i++) {\n            var exposedIncidentDefinition = main.incidents[i];\n            if (_typeof(exposedIncidentDefinition.exportable) === \"object\") {\n                if (exposedIncidentDefinition.exportable.hasOwnProperty('default')) {\n                    exposedIncidentDefinition.exportable = exposedIncidentDefinition.exportable.default;\n                }\n            }\n            if (!(exposedIncidentDefinition.exportable.prototype instanceof Incident)) {\n                helper.error('Error on plugin ' + plugin_name + '. Exportable Incidents by any plugin must extend one of the base classes provided by MotorCortex.\\n                ' + exposedIncidentDefinition.exportable.constructor.name + ' doesn\\'t.\\n                Please refer to documentation');\n                check = false;\n            }\n\n            if (!exposedIncidentDefinition.hasOwnProperty('name')) {\n                helper.error('Error on plugin ' + plugin_name + '. Exportable Incidents by any plugin must have the \"name\" key which defines the name of the exported Incident.\\n                Please refer to documentation');\n                check = false;\n            }\n\n            if (!exposedIncidentDefinition.hasOwnProperty('propTypes')) {\n                helper.log('Warning on plugin ' + plugin_name + '.\\n                It\\'s always good for plugins to define the supported propTypes of their exposed Incidents\\' supported properties.\\n                ' + exposedIncidentDefinition.exportable.constructor.name + ' doesn\\'t.\\n                Please refer to documentation', 'warning');\n            }\n        }\n    }\n\n    if (!main.hasOwnProperty('channel')) {\n        helper.error('Error on plugin ' + plugin_name + '. A plugin must always define its Channel on the \"channel\" key of the main.js file.\\n        It\\'s missing. Please refer to documentation');\n        check = false;\n    } else {\n        if (_typeof(main.channel) === \"object\") {\n            if (main.channel.hasOwnProperty('default')) {\n                main.channel = main.channel.default;\n            }\n        }\n    }\n\n    return check;\n};\n\n// plugin_name is the unique name of the plugin\nfunction loadPlugin(plugin) {\n    if (plugin.hasOwnProperty('default')) {\n        plugin = plugin.default;\n    }\n\n    if (!plugin.hasOwnProperty('npm_name')) {\n        plugin.npm_name = 'plugin_' + new Date().getTime();\n    }\n\n    if (!plugin.hasOwnProperty('channel')) {\n        plugin.channel = Channel;\n    }\n    if (!checkPlugin(plugin)) {\n        return false;\n    } else {\n        // thePlugin is the plugin object which will hold on its keys\n        // the names of the exposed Incidents of its. The keys of this object\n        // are going to be identical with the names of the classes exposed\n        var thePlugin = {};\n\n        if (plugin.hasOwnProperty('clip')) {\n            if (_typeof(plugin.clip) === \"object\") {\n                if (plugin.clip.hasOwnProperty('default')) {\n                    plugin.clip = plugin.clip.default;\n                }\n            }\n            Object.defineProperty(thePlugin, 'Clip', {\n                get: function get() {\n                    var WrapperClass = function WrapperClass(attrs, props) {\n                        _classCallCheck(this, WrapperClass);\n\n                        var instantiatedIncident = new plugin.clip(attrs, props);\n                        instantiatedIncident.plugin_channel_class = SelfContainedChannel;\n                        instantiatedIncident.mc_plugin_npm_name = '@kissmybutton/self-contained-incidents';\n\n                        return instantiatedIncident;\n                    };\n\n                    return WrapperClass;\n                }\n            });\n            // thePlugin.Clip = plugin.clip;\n        }\n\n        // for each of the exposed Incidents\n\n        var _loop = function _loop(i) {\n            var incidentClass = plugin.incidents[i].exportable;\n\n            // TODO hanlde the different css style isolation versions through the cssIsolation parameter of the containerParams of the incident\n\n            // dynamically assign getters on the Incident's name key of the thePlugin object\n            Object.defineProperty(thePlugin, plugin.incidents[i].name, {\n                get: function get() {\n                    // the getter will construct a wrapper class which on the constructor will instantiate an object of the\n                    // exposed class, set to it the plugin name and channel class parameters and return\n                    // it from the constructor\n                    var WrapperClass = function WrapperClass(attrs, props) {\n                        _classCallCheck(this, WrapperClass);\n\n                        var instantiatedIncident = new incidentClass(attrs, props);\n\n                        if (plugin.incidents[i].bypassChannel !== true) {\n                            // if the exportable incident has the flag bypassChannel the incident will be treated as motorcortex incident\n                            instantiatedIncident.plugin_channel_class = plugin.channel;\n                            instantiatedIncident.mc_plugin_npm_name = plugin.npm_name;\n                        }\n\n                        if (plugin.channel.type === \"attributes\" && (!props.hasOwnProperty('selector') || props.selector === null || props.selector === undefined) && plugin.incidents[i].bypassChannel !== true) {\n                            helper.error('You tried to instantiate an Incident of plugin ' + plugin.npm_name + ' without passing props.selector. This plugin uses the AttributeChannel and thus all of its incidents must \\n                                    be initialised with a valid props.selector.');\n                            return false;\n                        }\n\n                        // it's a good idea to both validate the props here before returning the new object\n                        // also is a good idea to create a Proxy for the instantiated Incident to prevent setting:\n                        // id, plugin_channel_class, mc_plugin_npm_name\n\n                        return instantiatedIncident;\n                    };\n\n                    ;\n\n                    return WrapperClass;\n                }\n            });\n        };\n\n        for (var i = 0; i < plugin.incidents.length; i++) {\n            _loop(i);\n        }\n        return thePlugin;\n    }\n}\n\nvar ProgrammaticIncidentPluginDefinition = __webpack_require__(/*! ./corePlugins/ProgrammaticIncidents/main.js */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/ProgrammaticIncidents/main.js\");\nvar ProgrammaticIncidentPlugin = loadPlugin(ProgrammaticIncidentPluginDefinition);\n\nvar SelfContainedIncidentsPluginDefinition = __webpack_require__(/*! ./corePlugins/SelfContainedIncidents/main.js */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/main.js\");\nvar SelfContainedIncidentsPlugin = loadPlugin(SelfContainedIncidentsPluginDefinition);\nvar ExtendableClip = __webpack_require__(/*! ./corePlugins/SelfContainedIncidents/ExtendableClip */ \"../node_modules/@kissmybutton/motorcortex/dist/corePlugins/SelfContainedIncidents/ExtendableClip.js\");\n\nvar TimeCapsule = __webpack_require__(/*! ./_coreUtils/TimeCapsule */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\");\n\nmodule.exports = {\n    Channel: Channel,\n    Group: Group,\n    Clip: SelfContainedIncidentsPlugin.Clip,\n    ClipFromDefinition: ClipFromDefinition,\n    Incident: Incident,\n    ProgrammaticIncident: ProgrammaticIncidentPlugin.ProgrammaticIncident,\n    DummyIncident: ProgrammaticIncidentPlugin.DummyIncident,\n    TimedIncident: TimedIncident,\n\n    _channels: {\n        'motor-cortex-js': Channel,\n        '@kissmybutton/programmatic-incidents': ProgrammaticIncidentPluginDefinition.channel,\n        '@kissmybutton/self-contained-incidents': SelfContainedIncidentsPluginDefinition.channel\n    },\n\n    // channels\n    AttributeChannel: AttributeChannel,\n\n    TimeCapsule: TimeCapsule,\n\n    conf: conf,\n    Timer: Timer,\n\n    ExtendableClip: ExtendableClip,\n\n    Helper: Helper,\n\n    loadPlugin: loadPlugin,\n\n    _GAIN_CHANGE: pipeMessages._GAIN_CHANGE\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/main.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/dist/utils/Timer.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/dist/utils/Timer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Helper = __webpack_require__(/*! ../_coreUtils/Helper */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/Helper.js\");\nvar helper = new Helper();\nvar conf = __webpack_require__(/*! ../configuration/generalConf */ \"../node_modules/@kissmybutton/motorcortex/dist/configuration/generalConf.js\");\nvar Draggabilly = __webpack_require__(/*! draggabilly */ \"../node_modules/draggabilly/draggabilly.js\");\nvar TimeCapsule = __webpack_require__(/*! ../_coreUtils/TimeCapsule */ \"../node_modules/@kissmybutton/motorcortex/dist/_coreUtils/TimeCapsule.js\");\nvar timeCapsule = new TimeCapsule();\nvar journey = null;\n\n/**\n * @classdesc\n * Timer's purpose is to provide an interface through which any TimedIncident (such as a Scene or a Clip)\n * can both privide info regarding their timing state but also provide an interface for interacting /\n * altering the timing of it\n */\n\nvar Timer = function () {\n    function Timer(props) {\n        _classCallCheck(this, Timer);\n\n        this.id = props.id || helper.getAnId();\n        this.cursor = document.getElementById('time-cursor');\n        this.leftSlot = document.getElementsByClassName('left-slot')[0];\n        this.rightSlot = document.getElementsByClassName('right-slot')[0];\n        this.playButton = document.getElementById('play-pause');\n        this.Incident = props.Incident;\n        this.subscribeToTimer();\n        this.subscribeToEvents();\n        this.afterRender();\n        this.previousTimestamp = 0;\n        this.previousIncidentState = 'idle';\n        this.width = props.width;\n        this.cursorWidth = props.cursorWidth || 10;\n    }\n\n    _createClass(Timer, [{\n        key: 'millisecondChange',\n        value: function millisecondChange(millisecond, state) {\n            // helper.log(millisecond);\n            this.cursor.style.left = 'calc(' + millisecond * 100 / this.Incident.duration + '% - ' + this.cursorWidth + 'px)';\n            this.leftSlot.innerHTML = millisecond;\n            this.rightSlot.innerHTML = this.Incident.duration - millisecond;\n        }\n    }, {\n        key: 'eventBroadcast',\n        value: function eventBroadcast(eventName, meta) {\n            if (eventName === 'state-change') {\n                if (meta.newState === 'waiting') {\n                    this.playButton.innerHTML = 'Resume';\n                } else if (meta.newState === 'playing') {\n                    this.playButton.innerHTML = 'Pause';\n                } else if (meta.newState === 'completed') {\n                    this.leftSlot.innerHTML = this.Incident.duration;\n                    this.rightSlot.innerHTML = 0;\n                    this.playButton.innerHTML = \"completed\";\n                    helper.log(this.Incident);\n                } else if (meta.newState === 'transitional') {\n                    this.playButton.innerHTML = \"transitioning\";\n                } else if (meta.newState === 'idle') {\n                    this.playButton.innerHTML = \"Play\";\n                }\n            } else if (eventName === 'attribute-rejection') {\n                helper.log('Attributes', meta.attributes, 'have been rejected from animation with id ' + meta.animationID);\n            } else if (eventName === 'animation-rejection') {\n                helper.log('Animation ' + meta.animationID + ' has been rejected as all attributes of it overlap on specific elements because of existing animations');\n            } else if (eventName === 'duration-change') {\n                this.millisecondChange(this.Incident.runTimeInfo.currentMillisecond, this.Incident.state);\n            }\n        }\n    }, {\n        key: 'subscribeToEvents',\n        value: function subscribeToEvents() {\n            // helper.error('Timer is subscirbing to the clips events');\n            this.Incident.subscribeToEvents(this.id, this.eventBroadcast.bind(this));\n        }\n    }, {\n        key: 'subscribeToTimer',\n        value: function subscribeToTimer() {\n            // helper.log('Timer is subscirbing to the clips timer', 'notice');\n            this.Incident.subscribe(this.id, this.millisecondChange.bind(this));\n        }\n    }, {\n        key: 'handleDragStart',\n        value: function handleDragStart(event, pointer) {\n            // helper.log('drag is starting', 'warning')\n            journey = timeCapsule.startJourney(this.Incident);\n        }\n    }, {\n        key: 'handleDrag',\n        value: function handleDrag(event, pointer, position) {\n            var millisecond = Math.round(this.Incident.duration * position.x / this.width);\n            if (millisecond < 0) {\n                millisecond = 0;\n            }\n            this.leftSlot.innerHTML = millisecond;\n            this.rightSlot.innerHTML = this.Incident.duration - millisecond;\n\n            journey.station(millisecond);\n        }\n    }, {\n        key: 'handleDragEnd',\n        value: function handleDragEnd(event, pointer) {\n            //  Velocity.defaults.speed=1;\n            // this.previousTimestamp is the target millisecond of the drag\n\n            journey.destination();\n\n            helper.log(this.Incident.exportState());\n        }\n    }, {\n        key: 'afterRender',\n        value: function afterRender() {\n            var that = this;\n\n            this.playButton.onclick = function (e) {\n                if (that.Incident.state === 'playing') {\n                    that.Incident.wait();\n                } else if (that.Incident.state === 'waiting') {\n                    that.Incident.resume();\n                } else if (that.Incident.state === 'idle') {\n                    that.Incident.play();\n                }\n            };\n\n            var elem = document.querySelector('#time-cursor');\n            var draggie = new Draggabilly(elem, {\n                axis: 'x',\n                containment: '.bar'\n            });\n\n            draggie.on('dragStart', this.handleDragStart.bind(this));\n            draggie.on('dragMove', function (event, pointer) {\n                that.handleDrag(event, pointer, draggie.position);\n            });\n            draggie.on('dragEnd', this.handleDragEnd.bind(this));\n        }\n    }, {\n        key: 'render',\n        value: function render(container) {}\n    }]);\n\n    return Timer;\n}();\n\nmodule.exports = Timer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/dist/utils/Timer.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.clonedeep/index.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.clonedeep/index.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap,\n    nodeIsSet = nodeUtil && nodeUtil.isSet,\n    nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n\n    return result;\n  }\n\n  if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n\n    return result;\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.clonedeep/index.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = filter;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.filter/index.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.find/index.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.find/index.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = find;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.find/index.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = findIndex;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.findindex/index.js\n");

/***/ }),

/***/ "../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize include=\"filter,sortBy,findIndex,find,forEach,cloneDeep\" exports=\"npm\"`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = sortBy;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ \"../node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@kissmybutton/motorcortex/lodash-custom-build/modularize/lodash.sortby/index.js\n");

/***/ }),

/***/ "../node_modules/draggabilly/draggabilly.js":
/*!**************************************************!*\
  !*** ../node_modules/draggabilly/draggabilly.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Draggabilly v2.2.0\n * Make that shiz draggable\n * https://draggabilly.desandro.com\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(/*! get-size/get-size */ \"../node_modules/get-size/get-size.js\"),\n        __webpack_require__(/*! unidragger/unidragger */ \"../node_modules/unidragger/unidragger.js\")\n      ], __WEBPACK_AMD_DEFINE_RESULT__ = (function( getSize, Unidragger ) {\n        return factory( window, getSize, Unidragger );\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n}( window, function factory( window, getSize, Unidragger ) {\n\n'use strict';\n\n// -------------------------- helpers & variables -------------------------- //\n\n// extend objects\nfunction extend( a, b ) {\n  for ( var prop in b ) {\n    a[ prop ] = b[ prop ];\n  }\n  return a;\n}\n\nfunction noop() {}\n\nvar jQuery = window.jQuery;\n\n// --------------------------  -------------------------- //\n\nfunction Draggabilly( element, options ) {\n  // querySelector if string\n  this.element = typeof element == 'string' ?\n    document.querySelector( element ) : element;\n\n  if ( jQuery ) {\n    this.$element = jQuery( this.element );\n  }\n\n  // options\n  this.options = extend( {}, this.constructor.defaults );\n  this.option( options );\n\n  this._create();\n}\n\n// inherit Unidragger methods\nvar proto = Draggabilly.prototype = Object.create( Unidragger.prototype );\n\nDraggabilly.defaults = {\n};\n\n/**\n * set options\n * @param {Object} opts\n */\nproto.option = function( opts ) {\n  extend( this.options, opts );\n};\n\n// css position values that don't need to be set\nvar positionValues = {\n  relative: true,\n  absolute: true,\n  fixed: true\n};\n\nproto._create = function() {\n  // properties\n  this.position = {};\n  this._getPosition();\n\n  this.startPoint = { x: 0, y: 0 };\n  this.dragPoint = { x: 0, y: 0 };\n\n  this.startPosition = extend( {}, this.position );\n\n  // set relative positioning\n  var style = getComputedStyle( this.element );\n  if ( !positionValues[ style.position ] ) {\n    this.element.style.position = 'relative';\n  }\n\n  // events, bridge jQuery events from vanilla\n  this.on( 'pointerDown', this.onPointerDown );\n  this.on( 'pointerMove', this.onPointerMove );\n  this.on( 'pointerUp', this.onPointerUp );\n\n  this.enable();\n  this.setHandles();\n};\n\n/**\n * set this.handles and bind start events to 'em\n */\nproto.setHandles = function() {\n  this.handles = this.options.handle ?\n    this.element.querySelectorAll( this.options.handle ) : [ this.element ];\n\n  this.bindHandles();\n};\n\n/**\n * emits events via EvEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */\nproto.dispatchEvent = function( type, event, args ) {\n  var emitArgs = [ event ].concat( args );\n  this.emitEvent( type, emitArgs );\n  this.dispatchJQueryEvent( type, event, args );\n};\n\nproto.dispatchJQueryEvent = function( type, event, args ) {\n  var jQuery = window.jQuery;\n  // trigger jQuery event\n  if ( !jQuery || !this.$element ) {\n    return;\n  }\n  // create jQuery event\n  var $event = jQuery.Event( event );\n  $event.type = type;\n  this.$element.trigger( $event, args );\n};\n\n// -------------------------- position -------------------------- //\n\n// get x/y position from style\nproto._getPosition = function() {\n  var style = getComputedStyle( this.element );\n  var x = this._getPositionCoord( style.left, 'width' );\n  var y = this._getPositionCoord( style.top, 'height' );\n  // clean up 'auto' or other non-integer values\n  this.position.x = isNaN( x ) ? 0 : x;\n  this.position.y = isNaN( y ) ? 0 : y;\n\n  this._addTransformPosition( style );\n};\n\nproto._getPositionCoord = function( styleSide, measure ) {\n  if ( styleSide.indexOf('%') != -1 ) {\n    // convert percent into pixel for Safari, #75\n    var parentSize = getSize( this.element.parentNode );\n    // prevent not-in-DOM element throwing bug, #131\n    return !parentSize ? 0 :\n      ( parseFloat( styleSide ) / 100 ) * parentSize[ measure ];\n  }\n  return parseInt( styleSide, 10 );\n};\n\n// add transform: translate( x, y ) to position\nproto._addTransformPosition = function( style ) {\n  var transform = style.transform;\n  // bail out if value is 'none'\n  if ( transform.indexOf('matrix') !== 0 ) {\n    return;\n  }\n  // split matrix(1, 0, 0, 1, x, y)\n  var matrixValues = transform.split(',');\n  // translate X value is in 12th or 4th position\n  var xIndex = transform.indexOf('matrix3d') === 0 ? 12 : 4;\n  var translateX = parseInt( matrixValues[ xIndex ], 10 );\n  // translate Y value is in 13th or 5th position\n  var translateY = parseInt( matrixValues[ xIndex + 1 ], 10 );\n  this.position.x += translateX;\n  this.position.y += translateY;\n};\n\n// -------------------------- events -------------------------- //\n\nproto.onPointerDown = function( event, pointer ) {\n  this.element.classList.add('is-pointer-down');\n  this.dispatchJQueryEvent( 'pointerDown', event, [ pointer ] );\n};\n\n/**\n * drag start\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.dragStart = function( event, pointer ) {\n  if ( !this.isEnabled ) {\n    return;\n  }\n  this._getPosition();\n  this.measureContainment();\n  // position _when_ drag began\n  this.startPosition.x = this.position.x;\n  this.startPosition.y = this.position.y;\n  // reset left/top style\n  this.setLeftTop();\n\n  this.dragPoint.x = 0;\n  this.dragPoint.y = 0;\n\n  this.element.classList.add('is-dragging');\n  this.dispatchEvent( 'dragStart', event, [ pointer ] );\n  // start animation\n  this.animate();\n};\n\nproto.measureContainment = function() {\n  var container = this.getContainer();\n  if ( !container ) {\n    return;\n  }\n\n  var elemSize = getSize( this.element );\n  var containerSize = getSize( container );\n  var elemRect = this.element.getBoundingClientRect();\n  var containerRect = container.getBoundingClientRect();\n\n  var borderSizeX = containerSize.borderLeftWidth + containerSize.borderRightWidth;\n  var borderSizeY = containerSize.borderTopWidth + containerSize.borderBottomWidth;\n\n  var position = this.relativeStartPosition = {\n    x: elemRect.left - ( containerRect.left + containerSize.borderLeftWidth ),\n    y: elemRect.top - ( containerRect.top + containerSize.borderTopWidth )\n  };\n\n  this.containSize = {\n    width: ( containerSize.width - borderSizeX ) - position.x - elemSize.width,\n    height: ( containerSize.height - borderSizeY ) - position.y - elemSize.height\n  };\n};\n\nproto.getContainer = function() {\n  var containment = this.options.containment;\n  if ( !containment ) {\n    return;\n  }\n  var isElement = containment instanceof HTMLElement;\n  // use as element\n  if ( isElement ) {\n    return containment;\n  }\n  // querySelector if string\n  if ( typeof containment == 'string' ) {\n    return document.querySelector( containment );\n  }\n  // fallback to parent element\n  return this.element.parentNode;\n};\n\n// ----- move event ----- //\n\nproto.onPointerMove = function( event, pointer, moveVector ) {\n  this.dispatchJQueryEvent( 'pointerMove', event, [ pointer, moveVector ] );\n};\n\n/**\n * drag move\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.dragMove = function( event, pointer, moveVector ) {\n  if ( !this.isEnabled ) {\n    return;\n  }\n  var dragX = moveVector.x;\n  var dragY = moveVector.y;\n\n  var grid = this.options.grid;\n  var gridX = grid && grid[0];\n  var gridY = grid && grid[1];\n\n  dragX = applyGrid( dragX, gridX );\n  dragY = applyGrid( dragY, gridY );\n\n  dragX = this.containDrag( 'x', dragX, gridX );\n  dragY = this.containDrag( 'y', dragY, gridY );\n\n  // constrain to axis\n  dragX = this.options.axis == 'y' ? 0 : dragX;\n  dragY = this.options.axis == 'x' ? 0 : dragY;\n\n  this.position.x = this.startPosition.x + dragX;\n  this.position.y = this.startPosition.y + dragY;\n  // set dragPoint properties\n  this.dragPoint.x = dragX;\n  this.dragPoint.y = dragY;\n\n  this.dispatchEvent( 'dragMove', event, [ pointer, moveVector ] );\n};\n\nfunction applyGrid( value, grid, method ) {\n  method = method || 'round';\n  return grid ? Math[ method ]( value / grid ) * grid : value;\n}\n\nproto.containDrag = function( axis, drag, grid ) {\n  if ( !this.options.containment ) {\n    return drag;\n  }\n  var measure = axis == 'x' ? 'width' : 'height';\n\n  var rel = this.relativeStartPosition[ axis ];\n  var min = applyGrid( -rel, grid, 'ceil' );\n  var max = this.containSize[ measure ];\n  max = applyGrid( max, grid, 'floor' );\n  return  Math.max( min, Math.min( max, drag ) );\n};\n\n// ----- end event ----- //\n\n/**\n * pointer up\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.onPointerUp = function( event, pointer ) {\n  this.element.classList.remove('is-pointer-down');\n  this.dispatchJQueryEvent( 'pointerUp', event, [ pointer ] );\n};\n\n/**\n * drag end\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.dragEnd = function( event, pointer ) {\n  if ( !this.isEnabled ) {\n    return;\n  }\n  // use top left position when complete\n  this.element.style.transform = '';\n  this.setLeftTop();\n  this.element.classList.remove('is-dragging');\n  this.dispatchEvent( 'dragEnd', event, [ pointer ] );\n};\n\n// -------------------------- animation -------------------------- //\n\nproto.animate = function() {\n  // only render and animate if dragging\n  if ( !this.isDragging ) {\n    return;\n  }\n\n  this.positionDrag();\n\n  var _this = this;\n  requestAnimationFrame( function animateFrame() {\n    _this.animate();\n  });\n\n};\n\n// left/top positioning\nproto.setLeftTop = function() {\n  this.element.style.left = this.position.x + 'px';\n  this.element.style.top  = this.position.y + 'px';\n};\n\nproto.positionDrag = function() {\n  this.element.style.transform = 'translate3d( ' + this.dragPoint.x +\n    'px, ' + this.dragPoint.y + 'px, 0)';\n};\n\n// ----- staticClick ----- //\n\nproto.staticClick = function( event, pointer ) {\n  this.dispatchEvent( 'staticClick', event, [ pointer ] );\n};\n\n// ----- methods ----- //\n\n/**\n * @param {Number} x\n * @param {Number} y\n */\nproto.setPosition = function( x, y ) {\n  this.position.x = x;\n  this.position.y = y;\n  this.setLeftTop();\n};\n\nproto.enable = function() {\n  this.isEnabled = true;\n};\n\nproto.disable = function() {\n  this.isEnabled = false;\n  if ( this.isDragging ) {\n    this.dragEnd();\n  }\n};\n\nproto.destroy = function() {\n  this.disable();\n  // reset styles\n  this.element.style.transform = '';\n  this.element.style.left = '';\n  this.element.style.top = '';\n  this.element.style.position = '';\n  // unbind handles\n  this.unbindHandles();\n  // remove jQuery data\n  if ( this.$element ) {\n    this.$element.removeData('draggabilly');\n  }\n};\n\n// ----- jQuery bridget ----- //\n\n// required for jQuery bridget\nproto._init = noop;\n\nif ( jQuery && jQuery.bridget ) {\n  jQuery.bridget( 'draggabilly', Draggabilly );\n}\n\n// -----  ----- //\n\nreturn Draggabilly;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/draggabilly/draggabilly.js\n");

/***/ }),

/***/ "../node_modules/ev-emitter/ev-emitter.js":
/*!************************************************!*\
  !*** ../node_modules/ev-emitter/ev-emitter.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * EvEmitter v1.1.0\n * Lil' event emitter\n * MIT License\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n( function( global, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, window */\n  if ( true ) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n}( typeof window != 'undefined' ? window : this, function() {\n\n\"use strict\";\n\nfunction EvEmitter() {}\n\nvar proto = EvEmitter.prototype;\n\nproto.on = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // set events hash\n  var events = this._events = this._events || {};\n  // set listeners array\n  var listeners = events[ eventName ] = events[ eventName ] || [];\n  // only add once\n  if ( listeners.indexOf( listener ) == -1 ) {\n    listeners.push( listener );\n  }\n\n  return this;\n};\n\nproto.once = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // add event\n  this.on( eventName, listener );\n  // set once flag\n  // set onceEvents hash\n  var onceEvents = this._onceEvents = this._onceEvents || {};\n  // set onceListeners object\n  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};\n  // set flag\n  onceListeners[ listener ] = true;\n\n  return this;\n};\n\nproto.off = function( eventName, listener ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  var index = listeners.indexOf( listener );\n  if ( index != -1 ) {\n    listeners.splice( index, 1 );\n  }\n\n  return this;\n};\n\nproto.emitEvent = function( eventName, args ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  // copy over to avoid interference if .off() in listener\n  listeners = listeners.slice(0);\n  args = args || [];\n  // once stuff\n  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];\n\n  for ( var i=0; i < listeners.length; i++ ) {\n    var listener = listeners[i]\n    var isOnce = onceListeners && onceListeners[ listener ];\n    if ( isOnce ) {\n      // remove listener\n      // remove before trigger to prevent recursion\n      this.off( eventName, listener );\n      // unset once flag\n      delete onceListeners[ listener ];\n    }\n    // trigger listener\n    listener.apply( this, args );\n  }\n\n  return this;\n};\n\nproto.allOff = function() {\n  delete this._events;\n  delete this._onceEvents;\n};\n\nreturn EvEmitter;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL2V2LWVtaXR0ZXIvZXYtZW1pdHRlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzP2VkM2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFdkVtaXR0ZXIgdjEuMS4wXG4gKiBMaWwnIGV2ZW50IGVtaXR0ZXJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuLyoganNoaW50IHVudXNlZDogdHJ1ZSwgdW5kZWY6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCB3aW5kb3cgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBnbG9iYWwuRXZFbWl0dGVyID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbnZhciBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNldCBldmVudHMgaGFzaFxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XG4gIHZhciBsaXN0ZW5lcnMgPSBldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzWyBldmVudE5hbWUgXSB8fCBbXTtcbiAgLy8gb25seSBhZGQgb25jZVxuICBpZiAoIGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApID09IC0xICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGFkZCBldmVudFxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIC8vIHNldCBvbmNlIGZsYWdcbiAgLy8gc2V0IG9uY2VFdmVudHMgaGFzaFxuICB2YXIgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgb25jZUxpc3RlbmVycyBvYmplY3RcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdIHx8IHt9O1xuICAvLyBzZXQgZmxhZ1xuICBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgYXJncyApIHtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwKTtcbiAgYXJncyA9IGFyZ3MgfHwgW107XG4gIC8vIG9uY2Ugc3R1ZmZcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSB0aGlzLl9vbmNlRXZlbnRzICYmIHRoaXMuX29uY2VFdmVudHNbIGV2ZW50TmFtZSBdO1xuXG4gIGZvciAoIHZhciBpPTA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldXG4gICAgdmFyIGlzT25jZSA9IG9uY2VMaXN0ZW5lcnMgJiYgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICBpZiAoIGlzT25jZSApIHtcbiAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lclxuICAgICAgLy8gcmVtb3ZlIGJlZm9yZSB0cmlnZ2VyIHRvIHByZXZlbnQgcmVjdXJzaW9uXG4gICAgICB0aGlzLm9mZiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAgICAgLy8gdW5zZXQgb25jZSBmbGFnXG4gICAgICBkZWxldGUgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICB9XG4gICAgLy8gdHJpZ2dlciBsaXN0ZW5lclxuICAgIGxpc3RlbmVyLmFwcGx5KCB0aGlzLCBhcmdzICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmFsbE9mZiA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5fZXZlbnRzO1xuICBkZWxldGUgdGhpcy5fb25jZUV2ZW50cztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0pKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsV0FNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/ev-emitter/ev-emitter.js\n");

/***/ }),

/***/ "../node_modules/get-size/get-size.js":
/*!********************************************!*\
  !*** ../node_modules/get-size/get-size.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * getSize v2.0.3\n * measure size of elements\n * MIT license\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n/* globals console: false */\n\n( function( window, factory ) {\n  /* jshint strict: false */ /* globals define, module */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n})( window, function factory() {\n'use strict';\n\n// -------------------------- helpers -------------------------- //\n\n// get a number from a string, not a percentage\nfunction getStyleSize( value ) {\n  var num = parseFloat( value );\n  // not a percent like '100%', and a number\n  var isValid = value.indexOf('%') == -1 && !isNaN( num );\n  return isValid && num;\n}\n\nfunction noop() {}\n\nvar logError = typeof console == 'undefined' ? noop :\n  function( message ) {\n    console.error( message );\n  };\n\n// -------------------------- measurements -------------------------- //\n\nvar measurements = [\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'marginBottom',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopWidth',\n  'borderBottomWidth'\n];\n\nvar measurementsLength = measurements.length;\n\nfunction getZeroSize() {\n  var size = {\n    width: 0,\n    height: 0,\n    innerWidth: 0,\n    innerHeight: 0,\n    outerWidth: 0,\n    outerHeight: 0\n  };\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    size[ measurement ] = 0;\n  }\n  return size;\n}\n\n// -------------------------- getStyle -------------------------- //\n\n/**\n * getStyle, get style of element, check for Firefox bug\n * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\nfunction getStyle( elem ) {\n  var style = getComputedStyle( elem );\n  if ( !style ) {\n    logError( 'Style returned ' + style +\n      '. Are you running this code in a hidden iframe on Firefox? ' +\n      'See https://bit.ly/getsizebug1' );\n  }\n  return style;\n}\n\n// -------------------------- setup -------------------------- //\n\nvar isSetup = false;\n\nvar isBoxSizeOuter;\n\n/**\n * setup\n * check isBoxSizerOuter\n * do on first getSize() rather than on page load for Firefox bug\n */\nfunction setup() {\n  // setup once\n  if ( isSetup ) {\n    return;\n  }\n  isSetup = true;\n\n  // -------------------------- box sizing -------------------------- //\n\n  /**\n   * Chrome & Safari measure the outer-width on style.width on border-box elems\n   * IE11 & Firefox<29 measures the inner-width\n   */\n  var div = document.createElement('div');\n  div.style.width = '200px';\n  div.style.padding = '1px 2px 3px 4px';\n  div.style.borderStyle = 'solid';\n  div.style.borderWidth = '1px 2px 3px 4px';\n  div.style.boxSizing = 'border-box';\n\n  var body = document.body || document.documentElement;\n  body.appendChild( div );\n  var style = getStyle( div );\n  // round value for browser zoom. desandro/masonry#928\n  isBoxSizeOuter = Math.round( getStyleSize( style.width ) ) == 200;\n  getSize.isBoxSizeOuter = isBoxSizeOuter;\n\n  body.removeChild( div );\n}\n\n// -------------------------- getSize -------------------------- //\n\nfunction getSize( elem ) {\n  setup();\n\n  // use querySeletor if elem is string\n  if ( typeof elem == 'string' ) {\n    elem = document.querySelector( elem );\n  }\n\n  // do not proceed on non-objects\n  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {\n    return;\n  }\n\n  var style = getStyle( elem );\n\n  // if hidden, everything is 0\n  if ( style.display == 'none' ) {\n    return getZeroSize();\n  }\n\n  var size = {};\n  size.width = elem.offsetWidth;\n  size.height = elem.offsetHeight;\n\n  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n  // get all measurements\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    var value = style[ measurement ];\n    var num = parseFloat( value );\n    // any 'auto', 'medium' value will be 0\n    size[ measurement ] = !isNaN( num ) ? num : 0;\n  }\n\n  var paddingWidth = size.paddingLeft + size.paddingRight;\n  var paddingHeight = size.paddingTop + size.paddingBottom;\n  var marginWidth = size.marginLeft + size.marginRight;\n  var marginHeight = size.marginTop + size.marginBottom;\n  var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n  var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;\n\n  // overwrite width and height if we can get it from style\n  var styleWidth = getStyleSize( style.width );\n  if ( styleWidth !== false ) {\n    size.width = styleWidth +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );\n  }\n\n  var styleHeight = getStyleSize( style.height );\n  if ( styleHeight !== false ) {\n    size.height = styleHeight +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );\n  }\n\n  size.innerWidth = size.width - ( paddingWidth + borderWidth );\n  size.innerHeight = size.height - ( paddingHeight + borderHeight );\n\n  size.outerWidth = size.width + marginWidth;\n  size.outerHeight = size.height + marginHeight;\n\n  return size;\n}\n\nreturn getSize;\n\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/get-size/get-size.js\n");

/***/ }),

/***/ "../node_modules/unidragger/unidragger.js":
/*!************************************************!*\
  !*** ../node_modules/unidragger/unidragger.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Unidragger v2.3.0\n * Draggable base class\n * MIT license\n */\n\n/*jshint browser: true, unused: true, undef: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! unipointer/unipointer */ \"../node_modules/unipointer/unipointer.js\")\n    ], __WEBPACK_AMD_DEFINE_RESULT__ = (function( Unipointer ) {\n      return factory( window, Unipointer );\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n}( window, function factory( window, Unipointer ) {\n\n'use strict';\n\n// -------------------------- Unidragger -------------------------- //\n\nfunction Unidragger() {}\n\n// inherit Unipointer & EvEmitter\nvar proto = Unidragger.prototype = Object.create( Unipointer.prototype );\n\n// ----- bind start ----- //\n\nproto.bindHandles = function() {\n  this._bindHandles( true );\n};\n\nproto.unbindHandles = function() {\n  this._bindHandles( false );\n};\n\n/**\n * Add or remove start event\n * @param {Boolean} isAdd\n */\nproto._bindHandles = function( isAdd ) {\n  // munge isAdd, default to true\n  isAdd = isAdd === undefined ? true : isAdd;\n  // bind each handle\n  var bindMethod = isAdd ? 'addEventListener' : 'removeEventListener';\n  var touchAction = isAdd ? this._touchActionValue : '';\n  for ( var i=0; i < this.handles.length; i++ ) {\n    var handle = this.handles[i];\n    this._bindStartEvent( handle, isAdd );\n    handle[ bindMethod ]( 'click', this );\n    // touch-action: none to override browser touch gestures. metafizzy/flickity#540\n    if ( window.PointerEvent ) {\n      handle.style.touchAction = touchAction;\n    }\n  }\n};\n\n// prototype so it can be overwriteable by Flickity\nproto._touchActionValue = 'none';\n\n// ----- start event ----- //\n\n/**\n * pointer start\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.pointerDown = function( event, pointer ) {\n  var isOkay = this.okayPointerDown( event );\n  if ( !isOkay ) {\n    return;\n  }\n  // track start event position\n  this.pointerDownPointer = pointer;\n\n  event.preventDefault();\n  this.pointerDownBlur();\n  // bind move and end events\n  this._bindPostStartEvents( event );\n  this.emitEvent( 'pointerDown', [ event, pointer ] );\n};\n\n// nodes that have text fields\nvar cursorNodes = {\n  TEXTAREA: true,\n  INPUT: true,\n  SELECT: true,\n  OPTION: true,\n};\n\n// input types that do not have text fields\nvar clickTypes = {\n  radio: true,\n  checkbox: true,\n  button: true,\n  submit: true,\n  image: true,\n  file: true,\n};\n\n// dismiss inputs with text fields. flickity#403, flickity#404\nproto.okayPointerDown = function( event ) {\n  var isCursorNode = cursorNodes[ event.target.nodeName ];\n  var isClickType = clickTypes[ event.target.type ];\n  var isOkay = !isCursorNode || isClickType;\n  if ( !isOkay ) {\n    this._pointerReset();\n  }\n  return isOkay;\n};\n\n// kludge to blur previously focused input\nproto.pointerDownBlur = function() {\n  var focused = document.activeElement;\n  // do not blur body for IE10, metafizzy/flickity#117\n  var canBlur = focused && focused.blur && focused != document.body;\n  if ( canBlur ) {\n    focused.blur();\n  }\n};\n\n// ----- move event ----- //\n\n/**\n * drag move\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.pointerMove = function( event, pointer ) {\n  var moveVector = this._dragPointerMove( event, pointer );\n  this.emitEvent( 'pointerMove', [ event, pointer, moveVector ] );\n  this._dragMove( event, pointer, moveVector );\n};\n\n// base pointer move logic\nproto._dragPointerMove = function( event, pointer ) {\n  var moveVector = {\n    x: pointer.pageX - this.pointerDownPointer.pageX,\n    y: pointer.pageY - this.pointerDownPointer.pageY\n  };\n  // start drag if pointer has moved far enough to start drag\n  if ( !this.isDragging && this.hasDragStarted( moveVector ) ) {\n    this._dragStart( event, pointer );\n  }\n  return moveVector;\n};\n\n// condition if pointer has moved far enough to start drag\nproto.hasDragStarted = function( moveVector ) {\n  return Math.abs( moveVector.x ) > 3 || Math.abs( moveVector.y ) > 3;\n};\n\n// ----- end event ----- //\n\n/**\n * pointer up\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto.pointerUp = function( event, pointer ) {\n  this.emitEvent( 'pointerUp', [ event, pointer ] );\n  this._dragPointerUp( event, pointer );\n};\n\nproto._dragPointerUp = function( event, pointer ) {\n  if ( this.isDragging ) {\n    this._dragEnd( event, pointer );\n  } else {\n    // pointer didn't move enough for drag to start\n    this._staticClick( event, pointer );\n  }\n};\n\n// -------------------------- drag -------------------------- //\n\n// dragStart\nproto._dragStart = function( event, pointer ) {\n  this.isDragging = true;\n  // prevent clicks\n  this.isPreventingClicks = true;\n  this.dragStart( event, pointer );\n};\n\nproto.dragStart = function( event, pointer ) {\n  this.emitEvent( 'dragStart', [ event, pointer ] );\n};\n\n// dragMove\nproto._dragMove = function( event, pointer, moveVector ) {\n  // do not drag if not dragging yet\n  if ( !this.isDragging ) {\n    return;\n  }\n\n  this.dragMove( event, pointer, moveVector );\n};\n\nproto.dragMove = function( event, pointer, moveVector ) {\n  event.preventDefault();\n  this.emitEvent( 'dragMove', [ event, pointer, moveVector ] );\n};\n\n// dragEnd\nproto._dragEnd = function( event, pointer ) {\n  // set flags\n  this.isDragging = false;\n  // re-enable clicking async\n  setTimeout( function() {\n    delete this.isPreventingClicks;\n  }.bind( this ) );\n\n  this.dragEnd( event, pointer );\n};\n\nproto.dragEnd = function( event, pointer ) {\n  this.emitEvent( 'dragEnd', [ event, pointer ] );\n};\n\n// ----- onclick ----- //\n\n// handle all clicks and prevent clicks when dragging\nproto.onclick = function( event ) {\n  if ( this.isPreventingClicks ) {\n    event.preventDefault();\n  }\n};\n\n// ----- staticClick ----- //\n\n// triggered after pointer down & up with no/tiny movement\nproto._staticClick = function( event, pointer ) {\n  // ignore emulated mouse up clicks\n  if ( this.isIgnoringMouseUp && event.type == 'mouseup' ) {\n    return;\n  }\n\n  this.staticClick( event, pointer );\n\n  // set flag for emulated clicks 300ms after touchend\n  if ( event.type != 'mouseup' ) {\n    this.isIgnoringMouseUp = true;\n    // reset flag after 300ms\n    setTimeout( function() {\n      delete this.isIgnoringMouseUp;\n    }.bind( this ), 400 );\n  }\n};\n\nproto.staticClick = function( event, pointer ) {\n  this.emitEvent( 'staticClick', [ event, pointer ] );\n};\n\n// ----- utils ----- //\n\nUnidragger.getPointerPoint = Unipointer.getPointerPoint;\n\n// -----  ----- //\n\nreturn Unidragger;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/unidragger/unidragger.js\n");

/***/ }),

/***/ "../node_modules/unipointer/unipointer.js":
/*!************************************************!*\
  !*** ../node_modules/unipointer/unipointer.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Unipointer v2.3.0\n * base class for doing one thing with pointer event\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*global define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(/*! ev-emitter/ev-emitter */ \"../node_modules/ev-emitter/ev-emitter.js\")\n    ], __WEBPACK_AMD_DEFINE_RESULT__ = (function( EvEmitter ) {\n      return factory( window, EvEmitter );\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n}( window, function factory( window, EvEmitter ) {\n\n'use strict';\n\nfunction noop() {}\n\nfunction Unipointer() {}\n\n// inherit EvEmitter\nvar proto = Unipointer.prototype = Object.create( EvEmitter.prototype );\n\nproto.bindStartEvent = function( elem ) {\n  this._bindStartEvent( elem, true );\n};\n\nproto.unbindStartEvent = function( elem ) {\n  this._bindStartEvent( elem, false );\n};\n\n/**\n * Add or remove start event\n * @param {Boolean} isAdd - remove if falsey\n */\nproto._bindStartEvent = function( elem, isAdd ) {\n  // munge isAdd, default to true\n  isAdd = isAdd === undefined ? true : isAdd;\n  var bindMethod = isAdd ? 'addEventListener' : 'removeEventListener';\n\n  // default to mouse events\n  var startEvent = 'mousedown';\n  if ( window.PointerEvent ) {\n    // Pointer Events\n    startEvent = 'pointerdown';\n  } else if ( 'ontouchstart' in window ) {\n    // Touch Events. iOS Safari\n    startEvent = 'touchstart';\n  }\n  elem[ bindMethod ]( startEvent, this );\n};\n\n// trigger handler methods for events\nproto.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\n// returns the touch that we're keeping track of\nproto.getTouch = function( touches ) {\n  for ( var i=0; i < touches.length; i++ ) {\n    var touch = touches[i];\n    if ( touch.identifier == this.pointerIdentifier ) {\n      return touch;\n    }\n  }\n};\n\n// ----- start event ----- //\n\nproto.onmousedown = function( event ) {\n  // dismiss clicks from right or middle buttons\n  var button = event.button;\n  if ( button && ( button !== 0 && button !== 1 ) ) {\n    return;\n  }\n  this._pointerDown( event, event );\n};\n\nproto.ontouchstart = function( event ) {\n  this._pointerDown( event, event.changedTouches[0] );\n};\n\nproto.onpointerdown = function( event ) {\n  this._pointerDown( event, event );\n};\n\n/**\n * pointer start\n * @param {Event} event\n * @param {Event or Touch} pointer\n */\nproto._pointerDown = function( event, pointer ) {\n  // dismiss right click and other pointers\n  // button = 0 is okay, 1-4 not\n  if ( event.button || this.isPointerDown ) {\n    return;\n  }\n\n  this.isPointerDown = true;\n  // save pointer identifier to match up touch events\n  this.pointerIdentifier = pointer.pointerId !== undefined ?\n    // pointerId for pointer events, touch.indentifier for touch events\n    pointer.pointerId : pointer.identifier;\n\n  this.pointerDown( event, pointer );\n};\n\nproto.pointerDown = function( event, pointer ) {\n  this._bindPostStartEvents( event );\n  this.emitEvent( 'pointerDown', [ event, pointer ] );\n};\n\n// hash of events to be bound after start event\nvar postStartEvents = {\n  mousedown: [ 'mousemove', 'mouseup' ],\n  touchstart: [ 'touchmove', 'touchend', 'touchcancel' ],\n  pointerdown: [ 'pointermove', 'pointerup', 'pointercancel' ],\n};\n\nproto._bindPostStartEvents = function( event ) {\n  if ( !event ) {\n    return;\n  }\n  // get proper events to match start event\n  var events = postStartEvents[ event.type ];\n  // bind events to node\n  events.forEach( function( eventName ) {\n    window.addEventListener( eventName, this );\n  }, this );\n  // save these arguments\n  this._boundPointerEvents = events;\n};\n\nproto._unbindPostStartEvents = function() {\n  // check for _boundEvents, in case dragEnd triggered twice (old IE8 bug)\n  if ( !this._boundPointerEvents ) {\n    return;\n  }\n  this._boundPointerEvents.forEach( function( eventName ) {\n    window.removeEventListener( eventName, this );\n  }, this );\n\n  delete this._boundPointerEvents;\n};\n\n// ----- move event ----- //\n\nproto.onmousemove = function( event ) {\n  this._pointerMove( event, event );\n};\n\nproto.onpointermove = function( event ) {\n  if ( event.pointerId == this.pointerIdentifier ) {\n    this._pointerMove( event, event );\n  }\n};\n\nproto.ontouchmove = function( event ) {\n  var touch = this.getTouch( event.changedTouches );\n  if ( touch ) {\n    this._pointerMove( event, touch );\n  }\n};\n\n/**\n * pointer move\n * @param {Event} event\n * @param {Event or Touch} pointer\n * @private\n */\nproto._pointerMove = function( event, pointer ) {\n  this.pointerMove( event, pointer );\n};\n\n// public\nproto.pointerMove = function( event, pointer ) {\n  this.emitEvent( 'pointerMove', [ event, pointer ] );\n};\n\n// ----- end event ----- //\n\n\nproto.onmouseup = function( event ) {\n  this._pointerUp( event, event );\n};\n\nproto.onpointerup = function( event ) {\n  if ( event.pointerId == this.pointerIdentifier ) {\n    this._pointerUp( event, event );\n  }\n};\n\nproto.ontouchend = function( event ) {\n  var touch = this.getTouch( event.changedTouches );\n  if ( touch ) {\n    this._pointerUp( event, touch );\n  }\n};\n\n/**\n * pointer up\n * @param {Event} event\n * @param {Event or Touch} pointer\n * @private\n */\nproto._pointerUp = function( event, pointer ) {\n  this._pointerDone();\n  this.pointerUp( event, pointer );\n};\n\n// public\nproto.pointerUp = function( event, pointer ) {\n  this.emitEvent( 'pointerUp', [ event, pointer ] );\n};\n\n// ----- pointer done ----- //\n\n// triggered on pointer up & pointer cancel\nproto._pointerDone = function() {\n  this._pointerReset();\n  this._unbindPostStartEvents();\n  this.pointerDone();\n};\n\nproto._pointerReset = function() {\n  // reset properties\n  this.isPointerDown = false;\n  delete this.pointerIdentifier;\n};\n\nproto.pointerDone = noop;\n\n// ----- pointer cancel ----- //\n\nproto.onpointercancel = function( event ) {\n  if ( event.pointerId == this.pointerIdentifier ) {\n    this._pointerCancel( event, event );\n  }\n};\n\nproto.ontouchcancel = function( event ) {\n  var touch = this.getTouch( event.changedTouches );\n  if ( touch ) {\n    this._pointerCancel( event, touch );\n  }\n};\n\n/**\n * pointer cancel\n * @param {Event} event\n * @param {Event or Touch} pointer\n * @private\n */\nproto._pointerCancel = function( event, pointer ) {\n  this._pointerDone();\n  this.pointerCancel( event, pointer );\n};\n\n// public\nproto.pointerCancel = function( event, pointer ) {\n  this.emitEvent( 'pointerCancel', [ event, pointer ] );\n};\n\n// -----  ----- //\n\n// utility function for getting x/y coords from event\nUnipointer.getPointerPoint = function( pointer ) {\n  return {\n    x: pointer.pageX,\n    y: pointer.pageY\n  };\n};\n\n// -----  ----- //\n\nreturn Unipointer;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/unipointer/unipointer.js\n");

/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanM/YTQyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "../node_modules/webpack/buildin/module.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/module.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanM/NDY4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "../src/Player.js":
/*!************************!*\
  !*** ../src/Player.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar timeCapsule = new MC.TimeCapsule();\nvar mch = new MC.Helper();\n\nvar _require = __webpack_require__(/*! ./helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    eltag = _require.eltag,\n    elcreate = _require.elcreate;\n\nvar svg = __webpack_require__(/*! ./html/svg */ \"../src/html/svg.js\");\n\nvar config = __webpack_require__(/*! ./config */ \"../src/config.js\");\n\nvar confStyle = __webpack_require__(/*! ./html/style */ \"../src/html/style.js\");\n\nvar confThemes = __webpack_require__(/*! ./html/themes */ \"../src/html/themes.js\");\n\nvar setElements = __webpack_require__(/*! ./html/setElements */ \"../src/html/setElements.js\");\n\nvar volumeListener = __webpack_require__(/*! ./listeners/volume */ \"../src/listeners/volume.js\");\n\nvar loopBarStartListener = __webpack_require__(/*! ./listeners/loopBarStart */ \"../src/listeners/loopBarStart.js\");\n\nvar loopBarEndListener = __webpack_require__(/*! ./listeners/loopBarEnd */ \"../src/listeners/loopBarEnd.js\");\n\nvar loopStartEndListener = __webpack_require__(/*! ./listeners/loopStartEnd */ \"../src/listeners/loopStartEnd.js\");\n\nvar progressBarListener = __webpack_require__(/*! ./listeners/progressBar */ \"../src/listeners/progressBar.js\");\n\nvar statusBtnListener = __webpack_require__(/*! ./listeners/statusBtn */ \"../src/listeners/statusBtn.js\");\n\nvar settingsListener = __webpack_require__(/*! ./listeners/settings */ \"../src/listeners/settings.js\");\n\nvar speedListener = __webpack_require__(/*! ./listeners/speed */ \"../src/listeners/speed.js\");\n\nvar loopBtnListener = __webpack_require__(/*! ./listeners/loopBtn */ \"../src/listeners/loopBtn.js\");\n\nvar controlsListener = __webpack_require__(/*! ./listeners/controls */ \"../src/listeners/controls.js\");\n\nvar fullscreenListener = __webpack_require__(/*! ./listeners/fullscreen */ \"../src/listeners/fullscreen.js\");\n\nvar donkeyclipListener = __webpack_require__(/*! ./listeners/donkeyclip */ \"../src/listeners/donkeyclip.js\");\n\nvar previewListener = __webpack_require__(/*! ./listeners/preview */ \"../src/listeners/preview.js\");\n\nvar bodyListener = __webpack_require__(/*! ./listeners/body */ \"../src/listeners/body.js\");\n/**\n * @classdesc\n * Timer's purpose is to provide an interface through which any TimedIncident\n * (such as a Scene or a Clip) can both privide info regarding their timing\n * state but also provide an interface for interacting/altering the timing of it\n */\n\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  function Player(options) {\n    var _this = this;\n\n    _classCallCheck(this, Player);\n\n    // set defaults\n    options.id = options.id || mch.getAnId();\n    options.preview = options.preview || false;\n    options.showVolume = options.showVolume || false;\n    options.theme = options.theme || \"transparent on-top\";\n    options.host = options.host || options.clip.props.host;\n    options.buttons = options.buttons || {};\n\n    if (options.pointerEvents === undefined || options.pointerEvents === null) {\n      options.pointerEvents = true;\n    } else {\n      options.pointerEvents = Boolean(options.pointerEvents);\n    }\n\n    options.onMillisecondChange = options.onMillisecondChange || null;\n    options.speedValues = options.speedValues || [-4, -2, -1, -0.5, 0, 0.5, 1, 2, 4]; // remove strings\n\n    for (var i in options.speedValues) {\n      if (!isFinite(options.speedValues[i])) {\n        options.speedValues.splice(i, 1);\n      }\n    }\n\n    options.speedValues.sort(function (a, b) {\n      return a - b;\n    });\n    this.className = config.name;\n    config.playerName = options.id;\n    this.options = options;\n    this.id = this.options.id;\n    this.name = config.name;\n    this.previewClip = null;\n    this.clip = options.clip; // host to apply the timer\n\n    this.clipClass = options.clipClass;\n    this.listeners = {};\n    this.settings = {\n      volume: 1,\n      journey: null,\n      previousVolume: 1,\n      volumeMute: false,\n      needsUpdate: true,\n      resizeLoop: false,\n      loopJourney: false,\n      previewJourney: null,\n      loopActivated: false,\n      requestingLoop: false,\n      playAfterResize: false,\n      loopStartMillisecond: 0,\n      loopLastPositionXPxls: 0,\n      loopLastPositionXPercentage: 0,\n      loopEndMillisecond: this.clip.duration\n    };\n    this.functions = {\n      millisecondChange: this.millisecondChange,\n      createJourney: this.createJourney\n    }; // create the timer controls main div\n\n    setElements(this);\n    this.setTheme();\n    this.setSpeed();\n    this.subscribeToTimer();\n    this.subscribeToEvents();\n    this.addEventListeners();\n\n    if (this.options.preview) {\n      this.createPreviewDisplay();\n    }\n\n    window.addEventListener(\"resize\", function () {\n      if (_this.options.preview) {\n        _this.setPreviewDimentions();\n      }\n    });\n  }\n\n  _createClass(Player, [{\n    key: \"createJourney\",\n    value: function createJourney(clip, millisecond) {\n      var _this2 = this;\n\n      var clipCommands = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      setTimeout(function () {\n        var def = null;\n        var _clipCommands$before = clipCommands.before,\n            before = _clipCommands$before === void 0 ? def : _clipCommands$before,\n            _clipCommands$after = clipCommands.after,\n            after = _clipCommands$after === void 0 ? def : _clipCommands$after;\n        before ? clip[before]() : null;\n        _this2.settings.journey = timeCapsule.startJourney(clip);\n\n        _this2.settings.journey.station(millisecond);\n\n        _this2.settings.journey.destination();\n\n        after ? clip[after]() : null;\n      }, 0);\n    }\n  }, {\n    key: \"millisecondChange\",\n    value: function millisecondChange(millisecond, timestamp, roundTo, makeJouney) {\n      var executeOnMillisecondChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n      if (!this.settings.needsUpdate) {\n        this.clip.wait();\n        return 1;\n      }\n\n      var clip = this.clip;\n      var _this$settings = this.settings,\n          loopActivated = _this$settings.loopActivated,\n          loopEndMillisecond = _this$settings.loopEndMillisecond,\n          loopStartMillisecond = _this$settings.loopStartMillisecond;\n      var duration = this.clip.duration;\n      var _this$elements = this.elements,\n          totalBar = _this$elements.totalBar,\n          loopBar = _this$elements.loopBar;\n      var loopBarWidth = loopBar.offsetWidth;\n      var loopBarLeft = loopBar.offsetLeft / totalBar.offsetWidth;\n      var localMillisecond = millisecond - duration * loopBarLeft;\n      var localDuration = duration / totalBar.offsetWidth * loopBarWidth;\n\n      if (millisecond >= loopEndMillisecond && loopActivated) {\n        if (clip.state === \"idle\" || clip.state === \"completed\") {\n          this.createJourney(clip, loopStartMillisecond + 1, {\n            before: \"stop\",\n            after: \"play\"\n          });\n        } else {\n          this.createJourney(clip, loopStartMillisecond + 1, {\n            after: \"resume\"\n          });\n        }\n\n        return 1;\n      } else if (millisecond <= loopStartMillisecond && loopActivated) {\n        if (clip.state === \"idle\" || clip.state === \"completed\") {\n          this.createJourney(clip, loopEndMillisecond - 1, {\n            before: \"stop\",\n            after: \"play\"\n          });\n        } else {\n          this.createJourney(clip, loopEndMillisecond - 1, {\n            after: \"resume\"\n          });\n        }\n\n        return 1;\n      }\n      /*else if (millisecond <= loopStartMillisecond) {\n      this.createJourney(clip, loopStartMillisecond);\n      } else if (millisecond >= loopEndMillisecond) {\n      this.createJourney(clip, loopEndMillisecond);\n      }*/\n\n\n      if (makeJouney) {\n        this.createJourney(clip, millisecond, {\n          after: this.settings.playAfterResize ? \"resume\" : null\n        });\n      }\n\n      this.elements.runningBar.style.width = localMillisecond / localDuration * 100 + \"%\";\n      this.elements.currentTime.innerHTML = millisecond;\n\n      if (this.options.onMillisecondChange && executeOnMillisecondChange) {\n        this.options.onMillisecondChange(millisecond);\n      }\n    }\n  }, {\n    key: \"eventBroadcast\",\n    value: function eventBroadcast(eventName, meta) {\n      if (eventName === \"state-change\") {\n        if (meta.newState === \"waiting\") {\n          this.elements.statusButton.innerHTML = svg.playSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"Waiting\";\n        } else if (meta.newState === \"playing\") {\n          this.elements.statusButton.innerHTML = svg.pauseSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"Playing\";\n        } else if (meta.newState === \"completed\") {\n          this.elements.currentTime.innerHTML = this.clip.duration;\n          this.elements.statusButton.innerHTML = svg.replaySVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"Completed\";\n        } else if (meta.newState === \"transitional\") {\n          this.elements.statusButton.innerHTML = svg.playSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"Transitional\";\n        } else if (meta.newState === \"idle\") {\n          this.elements.statusButton.innerHTML = svg.playSVG;\n          this.elements.statusButton.appendChild(this.elements.indicator);\n          this.elements.indicator.innerHTML = \"Idle\";\n        } else {\n          this.elements.indicator.innerHTML = meta.newSTate;\n        }\n      } else if (eventName === \"attribute-rejection\") {\n        mch.log(\"Attributes\", meta.attributes, \"have been rejected from animation with id \".concat(meta.animationID));\n      } else if (eventName === \"animation-rejection\") {\n        mch.log(\"Animation \".concat(meta.animationID, \" has been rejected as all attributes of \\n        it overlap on specific elements because of existing animations\"));\n      } else if (eventName === \"duration-change\") {\n        this.elements.totalTime.innerHTML = this.clip.duration;\n        this.settings.loopEndMillisecond = this.clip.duration;\n        this.millisecondChange(this.clip.runTimeInfo.currentMillisecond);\n      }\n    }\n  }, {\n    key: \"subscribeToEvents\",\n    value: function subscribeToEvents() {\n      this.clip.subscribeToEvents(this.id, this.eventBroadcast.bind(this));\n    }\n  }, {\n    key: \"subscribeToTimer\",\n    value: function subscribeToTimer() {\n      this.clip.subscribe(this.id, this.millisecondChange.bind(this));\n    }\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart() {\n      this.settings.needsUpdate = true;\n      this.settings.journey = timeCapsule.startJourney(this.clip);\n    }\n  }, {\n    key: \"handleDrag\",\n    value: function handleDrag(loopBarPositionX) {\n      var executeOnMillisecondChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!isFinite(loopBarPositionX)) {\n        loopBarPositionX = 0;\n      }\n\n      var duration = this.clip.duration;\n      var journey = this.settings.journey;\n      var _this$elements2 = this.elements,\n          loopBar = _this$elements2.loopBar,\n          totalBar = _this$elements2.totalBar,\n          runningBar = _this$elements2.runningBar,\n          currentTime = _this$elements2.currentTime;\n      var totalBarPositionX = loopBarPositionX + loopBar.offsetLeft;\n      var millisecond = Math.round(duration * totalBarPositionX / totalBar.offsetWidth);\n      currentTime.innerHTML = millisecond;\n      runningBar.style.width = loopBarPositionX / loopBar.offsetWidth * 100 + \"%\";\n      journey.station(millisecond);\n\n      if (this.options.onMillisecondChange && executeOnMillisecondChange) {\n        this.options.onMillisecondChange(millisecond);\n      }\n    }\n  }, {\n    key: \"handleDragEnd\",\n    value: function handleDragEnd() {\n      this.settings.journey.destination();\n    }\n  }, {\n    key: \"createProgressDrag\",\n    value: function createProgressDrag(loopBarPositionX) {\n      this.handleDragStart();\n      this.handleDrag(loopBarPositionX);\n      this.handleDragEnd();\n    }\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      loopBarEndListener(this);\n      progressBarListener(this);\n      loopBarStartListener(this);\n      loopStartEndListener(this);\n      volumeListener(this);\n      statusBtnListener(this);\n      settingsListener(this);\n      speedListener(this);\n      loopBtnListener(this);\n      controlsListener(this);\n      fullscreenListener(this);\n      donkeyclipListener(this);\n      previewListener(this);\n      bodyListener(this);\n    }\n  }, {\n    key: \"launchIntoFullscreen\",\n    value: function launchIntoFullscreen(element) {\n      if (this.options.preview) {\n        this.setPreviewDimentions();\n      }\n\n      this.elements.mcPlayer.classList.toggle(\"full-screen\");\n\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      }\n    }\n  }, {\n    key: \"exitFullscreen\",\n    value: function exitFullscreen() {\n      if (this.options.preview) {\n        this.setPreviewDimentions();\n      }\n\n      this.elements.mcPlayer.classList.toggle(\"full-screen\");\n\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      }\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme() {\n      // replace multiple spaces with one space\n      this.options.theme.replace(/\\s\\s+/g, \" \");\n      this.options.theme.trim();\n\n      if (!this.options.theme.includes(\"on-top\") && !this.options.theme.includes(\"position-default\")) {\n        this.options.theme += \" position-default\";\n      }\n\n      var theme = {};\n\n      for (var i in this.options.theme.split(\" \")) {\n        var confTheme = confThemes(this.options.theme.split(\" \")[i]);\n\n        for (var q in confTheme || {}) {\n          theme[q] = confTheme[q];\n        }\n      }\n\n      var css = confStyle(theme, this.name, this.options);\n      var style = elcreate(\"style\");\n      style.styleSheet ? style.styleSheet.cssText = css : style.appendChild(document.createTextNode(css)); // append player style to document\n\n      eltag(\"head\")[0].appendChild(style);\n    }\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed() {\n      var _this3 = this;\n\n      var currentSpeed;\n      this.clip.speed == 1 ? currentSpeed = \"Normal\" : currentSpeed = this.clip.speed;\n      this.elements.speedCurrent.innerHTML = currentSpeed;\n\n      var targetZone = function () {\n        for (var i = 0; i < _this3.options.speedValues.length - 1; i++) {\n          if (_this3.options.speedValues[i] <= _this3.clip.speed && _this3.options.speedValues[i + 1] > _this3.clip.speed) {\n            return i + Math.abs((_this3.clip.speed - _this3.options.speedValues[i]) / (_this3.options.speedValues[i] - _this3.options.speedValues[i + 1]));\n          }\n        }\n      }();\n\n      var step = 1 / (this.options.speedValues.length - 1);\n      var positionY = (targetZone * step - 1) * -1 * (this.options.speedValues.length - 1) * 16;\n      elid(\"\".concat(this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    }\n  }, {\n    key: \"calculateSpeed\",\n    value: function calculateSpeed(step, arrayOfValues, currentPercentage) {\n      var botLimitIndex = Math.floor(currentPercentage / step);\n\n      if (botLimitIndex === arrayOfValues.length - 1) {\n        return arrayOfValues[botLimitIndex].toFixed(1);\n      }\n\n      var limitZonePercentage = currentPercentage / step % 1;\n      var limitZoneLength = Math.abs(arrayOfValues[botLimitIndex] - arrayOfValues[botLimitIndex + 1]);\n      var realZoneSpeed = limitZonePercentage * limitZoneLength;\n      var realSpeed = (realZoneSpeed + arrayOfValues[botLimitIndex]).toFixed(1);\n\n      if (realSpeed == 0) {\n        return \"0.0\";\n      }\n\n      return realSpeed;\n    }\n  }, {\n    key: \"createPreviewDisplay\",\n    value: function createPreviewDisplay() {\n      var definition = this.clip.exportState({\n        unprocessed: true\n      });\n      definition.props.host = elid(\"\".concat(this.name, \"-hover-display\"));\n      definition.props.isPreviewClip = true;\n      this.previewClip = MC.ClipFromDefinition(definition, this.clipClass);\n      var previewClip = this.previewClip.rootElement;\n      this.previewClip.ownContext.isPreviewClip = true;\n      previewClip.style.position = \"absolute\";\n      previewClip.style.zIndex = 1;\n      this.setPreviewDimentions();\n    }\n  }, {\n    key: \"setPreviewDimentions\",\n    value: function setPreviewDimentions() {\n      var clip = this.clip.rootElement;\n      var previewClip = this.previewClip.rootElement;\n      var clipWidth = clip.offsetWidth;\n      var clipHeight = clip.offsetHeight;\n      var previewRatio = 0.25;\n      var previewWidth = clipWidth * previewRatio; // max width is 300\n\n      if (previewWidth > parseFloat(elid(\"\".concat(this.name, \"-hover-display\")).style.maxWidth)) {\n        previewWidth = parseFloat(elid(\"\".concat(this.name, \"-hover-display\")).style.maxWidth);\n      }\n\n      elid(\"\".concat(this.name, \"-hover-display\")).style.width = previewWidth + \"px\";\n      var previewHeight = clipHeight / clipWidth * previewWidth;\n      elid(\"\".concat(this.name, \"-hover-display\")).style.height = previewHeight + \"px\";\n      var scaleY = previewHeight / clipHeight;\n      var scaleX = previewWidth / clipWidth;\n      previewClip.style.transform = \"scale(\".concat(scaleX, \",\").concat(scaleY, \")\");\n      previewClip.style.transformOrigin = \"center bottom\";\n      previewClip.style.boxSizing = \"border-box\"; // check if width of iframe is percentage\n\n      if (this.clip.props.containerParams.width.includes(\"%\")) {\n        if (previewWidth / previewRatio - 2 / previewRatio > parseFloat(elid(\"\".concat(this.name, \"-hover-display\")).style.maxWidth)) {\n          previewClip.style.width = \"298px\";\n        } else {\n          previewClip.style.width = previewWidth / previewRatio - 2 / previewRatio + \"px\";\n        }\n      }\n\n      if (this.clip.props.containerParams.height.includes(\"%\")) {\n        if (previewWidth / previewRatio - 2 / previewRatio > parseFloat(elid(\"\".concat(this.name, \"-hover-display\")).style.maxWidth)) {\n          previewClip.style.height = clipHeight / clipWidth * 300 - 2 + \"px\";\n        } else {\n          previewClip.style.height = previewHeight / previewRatio - 2 / previewRatio + \"px\";\n        }\n      }\n    }\n  }]);\n\n  return Player;\n}();\n\nmodule.exports = Player;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/Player.js\n");

/***/ }),

/***/ "../src/config.js":
/*!************************!*\
  !*** ../src/config.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  // the players start name\n  name: \"mc-player\",\n\n  // set the players total name\n  set playerName(name) {\n    this.name += \"-\" + name;\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2NvbmZpZy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvY29uZmlnLmpzPzEyMDYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIHRoZSBwbGF5ZXJzIHN0YXJ0IG5hbWVcbiAgbmFtZTogXCJtYy1wbGF5ZXJcIixcblxuICAvLyBzZXQgdGhlIHBsYXllcnMgdG90YWwgbmFtZVxuICBzZXQgcGxheWVyTmFtZShuYW1lKSB7XG4gICAgdGhpcy5uYW1lICs9IFwiLVwiICsgbmFtZTtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/config.js\n");

/***/ }),

/***/ "../src/helpers.js":
/*!*************************!*\
  !*** ../src/helpers.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  el: function el(selector) {\n    return document.querySelectorAll(selector);\n  },\n  elid: function elid(id) {\n    return document.getElementById(id);\n  },\n  eltag: function eltag(tag) {\n    return document.getElementsByTagName(tag);\n  },\n  elcreate: function elcreate(tag) {\n    return document.createElement(tag);\n  },\n  addListener: function addListener() {\n    var _document;\n\n    return (_document = document).addEventListener.apply(_document, arguments);\n  },\n  removeListener: function removeListener() {\n    var _document2;\n\n    return (_document2 = document).removeEventListener.apply(_document2, arguments);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2hlbHBlcnMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2hlbHBlcnMuanM/YmMxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWw6IHNlbGVjdG9yID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLFxuICBlbGlkOiBpZCA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksXG4gIGVsdGFnOiB0YWcgPT4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKSxcbiAgZWxjcmVhdGU6IHRhZyA9PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyksXG4gIGFkZExpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciguLi5hcmd1bWVudHMpO1xuICB9LFxuICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoLi4uYXJndW1lbnRzKTtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQVZBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/helpers.js\n");

/***/ }),

/***/ "../src/html/playerHTML.js":
/*!*********************************!*\
  !*** ../src/html/playerHTML.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (config) {\n  return \"\\n  <div\\n    class=\\\"pointer-event-panel\\\"\\n    id=\\\"\".concat(config.name, \"-pointer-event-panel\\\"\\n  ></div>\\n  <div\\n    class=\\\"pointer-event-panel\\\"\\n    id=\\\"\").concat(config.name, \"-listener-helper\\\"\\n  ></div>\\n  <div class=\\\"grad\\\"></div>\\n  <div class=\\\"background\\\"></div>\\n  <div id=\\\"\").concat(config.name, \"-controls\\\">\\n    <div id=\\\"\").concat(config.name, \"-totalbar\\\">\\n      <div id=\\\"\").concat(config.name, \"-hover-display\\\">\\n        <div id=\\\"\").concat(config.name, \"-hover-millisecond\\\"></div>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-loopbar\\\">\\n        <div\\n          class=\\\"\").concat(config.name, \"-loop-boundaries\\\"\\n          id=\\\"\").concat(config.name, \"-loopbar-start\\\"\\n        ></div>\\n        <div\\n          class=\\\"\").concat(config.name, \"-loop-boundaries\\\"\\n          id=\\\"\").concat(config.name, \"-loopbar-end\\\"\\n        ></div>\\n        <div id=\\\"\").concat(config.name, \"-helperbar\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-runningbar\\\">\\n          <div id=\\\"\").concat(config.name, \"-cursor\\\"></div>\\n        </div>\\n      </div>\\n    </div>\\n    <div id=\\\"\").concat(config.name, \"-left-controls\\\">\\n      <div id=\\\"\").concat(config.name, \"-status-btn\\\">\\n        \").concat(config.svg.playSVG, \"\\n        <span id=\\\"\").concat(config.name, \"-indicator\\\"></span>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-volume\\\">\\n        <div id=\\\"\").concat(config.name, \"-volume-btn\\\">\\n          \").concat(config.svg.volumeSVG, \"\\n        </div>\\n        <div id=\\\"\").concat(config.name, \"-volumebar-helper\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-volumebar\\\">\\n            <div id=\\\"\").concat(config.name, \"-volumebar-active\\\">\\n              <div id=\\\"\").concat(config.name, \"-volume-cursor\\\"></div>\\n            </div>\\n        </div>\\n      </div>\\n      <div id=\\\"\").concat(config.name, \"-time-display\\\">\\n        <span id=\\\"\").concat(config.name, \"-time-current\\\"></span>\\n        <span id=\\\"\").concat(config.name, \"-time-separator\\\"></span>\\n        <span id=\\\"\").concat(config.name, \"-time-total\\\"></span>\\n      </div>\\n    </div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-full-screen-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\").concat(config.svg.fullScreenSVG, \"</div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-settings-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\").concat(config.svg.settingsSVG, \"</div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-dc-btn\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\\n      \").concat(config.svg.dcSVG, \"\\n    </div>\\n    <div\\n      id=\\\"\").concat(config.name, \"-loop-btn-container\\\"\\n      class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n    >\\n      <div\\n        id=\\\"\").concat(config.name, \"-loop-btn\\\"\\n        class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n      >\").concat(config.svg.loopSVG, \"</div>\\n      <div\\n        id=\\\"\").concat(config.name, \"-loop-time\\\"\\n        class=\\\"\").concat(config.name, \"-mc-right-controls\\\"\\n      >\\n        <span\\n          id=\\\"\").concat(config.name, \"-loopbar-start-time\\\"\\n          class=\\\"\").concat(config.name, \"-loopbar-time\\\"\\n        ></span>\\n        <span>:</span>\\n        <span\\n          id=\\\"\").concat(config.name, \"-loopbar-end-time\\\"\\n          class=\\\"\").concat(config.name, \"-loopbar-time\\\"\\n        ></span>\\n      </div>\\n    </div>\\n\\n  </div>\\n  <div id=\\\"\").concat(config.name, \"-settings-panel\\\">\\n    <ul id=\\\"\").concat(config.name, \"-main-settings\\\">\\n      <li id=\\\"\").concat(config.name, \"-settings-pointer-events\\\">\\n        <label>Pointer Events</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-pointer-events-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-preview\\\">\\n        <label>Show Preview</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-preview-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-indicator\\\">\\n        <label>Show Indicator</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-indicator-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-volume\\\">\\n        <label>Show Volume</label>\\n        <label class=\\\"switch settings-switch\\\">\\n          <input id=\\\"\").concat(config.name, \"-show-volume-checkbox\\\" type=\\\"checkbox\\\">\\n          <span class=\\\"slider round\\\"></span>\\n        </label>\\n      </li>\\n      <li id=\\\"\").concat(config.name, \"-settings-speed-show\\\">\\n        <label>Speed</label>\\n        <div class=\\\"\").concat(config.name, \"-speed-btn\\\">\").concat(config.svg.arrowRightSVG, \"</div>\\n        <span id=\\\"\").concat(config.name, \"-speed-current\\\"></span>\\n      </li>\\n    </ul>\\n    <ul id=\\\"\").concat(config.name, \"-speed-settings\\\">\\n      <li id=\\\"\").concat(config.name, \"-settings-speed-hide\\\">\\n        <div class=\\\"\").concat(config.name, \"-speed-btn\\\">\").concat(config.svg.arrowLeftSVG, \"</div>\\n        <label id=\").concat(config.name, \"-speed-runtime>Speed</label>\\n      </li>\\n      <li>\\n        <div id=\\\"\").concat(config.name, \"-speed-value-helperbar\\\"></div>\\n        <div id=\\\"\").concat(config.name, \"-speed-value-bar\\\">\\n          <div\\n            class=\\\"\").concat(config.name, \"-speed-value-step\\\"\\n            id=\\\"\").concat(config.name, \"-speed-cursor\\\"\\n          >\\n            <div></div>\\n          </div>\\n        </div>\\n        <div id=\\\"\").concat(config.name, \"-speed-value\\\">\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2h0bWwvcGxheWVySFRNTC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvaHRtbC9wbGF5ZXJIVE1MLmpzPzNkMDUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBjb25maWcgPT4gYFxuICA8ZGl2XG4gICAgY2xhc3M9XCJwb2ludGVyLWV2ZW50LXBhbmVsXCJcbiAgICBpZD1cIiR7Y29uZmlnLm5hbWV9LXBvaW50ZXItZXZlbnQtcGFuZWxcIlxuICA+PC9kaXY+XG4gIDxkaXZcbiAgICBjbGFzcz1cInBvaW50ZXItZXZlbnQtcGFuZWxcIlxuICAgIGlkPVwiJHtjb25maWcubmFtZX0tbGlzdGVuZXItaGVscGVyXCJcbiAgPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiZ3JhZFwiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiYmFja2dyb3VuZFwiPjwvZGl2PlxuICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tY29udHJvbHNcIj5cbiAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tdG90YWxiYXJcIj5cbiAgICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS1ob3Zlci1kaXNwbGF5XCI+XG4gICAgICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS1ob3Zlci1taWxsaXNlY29uZFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tbG9vcGJhclwiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9XCIke2NvbmZpZy5uYW1lfS1sb29wLWJvdW5kYXJpZXNcIlxuICAgICAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tbG9vcGJhci1zdGFydFwiXG4gICAgICAgID48L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbG9vcC1ib3VuZGFyaWVzXCJcbiAgICAgICAgICBpZD1cIiR7Y29uZmlnLm5hbWV9LWxvb3BiYXItZW5kXCJcbiAgICAgICAgPjwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0taGVscGVyYmFyXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS1ydW5uaW5nYmFyXCI+XG4gICAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LWN1cnNvclwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS1sZWZ0LWNvbnRyb2xzXCI+XG4gICAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tc3RhdHVzLWJ0blwiPlxuICAgICAgICAke2NvbmZpZy5zdmcucGxheVNWR31cbiAgICAgICAgPHNwYW4gaWQ9XCIke2NvbmZpZy5uYW1lfS1pbmRpY2F0b3JcIj48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgaWQ9XCIke2NvbmZpZy5uYW1lfS12b2x1bWVcIj5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZS1idG5cIj5cbiAgICAgICAgICAke2NvbmZpZy5zdmcudm9sdW1lU1ZHfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZWJhci1oZWxwZXJcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZWJhclwiPlxuICAgICAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZWJhci1hY3RpdmVcIj5cbiAgICAgICAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXZvbHVtZS1jdXJzb3JcIj48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXRpbWUtZGlzcGxheVwiPlxuICAgICAgICA8c3BhbiBpZD1cIiR7Y29uZmlnLm5hbWV9LXRpbWUtY3VycmVudFwiPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4gaWQ9XCIke2NvbmZpZy5uYW1lfS10aW1lLXNlcGFyYXRvclwiPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4gaWQ9XCIke2NvbmZpZy5uYW1lfS10aW1lLXRvdGFsXCI+PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdlxuICAgICAgaWQ9XCIke2NvbmZpZy5uYW1lfS1mdWxsLXNjcmVlbi1idG5cIlxuICAgICAgY2xhc3M9XCIke2NvbmZpZy5uYW1lfS1tYy1yaWdodC1jb250cm9sc1wiXG4gICAgPiR7Y29uZmlnLnN2Zy5mdWxsU2NyZWVuU1ZHfTwvZGl2PlxuICAgIDxkaXZcbiAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3MtYnRuXCJcbiAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbWMtcmlnaHQtY29udHJvbHNcIlxuICAgID4ke2NvbmZpZy5zdmcuc2V0dGluZ3NTVkd9PC9kaXY+XG4gICAgPGRpdlxuICAgICAgaWQ9XCIke2NvbmZpZy5uYW1lfS1kYy1idG5cIlxuICAgICAgY2xhc3M9XCIke2NvbmZpZy5uYW1lfS1tYy1yaWdodC1jb250cm9sc1wiXG4gICAgPlxuICAgICAgJHtjb25maWcuc3ZnLmRjU1ZHfVxuICAgIDwvZGl2PlxuICAgIDxkaXZcbiAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tbG9vcC1idG4tY29udGFpbmVyXCJcbiAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbWMtcmlnaHQtY29udHJvbHNcIlxuICAgID5cbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9XCIke2NvbmZpZy5uYW1lfS1sb29wLWJ0blwiXG4gICAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbWMtcmlnaHQtY29udHJvbHNcIlxuICAgICAgPiR7Y29uZmlnLnN2Zy5sb29wU1ZHfTwvZGl2PlxuICAgICAgPGRpdlxuICAgICAgICBpZD1cIiR7Y29uZmlnLm5hbWV9LWxvb3AtdGltZVwiXG4gICAgICAgIGNsYXNzPVwiJHtjb25maWcubmFtZX0tbWMtcmlnaHQtY29udHJvbHNcIlxuICAgICAgPlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tbG9vcGJhci1zdGFydC10aW1lXCJcbiAgICAgICAgICBjbGFzcz1cIiR7Y29uZmlnLm5hbWV9LWxvb3BiYXItdGltZVwiXG4gICAgICAgID48L3NwYW4+XG4gICAgICAgIDxzcGFuPjo8L3NwYW4+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgaWQ9XCIke2NvbmZpZy5uYW1lfS1sb29wYmFyLWVuZC10aW1lXCJcbiAgICAgICAgICBjbGFzcz1cIiR7Y29uZmlnLm5hbWV9LWxvb3BiYXItdGltZVwiXG4gICAgICAgID48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICA8L2Rpdj5cbiAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXNldHRpbmdzLXBhbmVsXCI+XG4gICAgPHVsIGlkPVwiJHtjb25maWcubmFtZX0tbWFpbi1zZXR0aW5nc1wiPlxuICAgICAgPGxpIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3MtcG9pbnRlci1ldmVudHNcIj5cbiAgICAgICAgPGxhYmVsPlBvaW50ZXIgRXZlbnRzPC9sYWJlbD5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoIHNldHRpbmdzLXN3aXRjaFwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7Y29uZmlnLm5hbWV9LXBvaW50ZXItZXZlbnRzLWNoZWNrYm94XCIgdHlwZT1cImNoZWNrYm94XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJzbGlkZXIgcm91bmRcIj48L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2xpPlxuICAgICAgPGxpIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3MtcHJldmlld1wiPlxuICAgICAgICA8bGFiZWw+U2hvdyBQcmV2aWV3PC9sYWJlbD5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoIHNldHRpbmdzLXN3aXRjaFwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7Y29uZmlnLm5hbWV9LXNob3ctcHJldmlldy1jaGVja2JveFwiIHR5cGU9XCJjaGVja2JveFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2xpZGVyIHJvdW5kXCI+PC9zcGFuPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9saT5cbiAgICAgIDxsaSBpZD1cIiR7Y29uZmlnLm5hbWV9LXNldHRpbmdzLWluZGljYXRvclwiPlxuICAgICAgICA8bGFiZWw+U2hvdyBJbmRpY2F0b3I8L2xhYmVsPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJzd2l0Y2ggc2V0dGluZ3Mtc3dpdGNoXCI+XG4gICAgICAgICAgPGlucHV0IGlkPVwiJHtjb25maWcubmFtZX0tc2hvdy1pbmRpY2F0b3ItY2hlY2tib3hcIiB0eXBlPVwiY2hlY2tib3hcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInNsaWRlciByb3VuZFwiPjwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvbGk+XG4gICAgICA8bGkgaWQ9XCIke2NvbmZpZy5uYW1lfS1zZXR0aW5ncy12b2x1bWVcIj5cbiAgICAgICAgPGxhYmVsPlNob3cgVm9sdW1lPC9sYWJlbD5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoIHNldHRpbmdzLXN3aXRjaFwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7Y29uZmlnLm5hbWV9LXNob3ctdm9sdW1lLWNoZWNrYm94XCIgdHlwZT1cImNoZWNrYm94XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJzbGlkZXIgcm91bmRcIj48L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2xpPlxuICAgICAgPGxpIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3Mtc3BlZWQtc2hvd1wiPlxuICAgICAgICA8bGFiZWw+U3BlZWQ8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiJHtjb25maWcubmFtZX0tc3BlZWQtYnRuXCI+JHtjb25maWcuc3ZnLmFycm93UmlnaHRTVkd9PC9kaXY+XG4gICAgICAgIDxzcGFuIGlkPVwiJHtjb25maWcubmFtZX0tc3BlZWQtY3VycmVudFwiPjwvc3Bhbj5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgICA8dWwgaWQ9XCIke2NvbmZpZy5uYW1lfS1zcGVlZC1zZXR0aW5nc1wiPlxuICAgICAgPGxpIGlkPVwiJHtjb25maWcubmFtZX0tc2V0dGluZ3Mtc3BlZWQtaGlkZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiJHtjb25maWcubmFtZX0tc3BlZWQtYnRuXCI+JHtjb25maWcuc3ZnLmFycm93TGVmdFNWR308L2Rpdj5cbiAgICAgICAgPGxhYmVsIGlkPSR7Y29uZmlnLm5hbWV9LXNwZWVkLXJ1bnRpbWU+U3BlZWQ8L2xhYmVsPlxuICAgICAgPC9saT5cbiAgICAgIDxsaT5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXNwZWVkLXZhbHVlLWhlbHBlcmJhclwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwiJHtjb25maWcubmFtZX0tc3BlZWQtdmFsdWUtYmFyXCI+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCIke2NvbmZpZy5uYW1lfS1zcGVlZC12YWx1ZS1zdGVwXCJcbiAgICAgICAgICAgIGlkPVwiJHtjb25maWcubmFtZX0tc3BlZWQtY3Vyc29yXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIiR7Y29uZmlnLm5hbWV9LXNwZWVkLXZhbHVlXCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbmA7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/html/playerHTML.js\n");

/***/ }),

/***/ "../src/html/setElements.js":
/*!**********************************!*\
  !*** ../src/html/setElements.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    elcreate = _require.elcreate;\n\nvar svg = __webpack_require__(/*! ./svg */ \"../src/html/svg.js\");\n\nvar playerHTML = __webpack_require__(/*! ./playerHTML */ \"../src/html/playerHTML.js\");\n\nmodule.exports = function (_this) {\n  _this.elements = {};\n  var clipIframe = _this.clip.rootElement; // set _this.clip position to relative\n\n  clipIframe.style.display = \"block\";\n  clipIframe.style.margin = \"0 auto\";\n  _this.clip.props.host.style.position = \"relative\";\n  _this.clip.props.host.style.zIndex = \"0\";\n  _this.elements.mcPlayer = elcreate(\"div\");\n  _this.elements.mcPlayer.id = \"\".concat(_this.name);\n  _this.elements.mcPlayer.className = \"\".concat(_this.className);\n  _this.elements.mcPlayer.innerHTML = playerHTML({\n    svg: svg,\n    name: _this.name\n  });\n\n  _this.options.host.appendChild(_this.elements.mcPlayer);\n\n  _this.elements.pointerEventPanel = elid(\"\".concat(_this.name, \"-pointer-event-panel\"));\n  _this.elements.listenerHelper = elid(\"\".concat(_this.name, \"-listener-helper\"));\n  _this.elements.loopBar = elid(\"\".concat(_this.name, \"-loopbar\"));\n  _this.elements.totalBar = elid(\"\".concat(_this.name, \"-totalbar\"));\n  _this.elements.indicator = elid(\"\".concat(_this.name, \"-indicator\"));\n  _this.elements.loopButton = elid(\"\".concat(_this.name, \"-loop-btn\"));\n  _this.elements.volumeBar = elid(\"\".concat(_this.name, \"-volumebar\"));\n  _this.elements.totalTime = elid(\"\".concat(_this.name, \"-time-total\"));\n  _this.elements.volumeControl = elid(\"\".concat(_this.name, \"-volume\"));\n  _this.elements.volumeBtn = elid(\"\".concat(_this.name, \"-volume-btn\"));\n  _this.elements.runningBar = elid(\"\".concat(_this.name, \"-runningbar\"));\n  _this.elements.loopBarEnd = elid(\"\".concat(_this.name, \"-loopbar-end\"));\n  _this.elements.statusButton = elid(\"\".concat(_this.name, \"-status-btn\"));\n  _this.elements.speedBar = elid(\"\".concat(_this.name, \"-speed-value-bar\"));\n  _this.elements.currentTime = elid(\"\".concat(_this.name, \"-time-current\"));\n  _this.elements.timeDisplay = elid(\"\".concat(_this.name, \"-time-display\"));\n  _this.elements.speedCurrent = elid(\"\".concat(_this.name, \"-speed-current\"));\n  _this.elements.loopBarStart = elid(\"\".concat(_this.name, \"-loopbar-start\"));\n  _this.elements.volumeCursor = elid(\"\".concat(_this.name, \"-volume-cursor\"));\n  _this.elements.settingsButton = elid(\"\".concat(_this.name, \"-settings-btn\"));\n  _this.elements.donkeyclipButton = elid(\"\".concat(_this.name, \"-dc-btn\"));\n  _this.elements.timeSeparator = elid(\"\".concat(_this.name, \"-time-separator\"));\n  _this.elements.settingsPanel = elid(\"\".concat(_this.name, \"-settings-panel\"));\n  _this.elements.settingsMainPanel = elid(\"\".concat(_this.name, \"-main-settings\"));\n  _this.elements.fullScreenButton = elid(\"\".concat(_this.name, \"-full-screen-btn\"));\n  _this.elements.volumeBarHelper = elid(\"\".concat(_this.name, \"-volumebar-helper\"));\n  _this.elements.volumeBarActive = elid(\"\".concat(_this.name, \"-volumebar-active\"));\n  _this.elements.settingsSpeedPanel = elid(\"\".concat(_this.name, \"-speed-settings\"));\n  _this.elements.settingsShowVolume = elid(\"\".concat(_this.name, \"-settings-volume\"));\n  _this.elements.settingsShowPreview = elid(\"\".concat(_this.name, \"-settings-preview\"));\n  _this.elements.settingsPointerEvents = elid(\"\".concat(_this.name, \"-settings-pointer-events\"));\n  _this.elements.speedBarHelper = elid(\"\".concat(_this.name, \"-speed-value-helperbar\"));\n  _this.elements.settingsShowIndicator = elid(\"\".concat(_this.name, \"-settings-indicator\"));\n  _this.elements.settingsSpeedButtonShow = elid(\"\".concat(_this.name, \"-settings-speed-show\"));\n  _this.elements.settingsSpeedButtonHide = elid(\"\".concat(_this.name, \"-settings-speed-hide\"));\n  _this.elements.volumeBarActive.style.width = _this.settings.volume * 100 + \"%\";\n  _this.elements.currentTime.innerHTML = 0;\n  _this.elements.totalTime.innerHTML = _this.clip.duration;\n  _this.elements.timeSeparator.innerHTML = \"/\";\n\n  _this.elements.settingsPanel.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.indicator.style.visibility = \"hidden\";\n  _this.elements.indicator.innerHTML = _this.clip.state;\n  _this.elements.settingsSpeedPanel.style.display = \"none\";\n\n  _this.elements.settingsSpeedPanel.getElementsByTagName(\"li\")[1].classList.add(\"no-hover\");\n\n  _this.elements.loopBarStart.style.left = \"0%\";\n\n  _this.elements.loopBarStart.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.loopBarEnd.style.left = \"100%\";\n\n  _this.elements.loopBarEnd.classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n\n  _this.elements.loopStartTime = elid(\"\".concat(_this.name, \"-loopbar-start-time\"));\n  _this.elements.loopEndTime = elid(\"\".concat(_this.name, \"-loopbar-end-time\"));\n  _this.elements.editableLoopStartTime = document.createElement(\"input\");\n  _this.elements.editableLoopStartTime.type = \"text\";\n  _this.elements.editableLoopStartTime.size = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length + 1;\n  _this.elements.editableLoopStartTime.maxLength = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length;\n  _this.elements.editableLoopStartTime.style.height = elid(\"\".concat(_this.name, \"-time-total\")).offsetHeight;\n  _this.elements.editableLoopStartTime.value = elid(\"\".concat(_this.name, \"-loopbar-start-time\")).innerHTML;\n  _this.elements.editableLoopStartTime.style.fontSize = \"8px\";\n  _this.elements.editableLoopEndTime = document.createElement(\"input\");\n  _this.elements.editableLoopEndTime.type = \"text\";\n  _this.elements.editableLoopEndTime.size = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length + 1;\n  _this.elements.editableLoopEndTime.maxLength = elid(\"\".concat(_this.name, \"-time-total\")).innerHTML.length;\n  _this.elements.editableLoopEndTime.style.height = elid(\"\".concat(_this.name, \"-time-total\")).offsetHeight;\n  _this.elements.editableLoopEndTime.value = elid(\"\".concat(_this.name, \"-loopbar-start-time\")).innerHTML;\n  _this.elements.editableLoopEndTime.pattern = \"d*\";\n  _this.elements.editableLoopEndTime.style.fontSize = \"8px\";\n  elid(\"\".concat(_this.name, \"-loop-time\")).classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n  elid(\"\".concat(_this.name, \"-hover-display\")).classList.add(\"m-fadeOut\", \"\".concat(_this.name, \"-hide\"));\n  elid(\"\".concat(_this.name, \"-show-volume-checkbox\")).checked = _this.options.showVolume;\n  elid(\"\".concat(_this.name, \"-show-preview-checkbox\")).checked = _this.options.preview;\n  elid(\"\".concat(_this.name, \"-pointer-events-checkbox\")).checked = _this.options.pointerEvents;\n\n  if (_this.options.pointerEvents) {\n    _this.elements.mcPlayer.style.pointerEvents = \"none\";\n    _this.elements.pointerEventPanel.style.pointerEvents = \"auto\";\n    elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n    _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n  } else {\n    _this.elements.mcPlayer.style.pointerEvents = \"none\";\n    _this.elements.pointerEventPanel.style.pointerEvents = \"none\";\n    elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n    _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n  }\n\n  _this.elements.listenerHelper.style.pointerEvents = \"none\";\n\n  if (!_this.options.showVolume) {\n    _this.elements.timeDisplay.style.left = \"45px\";\n    _this.elements.volumeControl.style.visibility = \"hidden\";\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n  } else {\n    _this.elements.timeDisplay.style.left = \"\";\n    _this.elements.volumeControl.style.visibility = \"visible\";\n  }\n\n  for (var i in _this.options.speedValues) {\n    var barDiv = elcreate(\"div\");\n    barDiv.className = \"\".concat(_this.name, \"-speed-value-step\");\n    var valueDiv = elcreate(\"div\");\n    valueDiv.className = \"\".concat(_this.name, \"-speed-value\");\n    valueDiv.dataset.speedValue = _this.options.speedValues[i];\n    valueDiv.innerHTML = _this.options.speedValues[i];\n    valueDiv.dataset.zone = i;\n    elid(\"\".concat(_this.name, \"-speed-value\")).prepend(valueDiv);\n\n    _this.elements.speedBar.prepend(barDiv);\n  } // show hide buttons\n\n\n  if (_this.options.buttons.fullScreen === false) {\n    _this.elements.fullScreenButton.remove();\n  }\n\n  if (_this.options.buttons.settings === false) {\n    _this.elements.settingsButton.remove();\n  }\n\n  if (_this.options.buttons.donkeyclip === false) {\n    _this.elements.donkeyclipButton.remove();\n  }\n\n  if (_this.options.buttons.loop === false) {\n    _this.elements.loopButton.remove();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/html/setElements.js\n");

/***/ }),

/***/ "../src/html/style.js":
/*!****************************!*\
  !*** ../src/html/style.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (theme, name, options) {\n  return \"\\n.background {\\n  background-color: black;\\n  width:100%;\\n  height:\".concat(theme[\"background-height\"], \";;\\n  position:absolute;\\n  top:0px;\\n  left:0px;\\n  z-index:-2000;\\n}\\n\\n.full-screen #\").concat(name, \"-controls {\\n  position:fixed;\\n  left:0px;\\n  bottom:0px;\\n}\\n\\n.full-screen #\").concat(name, \"-settings-panel {\\n  position:fixed;\\n  bottom: 45px;\\n}\\n\\n.svg {\\n  fill: \").concat(theme[\"svg-color\"], \";\\n  stroke: \").concat(theme[\"svg-color\"], \";\\n}\\n\\n.pointer-event-panel {\\n  height: \").concat(theme[\"pointer-event-panel-height\"], \";\\n}\\n#\").concat(name, \"-pointer-event-panel{\\n  width:100%;\\n  position:absolute;\\n  z-index:100;\\n}\\n#\").concat(name, \"-listener-helper{\\n  width:100%;\\n  height:calc( 100% - 45px );\\n  position:absolute;\\n  z-index:110;\\n}\\n.svg-selected svg{\\n  fill: \").concat(theme[\"svg-selected-color\"], \";\\n  stroke: \").concat(theme[\"svg-selected-color\"], \";\\n}\\n#\").concat(name, \"-hover-display{\\n    border: \").concat(theme[\"preview-border\"], \";\\n    max-width:300px;\\n    display: flex;\\n    overflow:hidden;\\n    background-color: black;\\n    position: absolute;\\n    bottom: 14px;\\n    left: 0px;\\n    align-items: flex-end;\\n    justify-content: center;\\n}\\n\\n#\").concat(name, \"-hover-millisecond {\\n  background-color: \").concat(theme[\"hms-background-color\"], \";\\n  padding:3px;\\n  height:18px;\\n  margin:0px;\\n  line-height:12px;\\n  font-size:10px;\\n  text-align: center;\\n  min-width:20px;\\n  max-width:100px;\\n  z-index:2;\\n}\\n#\").concat(name, \",\\n#\").concat(name, \" ::before,\\n#\").concat(name, \" ::after,\\n#\").concat(name, \" div,\\n#\").concat(name, \" p,\\n#\").concat(name, \" span,\\n#\").concat(name, \" ul,\\n#\").concat(name, \" li {\\n  font-weight: 400;\\n  line-height: 1.9 !important;\\n  color: \").concat(theme[\"color\"], \";\\n  font-family: \\\"Century Gothic\\\", CenturyGothic, AppleGothic, sans-serif;\\n  box-sizing:border-box;\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n}\\n#\").concat(name, \" {\\n  line-height: 1.9;\\n  font-size: 12px;\\n  overflow:hidden;\\n  height: calc(100% + \").concat(theme[\"controls-position\"], \");\\n  width:100%;\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  \\n}\\n\\n#\").concat(name, \"-settings-speed-hide {\\n  text-align:right;\\n}\\n\\n.grad {\\n  background-image: linear-gradient(\\n    rgba(100,100,100,00.01),\\n    rgba(100,100,100,00.02),\\n    rgba(100,100,100,00.03),\\n    rgba(100,100,100,0.04),\\n    rgba(100,100,100,0.05),\\n    rgba(0,0,0,0.06),\\n    rgba(0,0,0,0.07),\\n    rgba(0,0,0,0.08),\\n    rgba(0,0,0,0.09),\\n    rgba(0,0,0,0.1),\\n    rgba(0,0,0,0.2),\\n    rgba(0,0,0,0.3),\\n    rgba(0,0,0,0.4),\\n    rgba(0,0,0,0.4),\\n    rgba(0,0,0,0.5),\\n    rgba(0,0,0,0.6),\\n    rgba(0,0,0,0.7),\\n    rgba(0,0,0,0.8),\\n    rgba(0,0,0,0.9),\\n    rgba(0,0,0,1)\\n  );\\n  position:absolute;\\n  width:100%;\\n  height:\").concat(theme[\"grad-height\"], \";\\n  left:0px;\\n  bottom:0px;\\n}\\n\\n#\").concat(name, \"-controls {\\n  touch-action: none;\\n  background-color: \").concat(theme[\"background-color\"], \";\\n  border: \").concat(theme[\"controls-border\"], \";\\n  position: absolute;\\n  bottom: \").concat(theme[\"controls-bottom\"], \";\\n  left: 0px;\\n  width: 100%;\\n  height: 40px;\\n  z-index:100;\\n}\\n\\n#\").concat(name, \"-totalbar {\\n  width: calc(100% - 20px);\\n  height: 5px;\\n  margin: 0px 10px 0px 10px;\\n  background-color: #505056;\\n  position: relative;\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n#\").concat(name, \"-loopbar {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n  top: 0px;\\n  left: 0px;\\n  background-color: \").concat(theme[\"loopbar-color\"], \";\\n}\\n\\n.\").concat(name, \"-loop-boundaries {\\n  transform:translate(-50%,-37%);\\n  position:absolute;\\n  width:18px;\\n  background-color:\").concat(theme[\"loopbar-color\"], \";\\n  height:18px;\\n  border-radius:10px;\\n  z-index:40;\\n}\\n\\n#\").concat(name, \"-helperbar {\\n  position: absolute;\\n  height: 20px;\\n  top: -10px;\\n  left: 0px;\\n  right: 0px;\\n  z-index:2;\\n}\\n\\n#\").concat(name, \"-runningbar {\\n  position: relative;\\n  width: 0px;\\n  max-width:100%;\\n  height: 100%;\\n  background-color: \").concat(theme[\"runningbar-color\"], \";\\n}\\n\\n#\").concat(name, \"-cursor {\\n  transform:translate(50%,-36%);\\n  right: 0px;\\n  top: 0px;\\n  width: 0px;\\n  height: 0px;\\n  position: absolute;\\n  background-color: \").concat(theme[\"cursor-color\"], \";\\n  border-radius: 10px;\\n  z-index: 5;\\n}\\n\\n#\").concat(name, \"-left-controls {\\n  display:inline-block;\\n  width:200px;\\n  height:35px;\\n}\\n#\").concat(name, \"-time-display {\\n  display: table;\\n  text-align: center;\\n  width: auto;\\n  height: 34px;\\n  position: absolute;\\n  left: 90px;\\n  -webkit-transition: left 0.1s ease;\\n  -moz-transition: left 0.1s ease;\\n  transition: left 0.1s ease;\\n}\\n\\n#\").concat(name, \"-time-display span {\\n  display: table-cell;\\n  vertical-align: middle;\\n}\\n\\n#\").concat(name, \"-status-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 40px;\\n  height: 25px;\\n  position: absolute;\\n  overflow:visible;\\n  left: 0px;\\n  bottom: 0px;\\n  margin: 10px 5px 5px 5px;\\n  text-align: center;\\n  z-index:3;\\n}\\n\\n#\").concat(name, \"-volume {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  position: absolute;\\n  left: 45px;\\n  bottom: 5px;\\n  margin: 10px 5px 5px 5px;\\n  text-align: center;\\n  z-index:3;\\n}\\n#\").concat(name, \"-volume-btn {\\n  width: 20px;\\n  height: 15px;\\n}\\n\\n#\").concat(name, \"-volumebar {\\n  width: 0px;\\n  height: 3px;\\n  background-color: \").concat(theme[\"loopbar-color\"], \";\\n  position:absolute;\\n  left:25px;\\n  bottom:6px;\\n  -webkit-transition: left 0.1s ease;\\n  -moz-transition: left 0.1s ease;\\n  transition: left 0.1s ease;\\n}\\n\\n#\").concat(name, \"-volumebar-helper {\\n  position: absolute;\\n  width: 0px;\\n  height: 15px;\\n  left:25px;\\n  bottom:0px;\\n  z-index:10;\\n}\\n\\n#\").concat(name, \"-volumebar-active {\\n  position: relative;\\n  width: 0%;\\n  height: 100%;\\n  background-color: \").concat(theme[\"color\"], \";\\n  position:relative;\\n  left:0px;\\n  bottom:0px;\\n}\\n\\n#\").concat(name, \"-volume-cursor {\\n  transform:translate(50%,-36%);\\n  right: 0px;\\n  top: 0px;\\n  width: 0px;\\n  height: 0px;\\n  position: absolute;\\n  background-color: \").concat(theme[\"color\"], \";\\n  border-radius: 10px;\\n  z-index: 5;\\n}\\n\\n.\").concat(name, \"-loopbar-time {\\n  width:auto;\\n  height:12px;\\n  background-color:\").concat(theme[\"background-color\"], \";\\n  line-height:10px;\\n  font-size:10px;\\n}\\n\\n#\").concat(name, \"-loop-time {\\n  margin: 7px;\\n}\\n\\n#\").concat(name, \"-dc-btn {\\n    opacity: 0.8;\\n    background-repeat: no-repeat;\\n    background-size: 100% 100%;\\n    width: 20px;\\n    height: 15px;\\n    margin: 7px 10px 5px 0px;\\n    transform: scale(1.5,1.5);\\n}\\n\\n#\").concat(name, \"-loop-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n\\n#\").concat(name, \"-settings-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n#\").concat(name, \"-full-screen-btn {\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  background-repeat: no-repeat;\\n  background-size: 100% 100%;\\n  width: 15px;\\n  height: 15px;\\n  margin: 10px 5px 5px 5px;\\n}\\n\\n.\").concat(name, \"-speed-btn {\\n  position: relative;\\n  opacity: \").concat(theme[\"button-opacity\"], \";\\n  width: 10px;\\n  height: 10px;\\n  display: inline-block;\\n}\\n\\n#\").concat(name, \"-settings-panel {\\n  touch-action: none;\\n  box-sizing: border-box;\\n  position: absolute;\\n  z-index:101;\\n  background-color: \").concat(theme[\"settings-background-color\"], \";\\n  bottom: \").concat(theme[\"settings-panel-bottom\"], \";\\n  border: \").concat(theme[\"border\"], \";\\n  right: 5px;\\n  width: 164px;\\n  height: 175px;\\n  padding: 5px;\\n  margin: 0px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n.\").concat(name, \"-mc-right-controls {\\n  float: right;\\n}\\n\\n.\").concat(name, \"-hide {\\n  display:none !important;\\n}\\n\\n#\").concat(name, \"-speed-value-bar {\\n  position: relative;\\n  width: 5px;\\n  background-color: \").concat(theme[\"speedbar-color\"], \";\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  float: left;\\n  margin-right:15px;\\n}\\n\\n#\").concat(name, \"-speed-value-helperbar {\\n  position: absolute;\\n  width: 25px;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  float: left;\\n  left: -5px;\\n  z-index:10;\\n}\\n\\n\\n#\").concat(name, \"-speed-value-bar:hover,\\n#\").concat(name, \"-speed-value-helperbar {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-volumebar:hover,\\n#\").concat(name, \"-volumebar-helper:hover,\\n#\").concat(name, \"-volume-btn:hover,\\n#\").concat(name, \"-volumebar:active,\\n#\").concat(name, \"-volumebar-helper:active,\\n#\").concat(name, \"-volume-btn:active {\\n  cursor:pointer;\\n}\\n\\n#\").concat(name, \"-speed-cursor {\\n  position: absolute;\\n  background-color: \").concat(theme[\"speedbar-cursor-color\"], \";\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n#\").concat(name, \"-speed-cursor div {\\n  position: absolute;\\n  background-color: \").concat(theme[\"speedbar-cursor-color\"], \";\\n  left: -2.5px;\\n  top: -4px;\\n  width: 10px;\\n  height: 10px;\\n  border-radius: 5px;\\n}\\n\\n#\").concat(name, \"-speed-cursor:hover {\\n  cursor: pointer;\\n}\\n\\n.\").concat(name, \"-speed-value-step {\\n  width: 16px;\\n  background-color: \").concat(theme[\"speedbar-color\"], \";\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: 2px;\\n  margin-top: 7px;\\n  margin-bottom: 7px;\\n  float: left;\\n}\\n\\n#\").concat(name, \"-speed-value {\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: \").concat(options.speedValues.length * 16, \"px;\\n  text-align: left;\\n}\\n\\n.\").concat(name, \"-speed-value {\\n  box-sizing: border-box;\\n  height: 16px;\\n  font-size: 12px;\\n}\\n\\n#\").concat(name, \"-indicator {\\n  font-size: 8px !important;\\n  position: relative;\\n  bottom: 15px;\\n  color: \").concat(theme[\"color\"], \";\\n  white-space: nowrap;\\n}\\n\\n#\").concat(name, \"-speed-settings {\\n  height: \").concat(options.speedValues.length * 16 + 32 + 10 - 2, \"px;\\n}\\n\\n#\").concat(name, \"-speed-settings li.no-hover { \\n  height: \").concat(options.speedValues.length * 16 + 10 - 2, \"px; \\n}\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel {\\n  overflow: hidden;\\n  width: 80px;\\n  height: \").concat(options.speedValues.length * 16 + 32 + 20, \"px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel .\").concat(name, \"-speed-btn {\\n  float: left;\\n}\\n\\n.\").concat(name, \"-settings-speed-panel ul:first-child {\\n  text-align: right;\\n}\\n\\n#\").concat(name, \"-speed-current {\\n  float: right;\\n  padding-right: 10px\\n}\\n\\n#\").concat(name, \"-settings-panel .\").concat(name, \"-speed-btn {\\n  float: right;\\n}\\n\\n#\").concat(name, \"-settings-panel ul {\\n  width: 100%;\\n  margin: 0px;\\n  padding: 0px;\\n  overflow: hidden;\\n}\\n\\n#\").concat(name, \"-settings-panel.\").concat(name, \"-settings-speed-panel ul li {\\n  min-width: 70px;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li.no-hover:hover {\\n  background-color: transparent;\\n  cursor: default;\\n}\\n\\ndiv.\").concat(name, \"-speed-value:hover {\\n  background-color: \").concat(theme[\"hover-color\"], \";\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li {\\n  position: relative;\\n  width: 100%;\\n  min-width: 154px;\\n  list-style-type: none;\\n  margin: 0px;\\n  padding: 5px;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li label {\\n  margin: 0px;\\n}\\n\\n.switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 35px;\\n  height: 18px;\\n}\\n\\n.switch input {\\n  display: none;\\n}\\n\\n.settings-switch {\\n  float: right;\\n}\\n\\n.settings-switch:after {\\n  clear: both;\\n}\\n\\n.slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: \").concat(theme[\"slider-off-color\"], \";\\n  -webkit-transition: .4s;\\n  transition: .4s;\\n}\\n\\n.slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 16px;\\n  width: 16px;\\n  left: 1px;\\n  bottom: 1px;\\n  background-color: white;\\n  -webkit-transition: .4s;\\n  transition: .4s;\\n}\\n\\ninput:checked+.slider {\\n  background-color: \").concat(theme[\"slider-on-color\"], \";\\n}\\n\\ninput:focus+.slider {\\n  box-shadow: 0 0 1px \").concat(theme[\"slider-on-color\"], \";\\n}\\n\\ninput:checked+.slider:before {\\n  -webkit-transform: translateX(16px);\\n  -ms-transform: translateX(16px);\\n  transform: translateX(16px);\\n}\\n\\n\\n/* Rounded sliders */\\n\\n.slider.round {\\n  border-radius: 34px;\\n}\\n\\n.slider.round:before {\\n  border-radius: 50%;\\n}\\n\\n\\n.m-fadeOut {\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 300ms, opacity 300ms;\\n}\\n\\n.m-fadeIn {\\n  visibility: visible;\\n  opacity: 1;\\n  transition: visibility 0s linear 0s, opacity 300ms;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li:hover {\\n  background-color: \").concat(theme[\"hover-color\"], \";\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-settings-panel ul li label:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-loopbar:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-status-btn:hover {\\n  cursor: pointer;\\n}\\n\\n#\").concat(name, \"-controls:active #\").concat(name, \"-cursor,\\n#\").concat(name, \"-controls:hover #\").concat(name, \"-cursor  {\\n  width: 16px;\\n  height: 16px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-volume .\").concat(name, \"-volume-cursor-transition {\\n  width: 12px;\\n  height: 12px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-volume .\").concat(name, \"-volume-width-transition\\n {\\n  width: 50px;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-time-display.\").concat(name, \"-time-width-transition {\\n  left: 140px;\\n  -webkit-transition: left 0.3s ease;\\n  -moz-transition: left 0.3s ease;\\n  transition: left 0.3s ease;\\n}\\n\\n#\").concat(name, \"-settings-speed:hover .\").concat(name, \"-speed-btn {\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-status-btn:hover {\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-loop-btn:hover,\\n#\").concat(name, \"-dc-btn:hover\\n {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n#\").concat(name, \"-settings-btn:hover {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\\n\\n#\").concat(name, \"-full-screen-btn:hover {\\n  cursor: pointer;\\n  opacity: 1;\\n  -webkit-transition: all 0.3s ease;\\n  -moz-transition: all 0.3s ease;\\n  transition: all 0.3s ease;\\n}\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/html/style.js\n");

/***/ }),

/***/ "../src/html/svg.js":
/*!**************************!*\
  !*** ../src/html/svg.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var svg = module.exports = {};\nsvg.playSVG = \"\\n  <svg width=\\\"100%\\\" class=\\\"svg\\\" height=\\\"100%\\\" viewBox=\\\"0 0 36 36\\\" >\\n    <path id=\\\"play-icon\\\" data-state=\\\"paused\\\"  d=\\\"M11,10 L18,13.74 18,22.28 11,26 M18,13.74 L26,18 26,18 18,22.28\\\" />\\n  </svg>\\n\";\nsvg.dcSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 400 400\\\" style=\\\"enable-background:new 0 0 286.374 286.374;\\\" xml:space=\\\"preserve\\\">\\n<path stroke-width=\\\"10.00\\\" stroke-linecap=\\\"butt\\\" stroke-linejoin=\\\"miter\\\" opacity=\\\"1\\\" d=\\\"M 120.17407989501953 162.04714965820312 L 121.16549682617188 320.6739196777344 Q 279.79229736328125 321.66534423828125 280.78369140625 241.36053466796875 Q 281.77508544921875 161.05572509765625 439.41046142578125 160.06431579589844 L 439.41046142578125 200.71243286132812 Q 281.7751159667969 163.03857421875 280.78369140625 241.36053466796875 Q 279.7922668457031 319.6824951171875 159.8307647705078 281.0172424316406 L 158.83935546875 198.72959899902344 Q 281.7751159667969 161.05572509765625 280.78369140625 241.36053466796875 Q 279.7922668457031 321.66534423828125 440.40185546875 320.6739196777344 L 440.40185546875 280.02581787109375 Q 280.78369140625 321.66534423828125 280.78369140625 241.36053466796875 C 280.78369140625 161.05572509765625 161.8135986328125 161.05572509765625 120.17407989501953 162.04714965820312 Z\\\" selected=\\\"true\\\" transform=\\\"matrix(1 0 0 1 0 0)\\\"></path></svg>\";\nsvg.pauseSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 36 36\\\" >\\n    <path id=\\\"pause-icon\\\" data-state=\\\"playing\\\" d=\\\"M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26\\\" />\\n  </svg>\\n\";\nsvg.replaySVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1000 1000\\\" enable-background=\\\"new 0 0 1000 1000\\\" xml:space=\\\"preserve\\\">\\n    <metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>\\n    <g><g transform=\\\"translate(0.000000,511.000000) scale(0.100000,-0.100000)\\\">\\n      <path d=\\\"M5356.3,4203.8c-1247.8-153.1-2324.2-811.3-3000.7-1839.7c-379.4-578.2-596.5-1209-660.5-1933.4l-27.4-294.8H883.9c-431.9,0-783.9-6.9-783.9-18.3c0-9.2,477.6-493.7,1062.7-1078.7l1062.7-1062.7L3288.1-961.1C3873.1-376,4350.8,108.5,4350.8,117.6c0,11.4-356.5,18.3-790.7,18.3h-793l18.3,189.7C2831,876.3,2991,1338,3288.1,1779.1C4122.3,3026.9,5706,3472.5,7065.8,2841.8C7639.4,2578.9,8197,2035,8487.3,1461.4C8581,1274,8709,896.9,8754.7,666.1c48-246.8,54.8-811.3,9.1-1055.8C8567.3-1491.3,7788-2394,6720.7-2750.5c-315.4-107.4-541.6-139.4-941.6-139.4c-287.9,0-415.9,11.4-598.8,50.3c-523.3,112-973.6,335.9-1371.2,681c-75.4,68.6-148.5,123.4-160,123.4c-9.1,0-187.4-169.1-393.1-374.8c-434.2-434.2-420.5-363.4-105.1-628.5c852.4-710.7,1972.3-1055.8,3046.4-937c1627.2,176,2977.8,1257,3489.8,2790.4c457.1,1368.9,169.1,2843-777,3969.7C8322.7,3484,7417.8,4000.4,6503.6,4160.4C6197.4,4213,5619.2,4235.8,5356.3,4203.8z\\\"/>\\n      <path d=\\\"M4990.7,124.5c0-1503.8,4.6-1794,32-1778c16,9.1,505.1,413.6,1085.6,895.8C7113.8,78.8,7161.8,122.2,7122.9,161c-80,75.4-2109.4,1757.5-2120.8,1757.5C4995.3,1918.5,4990.7,1111.8,4990.7,124.5z\\\"/>\\n    </g></g>\\n  </svg>\\n\";\nsvg.volumeSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 286.374 286.374\\\" style=\\\"enable-background:new 0 0 286.374 286.374;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Volume_2\\\">\\n      <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M233.636,26.767l-33.372,28.5c25.659,21.07,42.006,52.616,42.006,87.92\\n        c0,35.305-16.347,66.851-42.006,87.921l33.372,28.499c32.324-28.869,52.738-70.268,52.738-116.421\\n        C286.374,97.034,265.96,55.635,233.636,26.767z M177.737,74.513l-34.69,29.64c15.14,6.818,27.19,21.681,27.19,39.034\\n        s-12.05,32.216-27.19,39.034l34.69,29.64c21.294-15.717,36.051-40.586,36.051-68.674C213.788,115.099,199.03,90.23,177.737,74.513z\\n         M108.672,48.317L44.746,98.441H17.898C4.671,98.441,0,103.268,0,116.34v53.695c0,13.072,4.951,17.898,17.898,17.898h26.848\\n        l63.926,50.068c7.668,4.948,16.558,6.505,16.558-7.365V55.683C125.23,41.813,116.34,43.37,108.672,48.317z\\\"/>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.volumeMuteSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n   viewBox=\\\"0 0 286.277 286.277\\\" style=\\\"enable-background:new 0 0 286.277 286.277;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Volume_none\\\">\\n      <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M245.102,143.151l36.98-37.071c5.593-5.605,5.593-14.681,0-20.284\\n        l-10.124-10.142c-5.593-5.604-14.655-5.604-20.247,0l-36.98,37.071l-36.977-37.043c-5.594-5.603-14.654-5.603-20.247,0\\n        l-10.124,10.143c-5.594,5.603-5.594,14.679,0,20.282l36.987,37.053l-36.961,37.051c-5.591,5.604-5.591,14.681,0,20.284\\n        l10.126,10.141c5.593,5.604,14.654,5.604,20.247,0l36.96-37.05l36.97,37.035c5.592,5.605,14.654,5.605,20.247,0l10.124-10.141\\n        c5.593-5.603,5.593-14.68,0-20.282L245.102,143.151z M108.674,48.296L44.747,98.42H17.9c-13.228,0-17.899,4.826-17.899,17.898\\n        L0,142.719l0.001,27.295c0,13.072,4.951,17.898,17.899,17.898h26.847l63.927,50.068c7.667,4.948,16.557,6.505,16.557-7.365V55.662\\n        C125.23,41.792,116.341,43.349,108.674,48.296z\\\"/>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.settingsSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 268.765 268.765\\\" style=\\\"enable-background:new 0 0 268.765 268.765;\\\" xml:space=\\\"preserve\\\">\\n    <g id=\\\"Settings\\\">\\n      <g>\\n        <path style=\\\"fill-rule:evenodd;clip-rule:evenodd;\\\" d=\\\"M267.92,119.461c-0.425-3.778-4.83-6.617-8.639-6.617\\n          c-12.315,0-23.243-7.231-27.826-18.414c-4.682-11.454-1.663-24.812,7.515-33.231c2.889-2.641,3.24-7.062,0.817-10.133\\n          c-6.303-8.004-13.467-15.234-21.289-21.5c-3.063-2.458-7.557-2.116-10.213,0.825c-8.01,8.871-22.398,12.168-33.516,7.529\\n          c-11.57-4.867-18.866-16.591-18.152-29.176c0.235-3.953-2.654-7.39-6.595-7.849c-10.038-1.161-20.164-1.197-30.232-0.08\\n          c-3.896,0.43-6.785,3.786-6.654,7.689c0.438,12.461-6.946,23.98-18.401,28.672c-10.985,4.487-25.272,1.218-33.266-7.574\\n          c-2.642-2.896-7.063-3.252-10.141-0.853c-8.054,6.319-15.379,13.555-21.74,21.493c-2.481,3.086-2.116,7.559,0.802,10.214\\n          c9.353,8.47,12.373,21.944,7.514,33.53c-4.639,11.046-16.109,18.165-29.24,18.165c-4.261-0.137-7.296,2.723-7.762,6.597\\n          c-1.182,10.096-1.196,20.383-0.058,30.561c0.422,3.794,4.961,6.608,8.812,6.608c11.702-0.299,22.937,6.946,27.65,18.415\\n          c4.698,11.454,1.678,24.804-7.514,33.23c-2.875,2.641-3.24,7.055-0.817,10.126c6.244,7.953,13.409,15.19,21.259,21.508\\n          c3.079,2.481,7.559,2.131,10.228-0.81c8.04-8.893,22.427-12.184,33.501-7.536c11.599,4.852,18.895,16.575,18.181,29.167\\n          c-0.233,3.955,2.67,7.398,6.595,7.85c5.135,0.599,10.301,0.898,15.481,0.898c4.917,0,9.835-0.27,14.752-0.817\\n          c3.897-0.43,6.784-3.786,6.653-7.696c-0.451-12.454,6.946-23.973,18.386-28.657c11.059-4.517,25.286-1.211,33.281,7.572\\n          c2.657,2.89,7.047,3.239,10.142,0.848c8.039-6.304,15.349-13.534,21.74-21.494c2.48-3.079,2.13-7.559-0.803-10.213\\n          c-9.353-8.47-12.388-21.946-7.529-33.524c4.568-10.899,15.612-18.217,27.491-18.217l1.662,0.043\\n          c3.853,0.313,7.398-2.655,7.865-6.588C269.044,139.917,269.058,129.639,267.92,119.461z M134.595,179.491\\n          c-24.718,0-44.824-20.106-44.824-44.824c0-24.717,20.106-44.824,44.824-44.824c24.717,0,44.823,20.107,44.823,44.824\\n          C179.418,159.385,159.312,179.491,134.595,179.491z\\\"/>\\n      </g>\\n    </g>\\n  <g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.arrowRightSVG = \"\\n  <svg class=\\\"svg\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 80\\\" xml:space=\\\"preserve\\\">\\n    <polyline fill=\\\"none\\\" stroke-width=\\\"10\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" points=\\\"0.375,0.375 45.63,38.087 0.375,75.8 \\\"/>\\n  </svg>\\n\";\nsvg.arrowLeftSVG = \"\\n  <svg class=\\\"svg\\\" class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" viewBox=\\\"0 0 50 80\\\" xml:space=\\\"preserve\\\">\\n    <polyline fill=\\\"none\\\" stroke-width=\\\"10\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" points=\\\"45.63,75.8 0.375,38.087 45.63,0.375 \\\"/>\\n  </svg> \\n\";\nsvg.fullScreenSVG = \"\\n  <svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 298.667 298.667\\\" style=\\\"enable-background:new 0 0 298.667 298.667;\\\" xml:space=\\\"preserve\\\">\\n    <g>\\n      <g>\\n        <g>\\n          <polygon points=\\\"42.667,192 0,192 0,298.667 106.667,298.667 106.667,256 42.667,256\\\"/>\\n          <polygon points=\\\"0,106.667 42.667,106.667 42.667,42.667 106.667,42.667 106.667,0 0,0\\\"/>\\n          <polygon points=\\\"192,0 192,42.667 256,42.667 256,106.667 298.667,106.667 298.667,0\\\"/>\\n          <polygon points=\\\"256,256 192,256 192,298.667 298.667,298.667 298.667,192 256,192\\\"/>\\n        </g>\\n      </g>\\n    </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n  </svg>\\n\";\nsvg.loopSVG = \"\\n<svg class=\\\"svg\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" id=\\\"Capa_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 32 32\\\" style=\\\"enable-background:new 0 0 32 32;\\\" xml:space=\\\"preserve\\\">\\n  <g>\\n    <g id=\\\"loop_x5F_alt3\\\">\\n      <g>\\n        <path d=\\\"M28,16v2c0,1.102-0.898,2-2,2H11.996L12,16l-8,6l8,6l-0.004-4H26c3.309,0,6-2.695,6-6v-2H28z\\\"/>\\n        <path d=\\\"M4,14c0-1.105,0.898-2,2-2h14v4l7.992-6L20,4v4H6c-3.309,0-6,2.688-6,6v2h4V14z\\\"/>\\n      </g>\\n    </g>\\n  </g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\\n</svg>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/html/svg.js\n");

/***/ }),

/***/ "../src/html/themes.js":
/*!*****************************!*\
  !*** ../src/html/themes.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var themes = {\n  default: {\n    \"settings-background-color\": \"whitesmoke\",\n    \"hms-background-color\": \"whitesmoke\",\n    \"background-color\": \"whitesmoke\",\n    \"grad-height\": \"0px\",\n    color: \"black\",\n    \"svg-color\": \"black\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  dark: {\n    \"settings-background-color\": \"black\",\n    \"hms-background-color\": \"black\",\n    \"background-color\": \"black\",\n    \"grad-height\": \"0px\",\n    color: \"white\",\n    \"svg-color\": \"white\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(90, 90, 90, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  whiteGold: {\n    \"settings-background-color\": \"white\",\n    \"hms-background-color\": \"white\",\n    \"background-color\": \"white\",\n    \"grad-height\": \"0px\",\n    color: \"#a17f1a\",\n    \"svg-color\": \"#a17f1a\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"#a17f1a\",\n    \"cursor-color\": \"#a17f1a\",\n    \"speedbar-cursor-color\": \"#a17f1a\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"#a17f1a\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  darkGold: {\n    \"settings-background-color\": \"black\",\n    \"hms-background-color\": \"black\",\n    \"background-color\": \"black\",\n    \"grad-height\": \"0px\",\n    color: \"#a17f1a\",\n    \"svg-color\": \"#a17f1a\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"#a17f1a\",\n    \"cursor-color\": \"#a17f1a\",\n    \"speedbar-cursor-color\": \"#a17f1a\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(90, 90, 90, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"#a17f1a\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    border: \"1px solid rgba(255,255,255,0.2)\",\n    \"controls-border\": \"none\",\n    \"svg-selected-color\": \"red\"\n  },\n  transparent: {\n    \"background-color\": \"transparent\",\n    \"settings-background-color\": \"rgba(0,0,0,0.5)\",\n    \"hms-background-color\": \"rgba(0,0,0,0.5)\",\n    \"preview-border\": \"1px solid rgba(0,0,0,1)\",\n    color: \"white\",\n    \"grad-height\": \"60px\",\n    \"svg-color\": \"white\",\n    \"loopbar-color\": \"#808086\",\n    \"speedbar-color\": \"#666\",\n    \"runningbar-color\": \"red\",\n    \"cursor-color\": \"red\",\n    \"speedbar-cursor-color\": \"red\",\n    \"button-opacity\": \"0.8\",\n    \"hover-color\": \"rgba(200, 200, 200, 0.5)\",\n    \"slider-off-color\": \"#ccc\",\n    \"slider-on-color\": \"red\",\n    border: \"1px solid rgba(255,255,255,0.1)\",\n    \"controls-border\": \"1px solid rgba(255,255,255,0.1)\",\n    \"svg-selected-color\": \"red\"\n  },\n  \"on-top\": {\n    \"background-height\": \"100%\",\n    \"pointer-event-panel-height\": \"calc(100% - 45px)\",\n    \"controls-bottom\": \"0px\",\n    \"settings-panel-bottom\": \"45px\",\n    \"controls-position\": \"0px\"\n  },\n  \"position-default\": {\n    \"background-height\": \"calc(100% - 40px)\",\n    \"pointer-event-panel-height\": \"calc(100% - 40px)\",\n    \"controls-bottom\": \"-0px\",\n    \"settings-panel-bottom\": \"45px\",\n    \"controls-position\": \"40px\"\n  }\n};\n\nmodule.exports = function (theme) {\n  return themes[theme];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2h0bWwvdGhlbWVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9odG1sL3RoZW1lcy5qcz84YmExIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHtcbiAgZGVmYXVsdDoge1xuICAgIFwic2V0dGluZ3MtYmFja2dyb3VuZC1jb2xvclwiOiBcIndoaXRlc21va2VcIixcbiAgICBcImhtcy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwid2hpdGVzbW9rZVwiLFxuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcIndoaXRlc21va2VcIixcbiAgICBcImdyYWQtaGVpZ2h0XCI6IFwiMHB4XCIsXG4gICAgY29sb3I6IFwiYmxhY2tcIixcbiAgICBcInN2Zy1jb2xvclwiOiBcImJsYWNrXCIsXG4gICAgXCJsb29wYmFyLWNvbG9yXCI6IFwiIzgwODA4NlwiLFxuICAgIFwic3BlZWRiYXItY29sb3JcIjogXCIjNjY2XCIsXG4gICAgXCJydW5uaW5nYmFyLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJjdXJzb3ItY29sb3JcIjogXCJyZWRcIixcbiAgICBcInNwZWVkYmFyLWN1cnNvci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwiYnV0dG9uLW9wYWNpdHlcIjogXCIwLjhcIixcbiAgICBcImhvdmVyLWNvbG9yXCI6IFwicmdiYSgyMDAsIDIwMCwgMjAwLCAwLjUpXCIsXG4gICAgXCJzbGlkZXItb2ZmLWNvbG9yXCI6IFwiI2NjY1wiLFxuICAgIFwic2xpZGVyLW9uLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJwcmV2aWV3LWJvcmRlclwiOiBcIjFweCBzb2xpZCByZ2JhKDAsMCwwLDEpXCIsXG4gICAgYm9yZGVyOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMilcIixcbiAgICBcImNvbnRyb2xzLWJvcmRlclwiOiBcIm5vbmVcIixcbiAgICBcInN2Zy1zZWxlY3RlZC1jb2xvclwiOiBcInJlZFwiXG4gIH0sXG4gIGRhcms6IHtcbiAgICBcInNldHRpbmdzLWJhY2tncm91bmQtY29sb3JcIjogXCJibGFja1wiLFxuICAgIFwiaG1zLWJhY2tncm91bmQtY29sb3JcIjogXCJibGFja1wiLFxuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcImJsYWNrXCIsXG4gICAgXCJncmFkLWhlaWdodFwiOiBcIjBweFwiLFxuICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgXCJzdmctY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgIFwibG9vcGJhci1jb2xvclwiOiBcIiM4MDgwODZcIixcbiAgICBcInNwZWVkYmFyLWNvbG9yXCI6IFwiIzY2NlwiLFxuICAgIFwicnVubmluZ2Jhci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwiY3Vyc29yLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJzcGVlZGJhci1jdXJzb3ItY29sb3JcIjogXCJyZWRcIixcbiAgICBcImJ1dHRvbi1vcGFjaXR5XCI6IFwiMC44XCIsXG4gICAgXCJob3Zlci1jb2xvclwiOiBcInJnYmEoOTAsIDkwLCA5MCwgMC41KVwiLFxuICAgIFwic2xpZGVyLW9mZi1jb2xvclwiOiBcIiNjY2NcIixcbiAgICBcInNsaWRlci1vbi1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwicHJldmlldy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgwLDAsMCwxKVwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpXCIsXG4gICAgXCJjb250cm9scy1ib3JkZXJcIjogXCJub25lXCIsXG4gICAgXCJzdmctc2VsZWN0ZWQtY29sb3JcIjogXCJyZWRcIlxuICB9LFxuICB3aGl0ZUdvbGQ6IHtcbiAgICBcInNldHRpbmdzLWJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgIFwiaG1zLWJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcIndoaXRlXCIsXG4gICAgXCJncmFkLWhlaWdodFwiOiBcIjBweFwiLFxuICAgIGNvbG9yOiBcIiNhMTdmMWFcIixcbiAgICBcInN2Zy1jb2xvclwiOiBcIiNhMTdmMWFcIixcbiAgICBcImxvb3BiYXItY29sb3JcIjogXCIjODA4MDg2XCIsXG4gICAgXCJzcGVlZGJhci1jb2xvclwiOiBcIiM2NjZcIixcbiAgICBcInJ1bm5pbmdiYXItY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJjdXJzb3ItY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJzcGVlZGJhci1jdXJzb3ItY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJidXR0b24tb3BhY2l0eVwiOiBcIjAuOFwiLFxuICAgIFwiaG92ZXItY29sb3JcIjogXCJyZ2JhKDIwMCwgMjAwLCAyMDAsIDAuNSlcIixcbiAgICBcInNsaWRlci1vZmYtY29sb3JcIjogXCIjY2NjXCIsXG4gICAgXCJzbGlkZXItb24tY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJwcmV2aWV3LWJvcmRlclwiOiBcIjFweCBzb2xpZCByZ2JhKDAsMCwwLDEpXCIsXG4gICAgYm9yZGVyOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMilcIixcbiAgICBcImNvbnRyb2xzLWJvcmRlclwiOiBcIm5vbmVcIixcbiAgICBcInN2Zy1zZWxlY3RlZC1jb2xvclwiOiBcInJlZFwiXG4gIH0sXG4gIGRhcmtHb2xkOiB7XG4gICAgXCJzZXR0aW5ncy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwiYmxhY2tcIixcbiAgICBcImhtcy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwiYmxhY2tcIixcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJibGFja1wiLFxuICAgIFwiZ3JhZC1oZWlnaHRcIjogXCIwcHhcIixcbiAgICBjb2xvcjogXCIjYTE3ZjFhXCIsXG4gICAgXCJzdmctY29sb3JcIjogXCIjYTE3ZjFhXCIsXG4gICAgXCJsb29wYmFyLWNvbG9yXCI6IFwiIzgwODA4NlwiLFxuICAgIFwic3BlZWRiYXItY29sb3JcIjogXCIjNjY2XCIsXG4gICAgXCJydW5uaW5nYmFyLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwiY3Vyc29yLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwic3BlZWRiYXItY3Vyc29yLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwiYnV0dG9uLW9wYWNpdHlcIjogXCIwLjhcIixcbiAgICBcImhvdmVyLWNvbG9yXCI6IFwicmdiYSg5MCwgOTAsIDkwLCAwLjUpXCIsXG4gICAgXCJzbGlkZXItb2ZmLWNvbG9yXCI6IFwiI2NjY1wiLFxuICAgIFwic2xpZGVyLW9uLWNvbG9yXCI6IFwiI2ExN2YxYVwiLFxuICAgIFwicHJldmlldy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgwLDAsMCwxKVwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwLjIpXCIsXG4gICAgXCJjb250cm9scy1ib3JkZXJcIjogXCJub25lXCIsXG4gICAgXCJzdmctc2VsZWN0ZWQtY29sb3JcIjogXCJyZWRcIlxuICB9LFxuICB0cmFuc3BhcmVudDoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgXCJzZXR0aW5ncy1iYWNrZ3JvdW5kLWNvbG9yXCI6IFwicmdiYSgwLDAsMCwwLjUpXCIsXG4gICAgXCJobXMtYmFja2dyb3VuZC1jb2xvclwiOiBcInJnYmEoMCwwLDAsMC41KVwiLFxuICAgIFwicHJldmlldy1ib3JkZXJcIjogXCIxcHggc29saWQgcmdiYSgwLDAsMCwxKVwiLFxuICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgXCJncmFkLWhlaWdodFwiOiBcIjYwcHhcIixcbiAgICBcInN2Zy1jb2xvclwiOiBcIndoaXRlXCIsXG4gICAgXCJsb29wYmFyLWNvbG9yXCI6IFwiIzgwODA4NlwiLFxuICAgIFwic3BlZWRiYXItY29sb3JcIjogXCIjNjY2XCIsXG4gICAgXCJydW5uaW5nYmFyLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgXCJjdXJzb3ItY29sb3JcIjogXCJyZWRcIixcbiAgICBcInNwZWVkYmFyLWN1cnNvci1jb2xvclwiOiBcInJlZFwiLFxuICAgIFwiYnV0dG9uLW9wYWNpdHlcIjogXCIwLjhcIixcbiAgICBcImhvdmVyLWNvbG9yXCI6IFwicmdiYSgyMDAsIDIwMCwgMjAwLCAwLjUpXCIsXG4gICAgXCJzbGlkZXItb2ZmLWNvbG9yXCI6IFwiI2NjY1wiLFxuICAgIFwic2xpZGVyLW9uLWNvbG9yXCI6IFwicmVkXCIsXG4gICAgYm9yZGVyOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMSlcIixcbiAgICBcImNvbnRyb2xzLWJvcmRlclwiOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuMSlcIixcbiAgICBcInN2Zy1zZWxlY3RlZC1jb2xvclwiOiBcInJlZFwiXG4gIH0sXG4gIFwib24tdG9wXCI6IHtcbiAgICBcImJhY2tncm91bmQtaGVpZ2h0XCI6IFwiMTAwJVwiLFxuICAgIFwicG9pbnRlci1ldmVudC1wYW5lbC1oZWlnaHRcIjogXCJjYWxjKDEwMCUgLSA0NXB4KVwiLFxuICAgIFwiY29udHJvbHMtYm90dG9tXCI6IFwiMHB4XCIsXG4gICAgXCJzZXR0aW5ncy1wYW5lbC1ib3R0b21cIjogXCI0NXB4XCIsXG4gICAgXCJjb250cm9scy1wb3NpdGlvblwiOiBcIjBweFwiXG4gIH0sXG4gIFwicG9zaXRpb24tZGVmYXVsdFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWhlaWdodFwiOiBcImNhbGMoMTAwJSAtIDQwcHgpXCIsXG4gICAgXCJwb2ludGVyLWV2ZW50LXBhbmVsLWhlaWdodFwiOiBcImNhbGMoMTAwJSAtIDQwcHgpXCIsXG4gICAgXCJjb250cm9scy1ib3R0b21cIjogXCItMHB4XCIsXG4gICAgXCJzZXR0aW5ncy1wYW5lbC1ib3R0b21cIjogXCI0NXB4XCIsXG4gICAgXCJjb250cm9scy1wb3NpdGlvblwiOiBcIjQwcHhcIlxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRoZW1lID0+IHRoZW1lc1t0aGVtZV07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkJBO0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuQkE7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkJBO0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFqSEE7QUFDQTtBQXlIQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/html/themes.js\n");

/***/ }),

/***/ "../src/listeners/body.js":
/*!********************************!*\
  !*** ../src/listeners/body.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    el = _require.el,\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  el(\"body\")[0].addEventListener(\"click\", function (e) {\n    if (e.target.className === \"\".concat(_this.name, \"-speed-value\")) {\n      var speedDisplay = e.target.dataset.speedValue - 0;\n      _this.clip.executionSpeed = e.target.dataset.speedValue;\n      _this.clip.speed == 1 ? speedDisplay = \"Normal\" : speedDisplay = _this.clip.speed;\n      _this.elements.speedCurrent.innerHTML = speedDisplay;\n      var step = 1 / (_this.options.speedValues.length - 1);\n      var positionY = (e.target.dataset.zone * step - 1) * -1 * ((_this.options.speedValues.length - 1) * 16);\n      elid(\"\".concat(_this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9ib2R5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvYm9keS5qcz9kZGJkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZWwsIGVsaWQgfSA9IHJlcXVpcmUoYC4uL2hlbHBlcnNgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfdGhpcyA9PiB7XG4gIGVsKGBib2R5YClbMF0uYWRkRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCBlID0+IHtcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NOYW1lID09PSBgJHtfdGhpcy5uYW1lfS1zcGVlZC12YWx1ZWApIHtcbiAgICAgIGxldCBzcGVlZERpc3BsYXkgPSBlLnRhcmdldC5kYXRhc2V0LnNwZWVkVmFsdWUgLSAwO1xuICAgICAgX3RoaXMuY2xpcC5leGVjdXRpb25TcGVlZCA9IGUudGFyZ2V0LmRhdGFzZXQuc3BlZWRWYWx1ZTtcbiAgICAgIF90aGlzLmNsaXAuc3BlZWQgPT0gMVxuICAgICAgICA/IChzcGVlZERpc3BsYXkgPSBgTm9ybWFsYClcbiAgICAgICAgOiAoc3BlZWREaXNwbGF5ID0gX3RoaXMuY2xpcC5zcGVlZCk7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zcGVlZEN1cnJlbnQuaW5uZXJIVE1MID0gc3BlZWREaXNwbGF5O1xuXG4gICAgICBjb25zdCBzdGVwID0gMSAvIChfdGhpcy5vcHRpb25zLnNwZWVkVmFsdWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgICBjb25zdCBwb3NpdGlvblkgPVxuICAgICAgICAoZS50YXJnZXQuZGF0YXNldC56b25lICogc3RlcCAtIDEpICpcbiAgICAgICAgLTEgKlxuICAgICAgICAoKF90aGlzLm9wdGlvbnMuc3BlZWRWYWx1ZXMubGVuZ3RoIC0gMSkgKiAxNik7XG5cbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0tc3BlZWQtY3Vyc29yYCkuc3R5bGUudG9wID0gcG9zaXRpb25ZICsgYHB4YDtcbiAgICB9XG4gIH0pO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/body.js\n");

/***/ }),

/***/ "../src/listeners/controls.js":
/*!************************************!*\
  !*** ../src/listeners/controls.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  elid(\"\".concat(_this.name, \"-controls\")).onmouseover = function () {\n    if (!_this.settings.loopActivated) {\n      return;\n    }\n\n    _this.elements.loopBarStart.classList.remove(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.remove(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.add(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.add(\"m-fadeIn\");\n  };\n\n  elid(\"\".concat(_this.name, \"-controls\")).onmouseout = function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(this, e) || e === this) {\n      return;\n    }\n\n    if (!_this.settings.loopActivated) {\n      return;\n    }\n\n    _this.elements.loopBarStart.classList.add(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.add(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.remove(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.remove(\"m-fadeIn\");\n  };\n\n  var twt = false;\n\n  elid(\"\".concat(_this.name, \"-controls\")).ontouchstart = function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(_this.elements.statusButton, e) || e === _this.elements.statusButton || isDescendant(_this.elements.settingsButton, e) || e === _this.elements.settingsButton || isDescendant(_this.elements.fullScreenButton, e) || e === _this.elements.fullScreenButton || isDescendant(_this.elements.loopButton, e) || e === _this.elements.loopButton || isDescendant(_this.elements.totalBar, e) || e === _this.elements.totalBar) {\n      return;\n    }\n\n    _this.elements.volumeControl.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.volumeBar.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.volumeBarHelper.className = \"\".concat(_this.name, \"-volume-width-transition\");\n    _this.elements.timeDisplay.className = \"\".concat(_this.name, \"-time-width-transition\");\n    _this.elements.volumeCursor.className = \"\".concat(_this.name, \"-volume-cursor-transition\");\n    twt = true;\n  };\n\n  window.addEventListener(\"touchstart\", function (event) {\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(elid(\"\".concat(_this.name, \"-controls\")), e) || e === elid(\"\".concat(_this.name, \"-controls\"))) {\n      return;\n    }\n\n    if (twt) {\n      _this.elements.volumeControl.className = \"\";\n      _this.elements.volumeBar.className = \"\";\n      _this.elements.volumeBarHelper.className = \"\";\n      _this.elements.timeDisplay.className = \"\";\n      _this.elements.volumeCursor.className = \"\";\n    }\n  }); // elid(`${_this.name}-left-controls`).ontouchstart = function (event) {\n  //   const e = event.toElement || event.relatedTarget || event.target;\n  //     if (isDescendant(_this.elements.statusBtn, e) || e === _this.elements.statusBtn) {\n  //       return false;\n  //     }\n  //     return \"\";\n  // };\n};\n\nfunction isDescendant(parent, child) {\n  var node = child.parentNode;\n\n  while (node != null) {\n    if (node == parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9jb250cm9scy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvbGlzdGVuZXJzL2NvbnRyb2xzLmpzPzI0OGYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBlbGlkIH0gPSByZXF1aXJlKGAuLi9oZWxwZXJzYCk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3RoaXMgPT4ge1xuICBlbGlkKGAke190aGlzLm5hbWV9LWNvbnRyb2xzYCkub25tb3VzZW92ZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5sb29wQWN0aXZhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QucmVtb3ZlKGBtLWZhZGVPdXRgKTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC5yZW1vdmUoYG0tZmFkZU91dGApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QuYWRkKGBtLWZhZGVJbmApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LmFkZChgbS1mYWRlSW5gKTtcbiAgfTtcblxuICBlbGlkKGAke190aGlzLm5hbWV9LWNvbnRyb2xzYCkub25tb3VzZW91dCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcbiAgICBpZiAoaXNEZXNjZW5kYW50KHRoaXMsIGUpIHx8IGUgPT09IHRoaXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIV90aGlzLnNldHRpbmdzLmxvb3BBY3RpdmF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC5hZGQoYG0tZmFkZU91dGApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJFbmQuY2xhc3NMaXN0LmFkZChgbS1mYWRlT3V0YCk7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhclN0YXJ0LmNsYXNzTGlzdC5yZW1vdmUoYG0tZmFkZUluYCk7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QucmVtb3ZlKGBtLWZhZGVJbmApO1xuICB9O1xuXG4gIGxldCB0d3QgPSBmYWxzZTtcbiAgZWxpZChgJHtfdGhpcy5uYW1lfS1jb250cm9sc2ApLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcbiAgICBpZiAoXG4gICAgICBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLCBlKSB8fFxuICAgICAgZSA9PT0gX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uIHx8XG4gICAgICBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NCdXR0b24sIGUpIHx8XG4gICAgICBlID09PSBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc0J1dHRvbiB8fFxuICAgICAgaXNEZXNjZW5kYW50KF90aGlzLmVsZW1lbnRzLmZ1bGxTY3JlZW5CdXR0b24sIGUpIHx8XG4gICAgICBlID09PSBfdGhpcy5lbGVtZW50cy5mdWxsU2NyZWVuQnV0dG9uIHx8XG4gICAgICBpc0Rlc2NlbmRhbnQoX3RoaXMuZWxlbWVudHMubG9vcEJ1dHRvbiwgZSkgfHxcbiAgICAgIGUgPT09IF90aGlzLmVsZW1lbnRzLmxvb3BCdXR0b24gfHxcbiAgICAgIGlzRGVzY2VuZGFudChfdGhpcy5lbGVtZW50cy50b3RhbEJhciwgZSkgfHxcbiAgICAgIGUgPT09IF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQ29udHJvbC5jbGFzc05hbWUgPSBgJHtcbiAgICAgIF90aGlzLm5hbWVcbiAgICB9LXZvbHVtZS13aWR0aC10cmFuc2l0aW9uYDtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXIuY2xhc3NOYW1lID0gYCR7XG4gICAgICBfdGhpcy5uYW1lXG4gICAgfS12b2x1bWUtd2lkdGgtdHJhbnNpdGlvbmA7XG4gICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQmFySGVscGVyLmNsYXNzTmFtZSA9IGAke1xuICAgICAgX3RoaXMubmFtZVxuICAgIH0tdm9sdW1lLXdpZHRoLXRyYW5zaXRpb25gO1xuICAgIF90aGlzLmVsZW1lbnRzLnRpbWVEaXNwbGF5LmNsYXNzTmFtZSA9IGAke1xuICAgICAgX3RoaXMubmFtZVxuICAgIH0tdGltZS13aWR0aC10cmFuc2l0aW9uYDtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDdXJzb3IuY2xhc3NOYW1lID0gYCR7XG4gICAgICBfdGhpcy5uYW1lXG4gICAgfS12b2x1bWUtY3Vyc29yLXRyYW5zaXRpb25gO1xuICAgIHR3dCA9IHRydWU7XG4gIH07XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgZSA9IGV2ZW50LnRvRWxlbWVudCB8fCBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcbiAgICBpZiAoXG4gICAgICBpc0Rlc2NlbmRhbnQoZWxpZChgJHtfdGhpcy5uYW1lfS1jb250cm9sc2ApLCBlKSB8fFxuICAgICAgZSA9PT0gZWxpZChgJHtfdGhpcy5uYW1lfS1jb250cm9sc2ApXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0d3QpIHtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuY2xhc3NOYW1lID0gYGA7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXIuY2xhc3NOYW1lID0gYGA7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXJIZWxwZXIuY2xhc3NOYW1lID0gYGA7XG4gICAgICBfdGhpcy5lbGVtZW50cy50aW1lRGlzcGxheS5jbGFzc05hbWUgPSBgYDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUN1cnNvci5jbGFzc05hbWUgPSBgYDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVsaWQoYCR7X3RoaXMubmFtZX0tbGVmdC1jb250cm9sc2ApLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAvLyAgIGNvbnN0IGUgPSBldmVudC50b0VsZW1lbnQgfHwgZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudC50YXJnZXQ7XG4gIC8vICAgICBpZiAoaXNEZXNjZW5kYW50KF90aGlzLmVsZW1lbnRzLnN0YXR1c0J0biwgZSkgfHwgZSA9PT0gX3RoaXMuZWxlbWVudHMuc3RhdHVzQnRuKSB7XG4gIC8vICAgICAgIHJldHVybiBmYWxzZTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIHJldHVybiBcIlwiO1xuICAvLyB9O1xufTtcblxuZnVuY3Rpb24gaXNEZXNjZW5kYW50KHBhcmVudCwgY2hpbGQpIHtcbiAgbGV0IG5vZGUgPSBjaGlsZC5wYXJlbnROb2RlO1xuICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgaWYgKG5vZGUgPT0gcGFyZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/listeners/controls.js\n");

/***/ }),

/***/ "../src/listeners/donkeyclip.js":
/*!**************************************!*\
  !*** ../src/listeners/donkeyclip.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (_this) {\n  _this.elements.donkeyclipButton.addEventListener(\"click\", function () {\n    var u = create_UUID();\n    var popupDC = window.open(\"https://donkeyclip.com?u=\".concat(u));\n\n    var definition = _this.clip.exportState({\n      unprocessed: true\n    });\n\n    var clipClass = _this.clipClass;\n    window.addEventListener(\"message\", receiveMessage, false);\n\n    function receiveMessage(event) {\n      if (event.data === u) {\n        popupDC.postMessage(JSON.stringify({\n          definition: definition,\n          clipClass: clipClass,\n          u: u\n        }), \"*\");\n      }\n    }\n  });\n};\n\nfunction create_UUID() {\n  var dt = new Date().getTime();\n  var uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (dt + Math.random() * 16) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c == \"x\" ? r : r & 0x3 | 0x8).toString(16);\n  });\n  return uuid;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9kb25rZXljbGlwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvZG9ua2V5Y2xpcC5qcz8xM2RkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX3RoaXMgPT4ge1xuICBfdGhpcy5lbGVtZW50cy5kb25rZXljbGlwQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKCkgPT4ge1xuICAgIGNvbnN0IHUgPSBjcmVhdGVfVVVJRCgpO1xuICAgIGNvbnN0IHBvcHVwREMgPSB3aW5kb3cub3BlbihgaHR0cHM6Ly9kb25rZXljbGlwLmNvbT91PSR7dX1gKTtcbiAgICBjb25zdCBkZWZpbml0aW9uID0gX3RoaXMuY2xpcC5leHBvcnRTdGF0ZSh7IHVucHJvY2Vzc2VkOiB0cnVlIH0pO1xuICAgIGNvbnN0IGNsaXBDbGFzcyA9IF90aGlzLmNsaXBDbGFzcztcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgcmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcbiAgICBmdW5jdGlvbiByZWNlaXZlTWVzc2FnZShldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmRhdGEgPT09IHUpIHtcbiAgICAgICAgcG9wdXBEQy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7IGRlZmluaXRpb24sIGNsaXBDbGFzcywgdSB9KSwgXCIqXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVfVVVJRCgpIHtcbiAgbGV0IGR0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGNvbnN0IHV1aWQgPSBcInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oXG4gICAgY1xuICApIHtcbiAgICBjb25zdCByID0gKGR0ICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcbiAgICBkdCA9IE1hdGguZmxvb3IoZHQgLyAxNik7XG4gICAgcmV0dXJuIChjID09IFwieFwiID8gciA6IChyICYgMHgzKSB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICB9KTtcbiAgcmV0dXJuIHV1aWQ7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/donkeyclip.js\n");

/***/ }),

/***/ "../src/listeners/fullscreen.js":
/*!**************************************!*\
  !*** ../src/listeners/fullscreen.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (_this) {\n  _this.elements.fullScreenButton.addEventListener(\"click\", function () {\n    var elFullScreen = _this.clip.props.host.className.includes(\"full-screen\");\n\n    _this.clip.props.host !== _this.options.host && !elFullScreen ? _this.clip.props.host.appendChild(_this.elements.mcPlayer) : null;\n    _this.clip.props.host !== _this.options.host && elFullScreen ? _this.options.host.appendChild(_this.elements.mcPlayer) : null;\n    elFullScreen ? _this.exitFullscreen() : _this.launchIntoFullscreen(_this.clip.props.host);\n\n    _this.clip.props.host.classList.toggle(\"full-screen\");\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9mdWxsc2NyZWVuLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvZnVsbHNjcmVlbi5qcz9iNjZhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX3RoaXMgPT4ge1xuICBfdGhpcy5lbGVtZW50cy5mdWxsU2NyZWVuQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKCkgPT4ge1xuICAgIGNvbnN0IGVsRnVsbFNjcmVlbiA9IF90aGlzLmNsaXAucHJvcHMuaG9zdC5jbGFzc05hbWUuaW5jbHVkZXMoXG4gICAgICBgZnVsbC1zY3JlZW5gXG4gICAgKTtcbiAgICBfdGhpcy5jbGlwLnByb3BzLmhvc3QgIT09IF90aGlzLm9wdGlvbnMuaG9zdCAmJiAhZWxGdWxsU2NyZWVuXG4gICAgICA/IF90aGlzLmNsaXAucHJvcHMuaG9zdC5hcHBlbmRDaGlsZChfdGhpcy5lbGVtZW50cy5tY1BsYXllcilcbiAgICAgIDogbnVsbDtcbiAgICBfdGhpcy5jbGlwLnByb3BzLmhvc3QgIT09IF90aGlzLm9wdGlvbnMuaG9zdCAmJiBlbEZ1bGxTY3JlZW5cbiAgICAgID8gX3RoaXMub3B0aW9ucy5ob3N0LmFwcGVuZENoaWxkKF90aGlzLmVsZW1lbnRzLm1jUGxheWVyKVxuICAgICAgOiBudWxsO1xuXG4gICAgZWxGdWxsU2NyZWVuXG4gICAgICA/IF90aGlzLmV4aXRGdWxsc2NyZWVuKClcbiAgICAgIDogX3RoaXMubGF1bmNoSW50b0Z1bGxzY3JlZW4oX3RoaXMuY2xpcC5wcm9wcy5ob3N0KTtcbiAgICBfdGhpcy5jbGlwLnByb3BzLmhvc3QuY2xhc3NMaXN0LnRvZ2dsZShgZnVsbC1zY3JlZW5gKTtcbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/listeners/fullscreen.js\n");

/***/ }),

/***/ "../src/listeners/loopBarEnd.js":
/*!**************************************!*\
  !*** ../src/listeners/loopBarEnd.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMoveLoopEnd = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.totalBar.offsetWidth) {\n      positionX = _this.elements.totalBar.offsetWidth;\n    }\n\n    if (_this.elements.runningBar.offsetWidth >= _this.elements.loopBar.offsetWidth) {\n      _this.elements.runningBar.style.width = _this.elements.loopBar.offsetWidth + \"px\";\n    }\n\n    if (_this.settings.loopLastPositionXPxls - positionX < 0) {\n      _this.elements.loopBar.style.width = Math.abs(_this.settings.loopLastPositionXPxls - positionX) + \"px\";\n    } else {\n      _this.elements.loopBar.style.left = positionX + \"px\";\n      _this.settings.loopLastPositionXPxls = positionX;\n    }\n\n    _this.settings.loopEndMillisecond = Math.round(_this.clip.duration * ((parseFloat(_this.elements.loopBar.style.left) || 0) + parseFloat(_this.elements.loopBar.style.width)) / _this.elements.totalBar.offsetWidth);\n\n    if (_this.settings.loopEndMillisecond < _this.clip.runTimeInfo.currentMillisecond) {\n      _this.settings.loopJourney = true;\n    }\n\n    if (_this.settings.loopStartMillisecond > _this.settings.loopEndMillisecond) {\n      _this.settings.loopStartMillisecond = _this.settings.loopEndMillisecond;\n      _this.settings.loopJourney = true;\n    }\n\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n  };\n\n  _this.listeners.onMouseUpLoopEnd = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = false;\n    e.preventDefault();\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth / _this.elements.loopBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n\n    if (_this.settings.loopJourney) {\n      _this.createProgressDrag(_this.elements.runningBar.offsetWidth);\n\n      _this.settings.loopJourney = false;\n    }\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUpLoopEnd, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpLoopEnd, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveLoopEnd, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveLoopEnd, false);\n\n    _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n      passive: true\n    }, false);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.state === \"idle\") {\n        var loopms;\n\n        if (_this.clip.speed >= 0) {\n          loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, loopms, {\n          before: \"stop\",\n          after: \"play\"\n        });\n      } else if (_this.clip.state === \"completed\") {\n        var _loopms;\n\n        if (_this.clip.speed >= 0) {\n          _loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          _loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, _loopms, {\n          before: \"stop\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.resume();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDownLoopEnd = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = true;\n    _this.settings.needsUpdate = true;\n\n    if (_this.clip.state === \"playing\") {\n      _this.clip.wait();\n\n      _this.settings.playAfterResize = true;\n    }\n\n    e.preventDefault();\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth + \"px\";\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft + \"px\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth + \"px\";\n\n    _this.elements.loopBar.removeEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.removeEventListener(\"touchstart\", _this.listeners.onMouseDown, false);\n\n    _this.listeners.onCursorMoveLoopEnd(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpLoopEnd, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpLoopEnd, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveLoopEnd, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveLoopEnd, false);\n  };\n\n  _this.elements.loopBarEnd.addEventListener(\"mousedown\", _this.listeners.onMouseDownLoopEnd, false);\n\n  _this.elements.loopBarEnd.addEventListener(\"touchstart\", _this.listeners.onMouseDownLoopEnd, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/listeners/loopBarEnd.js\n");

/***/ }),

/***/ "../src/listeners/loopBarStart.js":
/*!****************************************!*\
  !*** ../src/listeners/loopBarStart.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMoveLoopStart = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n    var endPosition = _this.elements.loopBar.offsetWidth + _this.elements.loopBar.offsetLeft;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.totalBar.offsetWidth) {\n      positionX = _this.elements.totalBar.offsetWidth;\n    }\n\n    var loopBarDeltaX = positionX - _this.settings.loopLastPositionXPxls || 0;\n    var runningBarWidthInPxls = _this.elements.runningBar.offsetWidth - loopBarDeltaX;\n    _this.elements.loopBar.style.left = positionX + \"px\";\n    var diff = endPosition - _this.elements.loopBar.offsetLeft;\n    _this.elements.loopBar.style.width = diff + \"px\";\n    _this.elements.runningBar.style.width = runningBarWidthInPxls + \"px\";\n    _this.settings.loopLastPositionXPxls = positionX;\n    _this.settings.loopStartMillisecond = Math.round(_this.clip.duration * _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth);\n\n    if (_this.settings.loopEndMillisecond < _this.settings.loopStartMillisecond) {\n      _this.settings.loopEndMillisecond = _this.settings.loopStartMillisecond;\n      _this.elements.loopBar.style.width = \"0px\";\n      _this.elements.runningBar.style.width = \"0px\";\n    }\n\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n\n    if (_this.settings.loopStartMillisecond > _this.clip.runTimeInfo.currentMillisecond) {\n      _this.settings.loopJourney = true;\n    }\n  };\n\n  _this.listeners.onMouseUpLoopStart = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = false;\n    e.preventDefault();\n\n    if (_this.settings.loopJourney) {\n      _this.createProgressDrag(_this.elements.runningBar.offsetWidth);\n\n      _this.settings.loopJourney = false;\n    }\n\n    _this.elements.loopBar.style.left = _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.elements.loopBar.style.width = _this.elements.loopBar.offsetWidth / _this.elements.totalBar.offsetWidth * 100 + \"%\";\n    _this.settings.loopStartMillisecond = Math.round(_this.clip.duration * _this.elements.loopBar.offsetLeft / _this.elements.totalBar.offsetWidth);\n    _this.elements.runningBar.style.width = _this.elements.runningBar.offsetWidth / _this.elements.loopBar.offsetWidth * 100 + \"%\";\n    removeListener(\"mouseup\", _this.listeners.onMouseUpLoopStart, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpLoopStart, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveLoopStart, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveLoopStart, false);\n\n    _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n      passive: true\n    }, false);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.state === \"idle\") {\n        var loopms;\n\n        if (_this.clip.speed >= 0) {\n          loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, loopms, {\n          before: \"stop\",\n          after: \"play\"\n        });\n      } else if (_this.clip.state === \"completed\") {\n        var _loopms;\n\n        if (_this.clip.speed >= 0) {\n          _loopms = _this.settings.loopStartMillisecond + 1;\n        } else {\n          _loopms = _this.settings.loopEndMillisecond - 1;\n        }\n\n        _this.settings.needsUpdate = true;\n\n        _this.createJourney(_this.clip, _loopms, {\n          before: \"stop\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.resume();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDownLoopStart = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.settings.resizeLoop = true;\n    e.preventDefault();\n    _this.settings.needsUpdate = true;\n\n    if (_this.clip.state === \"playing\") {\n      _this.clip.wait();\n\n      _this.settings.playAfterResize = true;\n    }\n\n    _this.elements.loopBar.removeEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n    _this.elements.loopBar.removeEventListener(\"touchstart\", _this.listeners.onMouseDown, false);\n\n    _this.listeners.onCursorMoveLoopStart(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpLoopStart, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpLoopStart, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveLoopStart, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveLoopStart, false);\n  };\n\n  _this.elements.loopBarStart.addEventListener(\"mousedown\", _this.listeners.onMouseDownLoopStart, false);\n\n  _this.elements.loopBarStart.addEventListener(\"touchstart\", _this.listeners.onMouseDownLoopStart, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/listeners/loopBarStart.js\n");

/***/ }),

/***/ "../src/listeners/loopBtn.js":
/*!***********************************!*\
  !*** ../src/listeners/loopBtn.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid;\n\nmodule.exports = function (_this) {\n  _this.elements.loopButton.onclick = function () {\n    _this.settings.loopActivated = !_this.settings.loopActivated;\n\n    _this.elements.loopButton.classList.toggle(\"svg-selected\");\n\n    _this.elements.loopBarStart.classList.toggle(\"m-fadeOut\");\n\n    _this.elements.loopBarEnd.classList.toggle(\"m-fadeOut\");\n\n    _this.elements.loopBarStart.classList.toggle(\"m-fadeIn\");\n\n    _this.elements.loopBarStart.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.loopBarEnd.classList.toggle(\"m-fadeIn\");\n\n    _this.elements.loopBarEnd.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"m-fadeOut\");\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"m-fadeIn\");\n    elid(\"\".concat(_this.name, \"-loop-time\")).classList.toggle(\"\".concat(_this.name, \"-hide\"));\n    _this.elements.loopEndTime.innerHTML = _this.settings.loopEndMillisecond;\n    _this.elements.loopStartTime.innerHTML = _this.settings.loopStartMillisecond;\n    _this.settings.needsUpdate = true;\n\n    if (!_this.settings.loopActivated) {\n      _this.elements.loopBar.style.left = \"0%\";\n      _this.elements.loopBar.style.width = \"100%\";\n      _this.settings.loopStartMillisecond = 0;\n      _this.settings.loopEndMillisecond = _this.clip.duration;\n      _this.settings.loopLastPositionXPxls = 0;\n      _this.settings.loopLastPositionXPercentage = 0;\n      _this.elements.runningBar.style.width = _this.clip.runTimeInfo.currentMillisecond / _this.clip.duration * 100 + \"%\";\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9sb29wQnRuLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvbG9vcEJ0bi5qcz83OTgwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZWxpZCB9ID0gcmVxdWlyZShgLi4vaGVscGVyc2ApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF90aGlzID0+IHtcbiAgX3RoaXMuZWxlbWVudHMubG9vcEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgIF90aGlzLnNldHRpbmdzLmxvb3BBY3RpdmF0ZWQgPSAhX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZDtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoYHN2Zy1zZWxlY3RlZGApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QudG9nZ2xlKGBtLWZhZGVPdXRgKTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC50b2dnbGUoYG0tZmFkZU91dGApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QudG9nZ2xlKGBtLWZhZGVJbmApO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXJTdGFydC5jbGFzc0xpc3QudG9nZ2xlKGAke190aGlzLm5hbWV9LWhpZGVgKTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyRW5kLmNsYXNzTGlzdC50b2dnbGUoYG0tZmFkZUluYCk7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEJhckVuZC5jbGFzc0xpc3QudG9nZ2xlKGAke190aGlzLm5hbWV9LWhpZGVgKTtcbiAgICBlbGlkKGAke190aGlzLm5hbWV9LWxvb3AtdGltZWApLmNsYXNzTGlzdC50b2dnbGUoYG0tZmFkZU91dGApO1xuICAgIGVsaWQoYCR7X3RoaXMubmFtZX0tbG9vcC10aW1lYCkuY2xhc3NMaXN0LnRvZ2dsZShgbS1mYWRlSW5gKTtcbiAgICBlbGlkKGAke190aGlzLm5hbWV9LWxvb3AtdGltZWApLmNsYXNzTGlzdC50b2dnbGUoYCR7X3RoaXMubmFtZX0taGlkZWApO1xuXG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEVuZFRpbWUuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubG9vcEVuZE1pbGxpc2Vjb25kO1xuICAgIF90aGlzLmVsZW1lbnRzLmxvb3BTdGFydFRpbWUuaW5uZXJIVE1MID1cbiAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BTdGFydE1pbGxpc2Vjb25kO1xuICAgIF90aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIGlmICghX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZCkge1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5zdHlsZS5sZWZ0ID0gYDAlYDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLmxvb3BCYXIuc3R5bGUud2lkdGggPSBgMTAwJWA7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sb29wU3RhcnRNaWxsaXNlY29uZCA9IDA7XG4gICAgICBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQgPSBfdGhpcy5jbGlwLmR1cmF0aW9uO1xuICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcExhc3RQb3NpdGlvblhQeGxzID0gMDtcbiAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BMYXN0UG9zaXRpb25YUGVyY2VudGFnZSA9IDA7XG4gICAgICBfdGhpcy5lbGVtZW50cy5ydW5uaW5nQmFyLnN0eWxlLndpZHRoID1cbiAgICAgICAgKF90aGlzLmNsaXAucnVuVGltZUluZm8uY3VycmVudE1pbGxpc2Vjb25kIC8gX3RoaXMuY2xpcC5kdXJhdGlvbikgKlxuICAgICAgICAgIDEwMCArXG4gICAgICAgIGAlYDtcbiAgICB9XG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/listeners/loopBtn.js\n");

/***/ }),

/***/ "../src/listeners/loopStartEnd.js":
/*!****************************************!*\
  !*** ../src/listeners/loopStartEnd.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (_this) {\n  _this.listeners.editableLoopStartTime = function () {\n    _this.elements.editableLoopStartTime.value = _this.elements.loopStartTime.innerHTML;\n\n    _this.elements.loopStartTime.replaceWith(_this.elements.editableLoopStartTime);\n\n    _this.elements.editableLoopStartTime.focus();\n  };\n\n  _this.listeners.editableLoopEndTime = function () {\n    _this.elements.editableLoopEndTime.value = _this.elements.loopEndTime.innerHTML;\n\n    _this.elements.loopEndTime.replaceWith(_this.elements.editableLoopEndTime);\n\n    _this.elements.editableLoopEndTime.focus();\n  };\n\n  _this.elements.editableLoopEndTime.onkeydown = _this.elements.editableLoopStartTime.onkeydown = function (e) {\n    e.preventDefault();\n\n    if (e.keyCode === 8) {\n      e.target.value = e.target.value.toString().substring(0, e.target.value.toString().length - 1);\n    }\n\n    if (e.keyCode === 13) {\n      e.target.blur();\n    }\n\n    var newValue = parseFloat((e.target.value || 0).toString() + e.key);\n\n    if (newValue > _this.clip.duration) {\n      return;\n    }\n\n    e.target.value = newValue;\n\n    if (e.target === _this.elements.editableLoopStartTime) {\n      var viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n      var event = {\n        preventDefault: function preventDefault() {},\n        clientX: _this.elements.totalBar.offsetWidth / _this.clip.duration * e.target.value + viewportOffset.left\n      };\n\n      _this.listeners.onMouseDownLoopStart(event);\n\n      _this.listeners.onCursorMoveLoopStart(event);\n\n      _this.listeners.onMouseUpLoopStart(event);\n    } else if (e.target === _this.elements.editableLoopEndTime) {\n      var _viewportOffset = _this.elements.totalBar.getBoundingClientRect();\n\n      var _event = {\n        preventDefault: function preventDefault() {},\n        clientX: _this.elements.totalBar.offsetWidth / _this.clip.duration * e.target.value + _viewportOffset.left\n      };\n\n      _this.listeners.onMouseDownLoopEnd(_event);\n\n      _this.listeners.onCursorMoveLoopEnd(_event);\n\n      _this.listeners.onMouseUpLoopEnd(_event);\n    }\n  };\n\n  _this.elements.loopStartTime.onclick = _this.listeners.editableLoopStartTime;\n  _this.elements.loopEndTime.onclick = _this.listeners.editableLoopEndTime;\n\n  _this.elements.editableLoopStartTime.onfocusout = function () {\n    _this.elements.editableLoopStartTime.replaceWith(_this.elements.loopStartTime);\n  };\n\n  _this.elements.editableLoopEndTime.onfocusout = function () {\n    _this.elements.editableLoopEndTime.replaceWith(_this.elements.loopEndTime);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9sb29wU3RhcnRFbmQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2xpc3RlbmVycy9sb29wU3RhcnRFbmQuanM/YmY1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF90aGlzID0+IHtcbiAgX3RoaXMubGlzdGVuZXJzLmVkaXRhYmxlTG9vcFN0YXJ0VGltZSA9ICgpID0+IHtcbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUudmFsdWUgPVxuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcFN0YXJ0VGltZS5pbm5lckhUTUw7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcFN0YXJ0VGltZS5yZXBsYWNlV2l0aChcbiAgICAgIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcFN0YXJ0VGltZVxuICAgICk7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLmZvY3VzKCk7XG4gIH07XG5cbiAgX3RoaXMubGlzdGVuZXJzLmVkaXRhYmxlTG9vcEVuZFRpbWUgPSAoKSA9PiB7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS52YWx1ZSA9XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wRW5kVGltZS5pbm5lckhUTUw7XG4gICAgX3RoaXMuZWxlbWVudHMubG9vcEVuZFRpbWUucmVwbGFjZVdpdGgoX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZSk7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS5mb2N1cygpO1xuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUub25rZXlkb3duID0gX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lLm9ua2V5ZG93biA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZS5rZXlDb2RlID09PSA4KSB7XG4gICAgICBlLnRhcmdldC52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIC50b1N0cmluZygpXG4gICAgICAgIC5zdWJzdHJpbmcoMCwgZS50YXJnZXQudmFsdWUudG9TdHJpbmcoKS5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgZS50YXJnZXQuYmx1cigpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1ZhbHVlID0gcGFyc2VGbG9hdCgoZS50YXJnZXQudmFsdWUgfHwgMCkudG9TdHJpbmcoKSArIGUua2V5KTtcblxuICAgIGlmIChuZXdWYWx1ZSA+IF90aGlzLmNsaXAuZHVyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS50YXJnZXQudmFsdWUgPSBuZXdWYWx1ZTtcblxuICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wU3RhcnRUaW1lKSB7XG4gICAgICBjb25zdCB2aWV3cG9ydE9mZnNldCA9IF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgZXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiAoKSA9PiB7fSxcbiAgICAgICAgY2xpZW50WDpcbiAgICAgICAgICAoX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGggLyBfdGhpcy5jbGlwLmR1cmF0aW9uKSAqXG4gICAgICAgICAgICBlLnRhcmdldC52YWx1ZSArXG4gICAgICAgICAgdmlld3BvcnRPZmZzZXQubGVmdFxuICAgICAgfTtcbiAgICAgIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlRG93bkxvb3BTdGFydChldmVudCk7XG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlTG9vcFN0YXJ0KGV2ZW50KTtcbiAgICAgIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXBMb29wU3RhcnQoZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IF90aGlzLmVsZW1lbnRzLmVkaXRhYmxlTG9vcEVuZFRpbWUpIHtcbiAgICAgIGNvbnN0IHZpZXdwb3J0T2Zmc2V0ID0gX3RoaXMuZWxlbWVudHMudG90YWxCYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBldmVudCA9IHtcbiAgICAgICAgcHJldmVudERlZmF1bHQ6ICgpID0+IHt9LFxuICAgICAgICBjbGllbnRYOlxuICAgICAgICAgIChfdGhpcy5lbGVtZW50cy50b3RhbEJhci5vZmZzZXRXaWR0aCAvIF90aGlzLmNsaXAuZHVyYXRpb24pICpcbiAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlICtcbiAgICAgICAgICB2aWV3cG9ydE9mZnNldC5sZWZ0XG4gICAgICB9O1xuICAgICAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VEb3duTG9vcEVuZChldmVudCk7XG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlTG9vcEVuZChldmVudCk7XG4gICAgICBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwTG9vcEVuZChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLmxvb3BTdGFydFRpbWUub25jbGljayA9IF90aGlzLmxpc3RlbmVycy5lZGl0YWJsZUxvb3BTdGFydFRpbWU7XG4gIF90aGlzLmVsZW1lbnRzLmxvb3BFbmRUaW1lLm9uY2xpY2sgPSBfdGhpcy5saXN0ZW5lcnMuZWRpdGFibGVMb29wRW5kVGltZTtcblxuICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUub25mb2N1c291dCA9ICgpID0+IHtcbiAgICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BTdGFydFRpbWUucmVwbGFjZVdpdGgoXG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wU3RhcnRUaW1lXG4gICAgKTtcbiAgfTtcblxuICBfdGhpcy5lbGVtZW50cy5lZGl0YWJsZUxvb3BFbmRUaW1lLm9uZm9jdXNvdXQgPSAoKSA9PiB7XG4gICAgX3RoaXMuZWxlbWVudHMuZWRpdGFibGVMb29wRW5kVGltZS5yZXBsYWNlV2l0aChfdGhpcy5lbGVtZW50cy5sb29wRW5kVGltZSk7XG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/loopStartEnd.js\n");

/***/ }),

/***/ "../src/listeners/preview.js":
/*!***********************************!*\
  !*** ../src/listeners/preview.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar hoverTimeCapsule = new MC.TimeCapsule();\n\nmodule.exports = function (_this) {\n  // only on desctop devices\n  if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n    var loopBarMouseInOut = function loopBarMouseInOut() {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"m-fadeOut\");\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"m-fadeIn\");\n      elid(\"\".concat(_this.name, \"-hover-display\")).classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n      if (elid(\"\".concat(_this.name, \"-hover-display\")).className.includes(\"m-fadeIn\")) {\n        _this.previewJourney = hoverTimeCapsule.startJourney(_this.previewClip);\n      } else {\n        _this.previewJourney.destination();\n      }\n\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n    };\n\n    var loopBarAddListeners = function loopBarAddListeners() {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      loopBarMouseInOut();\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n      removeListener(\"mouseup\", loopBarAddListeners, false);\n      removeListener(\"touchend\", loopBarAddListeners, false);\n      removeListener(\"mousemove\", loopBarMouseMove, false);\n      removeListener(\"touchmove\", loopBarMouseMove, false);\n    };\n\n    _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n\n    _this.elements.loopBar.onmousedown = function () {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = null;\n      _this.elements.loopBar.onmousemove = null;\n      addListener(\"mouseup\", loopBarAddListeners, false);\n      addListener(\"touchend\", loopBarAddListeners, false);\n      addListener(\"mousemove\", loopBarMouseMove, false);\n      addListener(\"touchmove\", loopBarMouseMove, false);\n    };\n\n    _this.elements.loopBar.onmouseup = function () {\n      if (!_this.options.preview) {\n        return;\n      }\n\n      removeListener(\"mouseup\", loopBarAddListeners, false);\n      removeListener(\"touchend\", loopBarAddListeners, false);\n      removeListener(\"mousemove\", loopBarMouseMove, false);\n      removeListener(\"touchmove\", loopBarMouseMove, false);\n      _this.elements.loopBar.onmouseover = _this.elements.loopBar.onmouseout = loopBarMouseInOut;\n      _this.elements.loopBar.onmousemove = loopBarMouseMove;\n    };\n\n    var loopBarMouseMove = function loopBarMouseMove(e) {\n      var clientX = e.clientX;\n\n      var viewportOffset = _this.elements.loopBar.getBoundingClientRect();\n\n      if (clientX - viewportOffset.left + _this.settings.loopLastPositionXPxls > _this.settings.loopLastPositionXPxls + _this.elements.loopBar.offsetWidth && !_this.settings.resizeLoop) {\n        elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = _this.settings.loopEndMillisecond;\n        return;\n      } else if (clientX - viewportOffset.left < 0 && !_this.settings.resizeLoop) {\n        elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = _this.settings.loopStartMillisecond;\n        return;\n      }\n\n      var positionX = clientX - viewportOffset.left + _this.settings.loopLastPositionXPxls;\n\n      if (positionX < 0) {\n        positionX = 0;\n      }\n\n      var left = positionX - elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth / 2;\n\n      if (left < 0) {\n        left = 0;\n      } else if (left + elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth > _this.elements.totalBar.offsetWidth) {\n        left = _this.elements.totalBar.offsetWidth - elid(\"\".concat(_this.name, \"-hover-display\")).offsetWidth;\n      }\n\n      var ms = Math.round(positionX / _this.elements.totalBar.offsetWidth * _this.clip.duration);\n\n      if (_this.options.preview) {\n        _this.previewJourney.station(ms);\n      }\n\n      elid(\"\".concat(_this.name, \"-hover-millisecond\")).innerHTML = ms;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.left = left + \"px\";\n    };\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9wcmV2aWV3LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3NyYy9saXN0ZW5lcnMvcHJldmlldy5qcz84ZWM5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZWxpZCwgYWRkTGlzdGVuZXIsIHJlbW92ZUxpc3RlbmVyIH0gPSByZXF1aXJlKGAuLi9oZWxwZXJzYCk7XG5cbmNvbnN0IE1DID0gcmVxdWlyZShgQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleGApO1xuXG5jb25zdCBob3ZlclRpbWVDYXBzdWxlID0gbmV3IE1DLlRpbWVDYXBzdWxlKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3RoaXMgPT4ge1xuICAvLyBvbmx5IG9uIGRlc2N0b3AgZGV2aWNlc1xuICBpZiAoXG4gICAgIS9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChcbiAgICAgIG5hdmlnYXRvci51c2VyQWdlbnRcbiAgICApXG4gICkge1xuICAgIGNvbnN0IGxvb3BCYXJNb3VzZUluT3V0ID0gKCkgPT4ge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkuY2xhc3NMaXN0LnRvZ2dsZShgbS1mYWRlT3V0YCk7XG4gICAgICBlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5jbGFzc0xpc3QudG9nZ2xlKGBtLWZhZGVJbmApO1xuICAgICAgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgICAgYCR7X3RoaXMubmFtZX0taGlkZWBcbiAgICAgICk7XG5cbiAgICAgIGlmIChlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5jbGFzc05hbWUuaW5jbHVkZXMoYG0tZmFkZUluYCkpIHtcbiAgICAgICAgX3RoaXMucHJldmlld0pvdXJuZXkgPSBob3ZlclRpbWVDYXBzdWxlLnN0YXJ0Sm91cm5leShfdGhpcy5wcmV2aWV3Q2xpcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5wcmV2aWV3Sm91cm5leS5kZXN0aW5hdGlvbigpO1xuICAgICAgfVxuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlbW92ZSA9IGxvb3BCYXJNb3VzZU1vdmU7XG4gICAgfTtcblxuICAgIGNvbnN0IGxvb3BCYXJBZGRMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMucHJldmlldykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb29wQmFyTW91c2VJbk91dCgpO1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3ZlciA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW91dCA9IGxvb3BCYXJNb3VzZUluT3V0O1xuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlbW92ZSA9IGxvb3BCYXJNb3VzZU1vdmU7XG4gICAgICByZW1vdmVMaXN0ZW5lcihgbW91c2V1cGAsIGxvb3BCYXJBZGRMaXN0ZW5lcnMsIGZhbHNlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGB0b3VjaGVuZGAsIGxvb3BCYXJBZGRMaXN0ZW5lcnMsIGZhbHNlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZW1vdmVgLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihgdG91Y2htb3ZlYCwgbG9vcEJhck1vdXNlTW92ZSwgZmFsc2UpO1xuICAgIH07XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdmVyID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3V0ID0gbG9vcEJhck1vdXNlSW5PdXQ7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vkb3duID0gKCkgPT4ge1xuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3ZlciA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIub25tb3VzZW91dCA9IG51bGw7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vtb3ZlID0gbnVsbDtcbiAgICAgIGFkZExpc3RlbmVyKGBtb3VzZXVwYCwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgYWRkTGlzdGVuZXIoYHRvdWNoZW5kYCwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgYWRkTGlzdGVuZXIoYG1vdXNlbW92ZWAsIGxvb3BCYXJNb3VzZU1vdmUsIGZhbHNlKTtcbiAgICAgIGFkZExpc3RlbmVyKGB0b3VjaG1vdmVgLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgfTtcbiAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2V1cCA9ICgpID0+IHtcbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZXVwYCwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoYHRvdWNoZW5kYCwgbG9vcEJhckFkZExpc3RlbmVycywgZmFsc2UpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoYG1vdXNlbW92ZWAsIGxvb3BCYXJNb3VzZU1vdmUsIGZhbHNlKTtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGB0b3VjaG1vdmVgLCBsb29wQmFyTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2VvdmVyID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5vbm1vdXNlb3V0ID0gbG9vcEJhck1vdXNlSW5PdXQ7XG4gICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9ubW91c2Vtb3ZlID0gbG9vcEJhck1vdXNlTW92ZTtcbiAgICB9O1xuXG4gICAgY29uc3QgbG9vcEJhck1vdXNlTW92ZSA9IGUgPT4ge1xuICAgICAgY29uc3QgY2xpZW50WCA9IGUuY2xpZW50WDtcbiAgICAgIGNvbnN0IHZpZXdwb3J0T2Zmc2V0ID0gX3RoaXMuZWxlbWVudHMubG9vcEJhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmIChcbiAgICAgICAgY2xpZW50WCAtIHZpZXdwb3J0T2Zmc2V0LmxlZnQgKyBfdGhpcy5zZXR0aW5ncy5sb29wTGFzdFBvc2l0aW9uWFB4bHMgPlxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmxvb3BMYXN0UG9zaXRpb25YUHhscyArXG4gICAgICAgICAgICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9mZnNldFdpZHRoICYmXG4gICAgICAgICFfdGhpcy5zZXR0aW5ncy5yZXNpemVMb29wXG4gICAgICApIHtcbiAgICAgICAgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1taWxsaXNlY29uZGApLmlubmVySFRNTCA9XG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcEVuZE1pbGxpc2Vjb25kO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBjbGllbnRYIC0gdmlld3BvcnRPZmZzZXQubGVmdCA8IDAgJiZcbiAgICAgICAgIV90aGlzLnNldHRpbmdzLnJlc2l6ZUxvb3BcbiAgICAgICkge1xuICAgICAgICBlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLW1pbGxpc2Vjb25kYCkuaW5uZXJIVE1MID1cbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5sb29wU3RhcnRNaWxsaXNlY29uZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgcG9zaXRpb25YID1cbiAgICAgICAgY2xpZW50WCAtIHZpZXdwb3J0T2Zmc2V0LmxlZnQgKyBfdGhpcy5zZXR0aW5ncy5sb29wTGFzdFBvc2l0aW9uWFB4bHM7XG5cbiAgICAgIGlmIChwb3NpdGlvblggPCAwKSB7XG4gICAgICAgIHBvc2l0aW9uWCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGxldCBsZWZ0ID1cbiAgICAgICAgcG9zaXRpb25YIC0gZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkub2Zmc2V0V2lkdGggLyAyO1xuXG4gICAgICBpZiAobGVmdCA8IDApIHtcbiAgICAgICAgbGVmdCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBsZWZ0ICsgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkub2Zmc2V0V2lkdGggPlxuICAgICAgICBfdGhpcy5lbGVtZW50cy50b3RhbEJhci5vZmZzZXRXaWR0aFxuICAgICAgKSB7XG4gICAgICAgIGxlZnQgPVxuICAgICAgICAgIF90aGlzLmVsZW1lbnRzLnRvdGFsQmFyLm9mZnNldFdpZHRoIC1cbiAgICAgICAgICBlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5vZmZzZXRXaWR0aDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbXMgPSBNYXRoLnJvdW5kKFxuICAgICAgICAocG9zaXRpb25YIC8gX3RoaXMuZWxlbWVudHMudG90YWxCYXIub2Zmc2V0V2lkdGgpICogX3RoaXMuY2xpcC5kdXJhdGlvblxuICAgICAgKTtcbiAgICAgIGlmIChfdGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgX3RoaXMucHJldmlld0pvdXJuZXkuc3RhdGlvbihtcyk7XG4gICAgICB9XG5cbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItbWlsbGlzZWNvbmRgKS5pbm5lckhUTUwgPSBtcztcbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLnN0eWxlLmxlZnQgPSBsZWZ0ICsgYHB4YDtcbiAgICB9O1xuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFNQTtBQUVBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/listeners/preview.js\n");

/***/ }),

/***/ "../src/listeners/progressBar.js":
/*!***************************************!*\
  !*** ../src/listeners/progressBar.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  _this.listeners.onCursorMove = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.loopBar.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.loopBar.offsetWidth) {\n      positionX = _this.elements.loopBar.offsetWidth;\n    }\n\n    _this.handleDrag(positionX);\n  };\n\n  _this.listeners.onMouseUp = function () {\n    _this.elements.listenerHelper.style.pointerEvents = \"none\"; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    // e.preventDefault();\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUp, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUp, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMove, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMove, false);\n\n    _this.handleDragEnd(_this.settings);\n\n    if (_this.settings.playAfterResize) {\n      if (_this.clip.state === \"idle\" && !_this.settings.loopActivated) {\n        _this.clip.play();\n      } else if (_this.clip.state === \"completed\" && !_this.settings.loopActivated) {\n        _this.createJourney(_this.clip, _this.settings.loopBarMillisecond - 1, {\n          before: \"stop\",\n          after: \"play\"\n        });\n      } else if ((_this.clip.state === \"completed\" || _this.clip.state === \"idle\") && _this.settings.loopActivated) {\n        _this.clip.speed >= 0 ? _this.createJourney(_this.clip, _this.settings.loopBarStartMillisecond + 1, {\n          before: \"stop\",\n          after: \"play\"\n        }) : _this.createJourney(_this.clip, _this.settings.loopBarEndMillisecond - 1, {\n          before: \"stop\",\n          after: \"play\"\n        });\n      } else {\n        _this.clip.resume();\n      }\n\n      _this.settings.playAfterResize = false;\n    }\n  };\n\n  _this.listeners.onMouseDown = function (e) {\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\"; // e.preventDefault();\n    // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    if (_this.clip.state === \"playing\") {\n      _this.settings.playAfterResize = true;\n    }\n\n    _this.handleDragStart(_this.clip);\n\n    _this.listeners.onCursorMove(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUp, false);\n    addListener(\"touchend\", _this.listeners.onMouseUp, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMove, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMove, false);\n  };\n\n  _this.elements.loopBar.addEventListener(\"mousedown\", _this.listeners.onMouseDown, false);\n\n  _this.elements.loopBar.addEventListener(\"touchstart\", _this.listeners.onMouseDown, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9wcm9ncmVzc0Jhci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvbGlzdGVuZXJzL3Byb2dyZXNzQmFyLmpzPzU3YjIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBhZGRMaXN0ZW5lciwgcmVtb3ZlTGlzdGVuZXIgfSA9IHJlcXVpcmUoYC4uL2hlbHBlcnNgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfdGhpcyA9PiB7XG4gIC8vIGxldCBwZSA9IGZhbHNlO1xuXG4gIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBjbGllbnRYID0gZS5jbGllbnRYIHx8ICgoZS50b3VjaGVzIHx8IFtdKVswXSB8fCB7fSkuY2xpZW50WDtcbiAgICBjb25zdCB2aWV3cG9ydE9mZnNldCA9IF90aGlzLmVsZW1lbnRzLmxvb3BCYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IHBvc2l0aW9uWCA9IGNsaWVudFggLSB2aWV3cG9ydE9mZnNldC5sZWZ0O1xuXG4gICAgaWYgKHBvc2l0aW9uWCA8IDApIHtcbiAgICAgIHBvc2l0aW9uWCA9IDA7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvblggPiBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9mZnNldFdpZHRoKSB7XG4gICAgICBwb3NpdGlvblggPSBfdGhpcy5lbGVtZW50cy5sb29wQmFyLm9mZnNldFdpZHRoO1xuICAgIH1cbiAgICBfdGhpcy5oYW5kbGVEcmFnKHBvc2l0aW9uWCk7XG4gIH07XG5cbiAgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcCA9ICgpID0+IHtcbiAgICBfdGhpcy5lbGVtZW50cy5saXN0ZW5lckhlbHBlci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG5cbiAgICAvLyBpZiAocGUpIHtcbiAgICAvLyAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUG9pbnRlckV2ZW50cy5jbGljaygpO1xuICAgIC8vIH1cbiAgICAvLyBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoYG1vdXNldXBgLCBfdGhpcy5saXN0ZW5lcnMub25Nb3VzZVVwLCBmYWxzZSk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoYHRvdWNoZW5kYCwgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcCwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZW1vdmVgLCBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlLCBmYWxzZSk7XG4gICAgcmVtb3ZlTGlzdGVuZXIoYHRvdWNobW92ZWAsIF90aGlzLmxpc3RlbmVycy5vbkN1cnNvck1vdmUsIGZhbHNlKTtcbiAgICBfdGhpcy5oYW5kbGVEcmFnRW5kKF90aGlzLnNldHRpbmdzKTtcblxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5wbGF5QWZ0ZXJSZXNpemUpIHtcbiAgICAgIGlmIChfdGhpcy5jbGlwLnN0YXRlID09PSBgaWRsZWAgJiYgIV90aGlzLnNldHRpbmdzLmxvb3BBY3RpdmF0ZWQpIHtcbiAgICAgICAgX3RoaXMuY2xpcC5wbGF5KCk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBfdGhpcy5jbGlwLnN0YXRlID09PSBgY29tcGxldGVkYCAmJlxuICAgICAgICAhX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZFxuICAgICAgKSB7XG4gICAgICAgIF90aGlzLmNyZWF0ZUpvdXJuZXkoX3RoaXMuY2xpcCwgX3RoaXMuc2V0dGluZ3MubG9vcEJhck1pbGxpc2Vjb25kIC0gMSwge1xuICAgICAgICAgIGJlZm9yZTogXCJzdG9wXCIsXG4gICAgICAgICAgYWZ0ZXI6IFwicGxheVwiXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKF90aGlzLmNsaXAuc3RhdGUgPT09IGBjb21wbGV0ZWRgIHx8IF90aGlzLmNsaXAuc3RhdGUgPT09IGBpZGxlYCkgJiZcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcEFjdGl2YXRlZFxuICAgICAgKSB7XG4gICAgICAgIF90aGlzLmNsaXAuc3BlZWQgPj0gMFxuICAgICAgICAgID8gX3RoaXMuY3JlYXRlSm91cm5leShcbiAgICAgICAgICAgICAgX3RoaXMuY2xpcCxcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcEJhclN0YXJ0TWlsbGlzZWNvbmQgKyAxLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmVmb3JlOiBcInN0b3BcIixcbiAgICAgICAgICAgICAgICBhZnRlcjogXCJwbGF5XCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogX3RoaXMuY3JlYXRlSm91cm5leShcbiAgICAgICAgICAgICAgX3RoaXMuY2xpcCxcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubG9vcEJhckVuZE1pbGxpc2Vjb25kIC0gMSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJlZm9yZTogXCJzdG9wXCIsXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IFwicGxheVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5jbGlwLnJlc3VtZSgpO1xuICAgICAgfVxuICAgICAgX3RoaXMuc2V0dGluZ3MucGxheUFmdGVyUmVzaXplID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlRG93biA9IGUgPT4ge1xuICAgIF90aGlzLmVsZW1lbnRzLmxpc3RlbmVySGVscGVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImF1dG9cIjtcblxuICAgIC8vIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAvLyBpZiAoIV90aGlzLm9wdGlvbnMucG9pbnRlckV2ZW50cykge1xuICAgIC8vICAgcGUgPSB0cnVlO1xuICAgIC8vICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQb2ludGVyRXZlbnRzLmNsaWNrKCk7XG4gICAgLy8gfVxuICAgIGlmIChfdGhpcy5jbGlwLnN0YXRlID09PSBgcGxheWluZ2ApIHtcbiAgICAgIF90aGlzLnNldHRpbmdzLnBsYXlBZnRlclJlc2l6ZSA9IHRydWU7XG4gICAgfVxuICAgIF90aGlzLmhhbmRsZURyYWdTdGFydChfdGhpcy5jbGlwKTtcbiAgICBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlKGUpO1xuICAgIGFkZExpc3RlbmVyKGBtb3VzZXVwYCwgX3RoaXMubGlzdGVuZXJzLm9uTW91c2VVcCwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKGB0b3VjaGVuZGAsIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlVXAsIGZhbHNlKTtcbiAgICBhZGRMaXN0ZW5lcihgbW91c2Vtb3ZlYCwgX3RoaXMubGlzdGVuZXJzLm9uQ3Vyc29yTW92ZSwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKGB0b3VjaG1vdmVgLCBfdGhpcy5saXN0ZW5lcnMub25DdXJzb3JNb3ZlLCBmYWxzZSk7XG4gIH07XG5cbiAgX3RoaXMuZWxlbWVudHMubG9vcEJhci5hZGRFdmVudExpc3RlbmVyKFxuICAgIGBtb3VzZWRvd25gLFxuICAgIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlRG93bixcbiAgICBmYWxzZVxuICApO1xuICBfdGhpcy5lbGVtZW50cy5sb29wQmFyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgYHRvdWNoc3RhcnRgLFxuICAgIF90aGlzLmxpc3RlbmVycy5vbk1vdXNlRG93bixcbiAgICB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0sXG4gICAgZmFsc2VcbiAgKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUlBO0FBS0E7QUFDQTtBQUZBO0FBU0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUlBO0FBREE7QUFLQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../src/listeners/progressBar.js\n");

/***/ }),

/***/ "../src/listeners/settings.js":
/*!************************************!*\
  !*** ../src/listeners/settings.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  _this.elements.settingsShowIndicator.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-show-indicator-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.elements.indicator.style.visibility = \"hidden\";\n      _this.elements.statusButton.style.width = \"40px\";\n      _this.elements.statusButton.style.height = \"25px\";\n      _this.elements.statusButton.style.bottom = \"0px\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.indicator.style.visibility = \"visible\";\n      _this.elements.statusButton.style.width = \"35px\";\n      _this.elements.statusButton.style.height = \"20px\";\n      _this.elements.statusButton.style.bottom = \"5px\";\n    }\n  };\n\n  _this.elements.settingsPointerEvents.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-pointer-events-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.options.pointerEvents = false;\n      _this.elements.mcPlayer.style.pointerEvents = \"none\";\n      _this.elements.pointerEventPanel.style.pointerEvents = \"none\";\n      elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n      _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.mcPlayer.style.pointerEvents = \"none\";\n      _this.elements.pointerEventPanel.style.pointerEvents = \"auto\";\n      elid(\"\".concat(_this.name, \"-controls\")).style.pointerEvents = \"auto\";\n      _this.elements.settingsPanel.style.pointerEvents = \"auto\";\n    }\n  };\n\n  _this.elements.settingsShowVolume.onclick = function (e) {\n    e.preventDefault();\n\n    _this.elements.volumeControl.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBar.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n    _this.elements.volumeBarHelper.classList.toggle(\"\".concat(_this.name, \"-volume-width-transition\")); // _this.elements.timeDisplay.classList.toggle(\n    //   `${_this.name}-time-width-transition`\n    // );\n\n\n    var checkbox = elid(\"\".concat(_this.name, \"-show-volume-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      _this.elements.volumeControl.style.visibility = \"hidden\";\n      _this.elements.timeDisplay.style.left = \"45px\";\n    } else {\n      checkbox.checked = true;\n      _this.elements.volumeControl.style.visibility = \"visible\";\n      _this.elements.timeDisplay.style.left = \"\";\n    }\n  };\n\n  _this.elements.settingsShowPreview.onclick = function (e) {\n    e.preventDefault();\n    var checkbox = elid(\"\".concat(_this.name, \"-show-preview-checkbox\"));\n\n    if (checkbox.checked) {\n      checkbox.checked = false;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.visibility = \"hidden\";\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.display = \"none\";\n      _this.options.preview = false;\n    } else {\n      if (!_this.previewClip) {\n        _this.createPreviewDisplay();\n      }\n\n      checkbox.checked = true;\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.visibility = \"visible\";\n      elid(\"\".concat(_this.name, \"-hover-display\")).style.display = \"flex\";\n      _this.options.preview = true;\n    }\n  };\n\n  _this.elements.settingsButton.onclick = function (e) {\n    e.preventDefault();\n\n    var showHideSettings = function showHideSettings(e) {\n      if (_this.elements.settingsPanel.contains(e.target)) {\n        return true;\n      }\n\n      _this.elements.settingsPanel.classList.toggle(\"\".concat(_this.name, \"-hide\"));\n\n      _this.elements.settingsPanel.classList.toggle(\"m-fadeOut\");\n\n      _this.elements.settingsPanel.classList.toggle(\"m-fadeIn\");\n\n      if (_this.elements.settingsPanel.className.includes(\"m-fadeOut\")) {\n        removeListener(\"click\", showHideSettings, false);\n      }\n    };\n\n    if (_this.elements.settingsPanel.className.includes(\"m-fadeOut\")) {\n      addListener(\"click\", showHideSettings, false);\n    } else {\n      removeListener(\"click\", showHideSettings, false);\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9zZXR0aW5ncy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvbGlzdGVuZXJzL3NldHRpbmdzLmpzP2NmMGIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBlbGlkLCBhZGRMaXN0ZW5lciwgcmVtb3ZlTGlzdGVuZXIgfSA9IHJlcXVpcmUoYC4uL2hlbHBlcnNgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfdGhpcyA9PiB7XG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd0luZGljYXRvci5vbmNsaWNrID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGNoZWNrYm94ID0gZWxpZChgJHtfdGhpcy5uYW1lfS1zaG93LWluZGljYXRvci1jaGVja2JveGApO1xuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbGVtZW50cy5pbmRpY2F0b3Iuc3R5bGUudmlzaWJpbGl0eSA9IGBoaWRkZW5gO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLnN0eWxlLndpZHRoID0gYDQwcHhgO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLnN0eWxlLmhlaWdodCA9IGAyNXB4YDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5zdHlsZS5ib3R0b20gPSBgMHB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBfdGhpcy5lbGVtZW50cy5pbmRpY2F0b3Iuc3R5bGUudmlzaWJpbGl0eSA9IGB2aXNpYmxlYDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5zdHlsZS53aWR0aCA9IGAzNXB4YDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnN0YXR1c0J1dHRvbi5zdHlsZS5oZWlnaHQgPSBgMjBweGA7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zdGF0dXNCdXR0b24uc3R5bGUuYm90dG9tID0gYDVweGA7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUG9pbnRlckV2ZW50cy5vbmNsaWNrID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGNoZWNrYm94ID0gZWxpZChgJHtfdGhpcy5uYW1lfS1wb2ludGVyLWV2ZW50cy1jaGVja2JveGApO1xuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICBfdGhpcy5vcHRpb25zLnBvaW50ZXJFdmVudHMgPSBmYWxzZTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLm1jUGxheWVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnBvaW50ZXJFdmVudFBhbmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0tY29udHJvbHNgKS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImF1dG9cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBfdGhpcy5lbGVtZW50cy5tY1BsYXllci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBfdGhpcy5lbGVtZW50cy5wb2ludGVyRXZlbnRQYW5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICBlbGlkKGAke190aGlzLm5hbWV9LWNvbnRyb2xzYCkuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiYXV0b1wiO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd1ZvbHVtZS5vbmNsaWNrID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgIGAke190aGlzLm5hbWV9LXZvbHVtZS13aWR0aC10cmFuc2l0aW9uYFxuICAgICk7XG4gICAgX3RoaXMuZWxlbWVudHMudm9sdW1lQmFyLmNsYXNzTGlzdC50b2dnbGUoXG4gICAgICBgJHtfdGhpcy5uYW1lfS12b2x1bWUtd2lkdGgtdHJhbnNpdGlvbmBcbiAgICApO1xuICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUJhci5jbGFzc0xpc3QudG9nZ2xlKGAke190aGlzLm5hbWV9LWhpZGVgKTtcbiAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVCYXJIZWxwZXIuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgIGAke190aGlzLm5hbWV9LXZvbHVtZS13aWR0aC10cmFuc2l0aW9uYFxuICAgICk7XG4gICAgLy8gX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAvLyAgIGAke190aGlzLm5hbWV9LXRpbWUtd2lkdGgtdHJhbnNpdGlvbmBcbiAgICAvLyApO1xuXG4gICAgY29uc3QgY2hlY2tib3ggPSBlbGlkKGAke190aGlzLm5hbWV9LXNob3ctdm9sdW1lLWNoZWNrYm94YCk7XG4gICAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnZvbHVtZUNvbnRyb2wuc3R5bGUudmlzaWJpbGl0eSA9IGBoaWRkZW5gO1xuICAgICAgX3RoaXMuZWxlbWVudHMudGltZURpc3BsYXkuc3R5bGUubGVmdCA9IGA0NXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBfdGhpcy5lbGVtZW50cy52b2x1bWVDb250cm9sLnN0eWxlLnZpc2liaWxpdHkgPSBgdmlzaWJsZWA7XG4gICAgICBfdGhpcy5lbGVtZW50cy50aW1lRGlzcGxheS5zdHlsZS5sZWZ0ID0gYGA7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU2hvd1ByZXZpZXcub25jbGljayA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBjaGVja2JveCA9IGVsaWQoYCR7X3RoaXMubmFtZX0tc2hvdy1wcmV2aWV3LWNoZWNrYm94YCk7XG4gICAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLnN0eWxlLnZpc2liaWxpdHkgPSBgaGlkZGVuYDtcbiAgICAgIGVsaWQoYCR7X3RoaXMubmFtZX0taG92ZXItZGlzcGxheWApLnN0eWxlLmRpc3BsYXkgPSBgbm9uZWA7XG4gICAgICBfdGhpcy5vcHRpb25zLnByZXZpZXcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFfdGhpcy5wcmV2aWV3Q2xpcCkge1xuICAgICAgICBfdGhpcy5jcmVhdGVQcmV2aWV3RGlzcGxheSgpO1xuICAgICAgfVxuICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICBlbGlkKGAke190aGlzLm5hbWV9LWhvdmVyLWRpc3BsYXlgKS5zdHlsZS52aXNpYmlsaXR5ID0gYHZpc2libGVgO1xuICAgICAgZWxpZChgJHtfdGhpcy5uYW1lfS1ob3Zlci1kaXNwbGF5YCkuc3R5bGUuZGlzcGxheSA9IGBmbGV4YDtcbiAgICAgIF90aGlzLm9wdGlvbnMucHJldmlldyA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzQnV0dG9uLm9uY2xpY2sgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBzaG93SGlkZVNldHRpbmdzID0gZSA9PiB7XG4gICAgICBpZiAoX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC50b2dnbGUoYCR7X3RoaXMubmFtZX0taGlkZWApO1xuXG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTGlzdC50b2dnbGUoYG0tZmFkZU91dGApO1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKGBtLWZhZGVJbmApO1xuICAgICAgaWYgKF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NOYW1lLmluY2x1ZGVzKGBtLWZhZGVPdXRgKSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcihgY2xpY2tgLCBzaG93SGlkZVNldHRpbmdzLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BhbmVsLmNsYXNzTmFtZS5pbmNsdWRlcyhgbS1mYWRlT3V0YCkpIHtcbiAgICAgIGFkZExpc3RlbmVyKGBjbGlja2AsIHNob3dIaWRlU2V0dGluZ3MsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoYGNsaWNrYCwgc2hvd0hpZGVTZXR0aW5ncywgZmFsc2UpO1xuICAgIH1cbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../src/listeners/settings.js\n");

/***/ }),

/***/ "../src/listeners/speed.js":
/*!*********************************!*\
  !*** ../src/listeners/speed.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    elid = _require.elid,\n    addListener = _require.addListener,\n    removeListener = _require.removeListener;\n\nmodule.exports = function (_this) {\n  // const pe = false;\n  _this.elements.settingsSpeedButtonShow.onclick = _this.elements.settingsSpeedButtonHide.onclick = function (e) {\n    e.preventDefault();\n\n    _this.elements.settingsPanel.classList.toggle(\"\".concat(_this.name, \"-settings-speed-panel\"));\n\n    var includesClass = _this.elements.settingsPanel.className.includes(\"\".concat(_this.name, \"-settings-speed-panel\"));\n\n    if (includesClass) {\n      _this.elements.settingsMainPanel.style.display = \"none\";\n      _this.elements.settingsSpeedPanel.style.display = \"block\";\n    } else {\n      _this.elements.settingsSpeedPanel.style.display = \"none\";\n      _this.elements.settingsMainPanel.style.display = \"block\";\n    }\n  };\n\n  var onCursorMoveSpeedBar = function onCursorMoveSpeedBar(e) {\n    e.preventDefault();\n\n    var viewportOffset = _this.elements.speedBar.getBoundingClientRect();\n\n    var clientY = e.clientY || ((e.touches || [])[0] || {}).clientY;\n    var positionY = clientY - viewportOffset.top;\n    positionY -= 8;\n\n    if (positionY < 0) {\n      positionY = 0;\n    } else if (positionY > _this.elements.speedBar.offsetHeight - 16) {\n      positionY = _this.elements.speedBar.offsetHeight - 16;\n    }\n\n    positionY = Math.floor(positionY); // show speed\n\n    var percentage = (positionY / ((_this.options.speedValues.length - 1) * 16) - 1) * -1;\n    var step = 1 / (_this.options.speedValues.length - 1);\n\n    var speed = _this.calculateSpeed(step, _this.options.speedValues, percentage);\n\n    elid(\"\".concat(_this.name, \"-speed-runtime\")).innerHTML = speed + \"0\";\n    elid(\"\".concat(_this.name, \"-speed-cursor\")).style.top = positionY + \"px\";\n    _this.clip.executionSpeed = speed;\n  };\n\n  var onMouseUpSpeedBar = function onMouseUpSpeedBar(e) {\n    // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    e.preventDefault();\n    removeListener(\"mouseup\", onMouseUpSpeedBar, false);\n    removeListener(\"touchend\", onMouseUpSpeedBar, false);\n    removeListener(\"mousemove\", onCursorMoveSpeedBar, false);\n    removeListener(\"touchmove\", onCursorMoveSpeedBar, false);\n    elid(\"\".concat(_this.name, \"-speed-runtime\")).innerHTML = \"Speed\";\n    var speedDisplay;\n    _this.clip.speed == 1 ? speedDisplay = \"Normal\" : speedDisplay = _this.clip.speed;\n    _this.elements.speedCurrent.innerHTML = speedDisplay;\n  };\n\n  var onMouseDownSpeedBar = function onMouseDownSpeedBar(e) {\n    // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n    e.preventDefault();\n    onCursorMoveSpeedBar(e);\n    addListener(\"mouseup\", onMouseUpSpeedBar, false);\n    addListener(\"touchend\", onMouseUpSpeedBar, false);\n    addListener(\"mousemove\", onCursorMoveSpeedBar, false);\n    addListener(\"touchmove\", onCursorMoveSpeedBar, false);\n  };\n\n  _this.elements.speedBarHelper.addEventListener(\"mousedown\", onMouseDownSpeedBar, false);\n\n  _this.elements.speedBarHelper.addEventListener(\"touchstart\", onMouseDownSpeedBar, {\n    passive: false\n  }, false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9zcGVlZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvbGlzdGVuZXJzL3NwZWVkLmpzP2ZjODIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBlbGlkLCBhZGRMaXN0ZW5lciwgcmVtb3ZlTGlzdGVuZXIgfSA9IHJlcXVpcmUoYC4uL2hlbHBlcnNgKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfdGhpcyA9PiB7XG4gIC8vIGNvbnN0IHBlID0gZmFsc2U7XG4gIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU3BlZWRCdXR0b25TaG93Lm9uY2xpY2sgPSBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1NwZWVkQnV0dG9uSGlkZS5vbmNsaWNrID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgIGAke190aGlzLm5hbWV9LXNldHRpbmdzLXNwZWVkLXBhbmVsYFxuICAgICk7XG4gICAgY29uc3QgaW5jbHVkZXNDbGFzcyA9IF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUGFuZWwuY2xhc3NOYW1lLmluY2x1ZGVzKFxuICAgICAgYCR7X3RoaXMubmFtZX0tc2V0dGluZ3Mtc3BlZWQtcGFuZWxgXG4gICAgKTtcbiAgICBpZiAoaW5jbHVkZXNDbGFzcykge1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NNYWluUGFuZWwuc3R5bGUuZGlzcGxheSA9IGBub25lYDtcbiAgICAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzU3BlZWRQYW5lbC5zdHlsZS5kaXNwbGF5ID0gYGJsb2NrYDtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuZWxlbWVudHMuc2V0dGluZ3NTcGVlZFBhbmVsLnN0eWxlLmRpc3BsYXkgPSBgbm9uZWA7XG4gICAgICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc01haW5QYW5lbC5zdHlsZS5kaXNwbGF5ID0gYGJsb2NrYDtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25DdXJzb3JNb3ZlU3BlZWRCYXIgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qgdmlld3BvcnRPZmZzZXQgPSBfdGhpcy5lbGVtZW50cy5zcGVlZEJhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBjbGllbnRZID0gZS5jbGllbnRZIHx8ICgoZS50b3VjaGVzIHx8IFtdKVswXSB8fCB7fSkuY2xpZW50WTtcbiAgICBsZXQgcG9zaXRpb25ZID0gY2xpZW50WSAtIHZpZXdwb3J0T2Zmc2V0LnRvcDtcblxuICAgIHBvc2l0aW9uWSAtPSA4O1xuICAgIGlmIChwb3NpdGlvblkgPCAwKSB7XG4gICAgICBwb3NpdGlvblkgPSAwO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb25ZID4gX3RoaXMuZWxlbWVudHMuc3BlZWRCYXIub2Zmc2V0SGVpZ2h0IC0gMTYpIHtcbiAgICAgIHBvc2l0aW9uWSA9IF90aGlzLmVsZW1lbnRzLnNwZWVkQmFyLm9mZnNldEhlaWdodCAtIDE2O1xuICAgIH1cbiAgICBwb3NpdGlvblkgPSBNYXRoLmZsb29yKHBvc2l0aW9uWSk7XG4gICAgLy8gc2hvdyBzcGVlZFxuICAgIGNvbnN0IHBlcmNlbnRhZ2UgPVxuICAgICAgKHBvc2l0aW9uWSAvICgoX3RoaXMub3B0aW9ucy5zcGVlZFZhbHVlcy5sZW5ndGggLSAxKSAqIDE2KSAtIDEpICogLTE7XG4gICAgY29uc3Qgc3RlcCA9IDEgLyAoX3RoaXMub3B0aW9ucy5zcGVlZFZhbHVlcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBzcGVlZCA9IF90aGlzLmNhbGN1bGF0ZVNwZWVkKFxuICAgICAgc3RlcCxcbiAgICAgIF90aGlzLm9wdGlvbnMuc3BlZWRWYWx1ZXMsXG4gICAgICBwZXJjZW50YWdlXG4gICAgKTtcbiAgICBlbGlkKGAke190aGlzLm5hbWV9LXNwZWVkLXJ1bnRpbWVgKS5pbm5lckhUTUwgPSBzcGVlZCArIGAwYDtcbiAgICBlbGlkKGAke190aGlzLm5hbWV9LXNwZWVkLWN1cnNvcmApLnN0eWxlLnRvcCA9IHBvc2l0aW9uWSArIGBweGA7XG4gICAgX3RoaXMuY2xpcC5leGVjdXRpb25TcGVlZCA9IHNwZWVkO1xuICB9O1xuXG4gIGNvbnN0IG9uTW91c2VVcFNwZWVkQmFyID0gZSA9PiB7XG4gICAgLy8gaWYgKHBlKSB7XG4gICAgLy8gICBfdGhpcy5lbGVtZW50cy5zZXR0aW5nc1BvaW50ZXJFdmVudHMuY2xpY2soKTtcbiAgICAvLyB9XG4gICAgX3RoaXMuZWxlbWVudHMubGlzdGVuZXJIZWxwZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiO1xuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZXVwYCwgb25Nb3VzZVVwU3BlZWRCYXIsIGZhbHNlKTtcbiAgICByZW1vdmVMaXN0ZW5lcihgdG91Y2hlbmRgLCBvbk1vdXNlVXBTcGVlZEJhciwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGBtb3VzZW1vdmVgLCBvbkN1cnNvck1vdmVTcGVlZEJhciwgZmFsc2UpO1xuICAgIHJlbW92ZUxpc3RlbmVyKGB0b3VjaG1vdmVgLCBvbkN1cnNvck1vdmVTcGVlZEJhciwgZmFsc2UpO1xuICAgIGVsaWQoYCR7X3RoaXMubmFtZX0tc3BlZWQtcnVudGltZWApLmlubmVySFRNTCA9IGBTcGVlZGA7XG4gICAgbGV0IHNwZWVkRGlzcGxheTtcbiAgICBfdGhpcy5jbGlwLnNwZWVkID09IDFcbiAgICAgID8gKHNwZWVkRGlzcGxheSA9IGBOb3JtYWxgKVxuICAgICAgOiAoc3BlZWREaXNwbGF5ID0gX3RoaXMuY2xpcC5zcGVlZCk7XG5cbiAgICBfdGhpcy5lbGVtZW50cy5zcGVlZEN1cnJlbnQuaW5uZXJIVE1MID0gc3BlZWREaXNwbGF5O1xuICB9O1xuICBjb25zdCBvbk1vdXNlRG93blNwZWVkQmFyID0gZSA9PiB7XG4gICAgLy8gaWYgKCFfdGhpcy5vcHRpb25zLnBvaW50ZXJFdmVudHMpIHtcbiAgICAvLyAgIHBlID0gdHJ1ZTtcbiAgICAvLyAgIF90aGlzLmVsZW1lbnRzLnNldHRpbmdzUG9pbnRlckV2ZW50cy5jbGljaygpO1xuICAgIC8vIH1cbiAgICBfdGhpcy5lbGVtZW50cy5saXN0ZW5lckhlbHBlci5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgb25DdXJzb3JNb3ZlU3BlZWRCYXIoZSk7XG4gICAgYWRkTGlzdGVuZXIoYG1vdXNldXBgLCBvbk1vdXNlVXBTcGVlZEJhciwgZmFsc2UpO1xuICAgIGFkZExpc3RlbmVyKGB0b3VjaGVuZGAsIG9uTW91c2VVcFNwZWVkQmFyLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoYG1vdXNlbW92ZWAsIG9uQ3Vyc29yTW92ZVNwZWVkQmFyLCBmYWxzZSk7XG4gICAgYWRkTGlzdGVuZXIoYHRvdWNobW92ZWAsIG9uQ3Vyc29yTW92ZVNwZWVkQmFyLCBmYWxzZSk7XG4gIH07XG5cbiAgX3RoaXMuZWxlbWVudHMuc3BlZWRCYXJIZWxwZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBgbW91c2Vkb3duYCxcbiAgICBvbk1vdXNlRG93blNwZWVkQmFyLFxuICAgIGZhbHNlXG4gICk7XG4gIF90aGlzLmVsZW1lbnRzLnNwZWVkQmFySGVscGVyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgYHRvdWNoc3RhcnRgLFxuICAgIG9uTW91c2VEb3duU3BlZWRCYXIsXG4gICAge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9LFxuICAgIGZhbHNlXG4gICk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBSUE7QUFEQTtBQUtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/listeners/speed.js\n");

/***/ }),

/***/ "../src/listeners/statusBtn.js":
/*!*************************************!*\
  !*** ../src/listeners/statusBtn.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (_this) {\n  _this.elements.statusButton.onclick = function (e) {\n    e.preventDefault();\n\n    if (_this.clip.state === \"playing\") {\n      _this.clip.wait();\n    } else if (_this.clip.state === \"waiting\") {\n      _this.clip.resume();\n    } else if (_this.clip.state === \"idle\") {\n      if (_this.clip.speed >= 0) {\n        _this.clip.play();\n\n        _this.settings.needsUpdate = true;\n      } else {\n        _this.createJourney(_this.clip, _this.settings.loopEndMillisecond - 1, {\n          before: \"stop\",\n          after: \"play\"\n        });\n\n        _this.settings.needsUpdate = true;\n      }\n    } else if (_this.clip.state === \"completed\") {\n      if (_this.clip.speed >= 0) {\n        _this.createJourney(_this.clip, 0, {\n          before: \"stop\",\n          after: \"play\"\n        });\n\n        _this.settings.needsUpdate = true;\n      } else {\n        _this.createJourney(_this.clip, _this.settings.loopEndMillisecond - 1, {\n          before: \"stop\",\n          after: \"play\"\n        });\n\n        _this.settings.needsUpdate = true;\n      }\n    }\n\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc3JjL2xpc3RlbmVycy9zdGF0dXNCdG4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vc3JjL2xpc3RlbmVycy9zdGF0dXNCdG4uanM/ZGE1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF90aGlzID0+IHtcbiAgX3RoaXMuZWxlbWVudHMuc3RhdHVzQnV0dG9uLm9uY2xpY2sgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKF90aGlzLmNsaXAuc3RhdGUgPT09IGBwbGF5aW5nYCkge1xuICAgICAgX3RoaXMuY2xpcC53YWl0KCk7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5jbGlwLnN0YXRlID09PSBgd2FpdGluZ2ApIHtcbiAgICAgIF90aGlzLmNsaXAucmVzdW1lKCk7XG4gICAgfSBlbHNlIGlmIChfdGhpcy5jbGlwLnN0YXRlID09PSBgaWRsZWApIHtcbiAgICAgIGlmIChfdGhpcy5jbGlwLnNwZWVkID49IDApIHtcbiAgICAgICAgX3RoaXMuY2xpcC5wbGF5KCk7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmNyZWF0ZUpvdXJuZXkoX3RoaXMuY2xpcCwgX3RoaXMuc2V0dGluZ3MubG9vcEVuZE1pbGxpc2Vjb25kIC0gMSwge1xuICAgICAgICAgIGJlZm9yZTogXCJzdG9wXCIsXG4gICAgICAgICAgYWZ0ZXI6IFwicGxheVwiXG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5zZXR0aW5ncy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfdGhpcy5jbGlwLnN0YXRlID09PSBgY29tcGxldGVkYCkge1xuICAgICAgaWYgKF90aGlzLmNsaXAuc3BlZWQgPj0gMCkge1xuICAgICAgICBfdGhpcy5jcmVhdGVKb3VybmV5KF90aGlzLmNsaXAsIDAsIHtcbiAgICAgICAgICBiZWZvcmU6IFwic3RvcFwiLFxuICAgICAgICAgIGFmdGVyOiBcInBsYXlcIlxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuY3JlYXRlSm91cm5leShfdGhpcy5jbGlwLCBfdGhpcy5zZXR0aW5ncy5sb29wRW5kTWlsbGlzZWNvbmQgLSAxLCB7XG4gICAgICAgICAgYmVmb3JlOiBcInN0b3BcIixcbiAgICAgICAgICBhZnRlcjogXCJwbGF5XCJcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLnNldHRpbmdzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/listeners/statusBtn.js\n");

/***/ }),

/***/ "../src/listeners/volume.js":
/*!**********************************!*\
  !*** ../src/listeners/volume.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../helpers */ \"../src/helpers.js\"),\n    addListener = _require.addListener,\n    removeListener = _require.removeListener,\n    elid = _require.elid;\n\nvar svg = __webpack_require__(/*! ../html/svg */ \"../src/html/svg.js\");\n\nmodule.exports = function (_this) {\n  // let pe = false;\n  var volumeDrag = false;\n\n  _this.elements.volumeBtn.onclick = function () {\n    if (_this.settings.volumeMute) {\n      _this.elements.volumeBarActive.style.width = _this.settings.previousVolume * 100 + \"%\";\n\n      _this.clip.setVolume(_this.settings.previousVolume);\n\n      _this.settings.volumeMute = false;\n      var SVG = document.createElement(\"span\");\n      SVG.innerHTML = svg.volumeSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(SVG);\n    } else {\n      _this.settings.volumeMute = true;\n      _this.elements.volumeBarActive.style.width = \"0%\";\n\n      _this.clip.setVolume(0);\n\n      var _SVG = document.createElement(\"span\");\n\n      _SVG.innerHTML = svg.volumeMuteSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(_SVG);\n    }\n  };\n\n  var volumeOpen = false;\n\n  _this.elements.volumeBtn.onmouseover = function () {\n    volumeOpen = true;\n\n    _this.elements.volumeCursor.classList.add(\"\".concat(_this.name, \"-volume-cursor-transition\"));\n\n    _this.elements.volumeBar.classList.add(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBarHelper.classList.add(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.timeDisplay.classList.add(\"\".concat(_this.name, \"-time-width-transition\"));\n  };\n\n  elid(\"\".concat(_this.name, \"-left-controls\")).onmouseout = function () {\n    if (!volumeOpen || volumeDrag) {\n      return;\n    }\n\n    var e = event.toElement || event.relatedTarget || event.target;\n\n    if (isDescendant(elid(\"\".concat(_this.name, \"-left-controls\")), e) || e === elid(\"\".concat(_this.name, \"-left-controls\"))) {\n      return;\n    }\n\n    volumeOpen = false;\n\n    _this.elements.volumeCursor.classList.remove(\"\".concat(_this.name, \"-volume-cursor-transition\"));\n\n    _this.elements.volumeBar.classList.remove(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.volumeBarHelper.classList.remove(\"\".concat(_this.name, \"-volume-width-transition\"));\n\n    _this.elements.timeDisplay.classList.remove(\"\".concat(_this.name, \"-time-width-transition\"));\n  };\n\n  _this.listeners.onCursorMoveVolumeBar = function (e) {\n    e.preventDefault();\n    var clientX = e.clientX || ((e.touches || [])[0] || {}).clientX;\n\n    var viewportOffset = _this.elements.volumeBarHelper.getBoundingClientRect();\n\n    var positionX = clientX - viewportOffset.left;\n\n    if (positionX < 0) {\n      positionX = 0;\n    } else if (positionX > _this.elements.volumeBarHelper.offsetWidth) {\n      positionX = _this.elements.volumeBarHelper.offsetWidth;\n    }\n\n    _this.settings.volume = Number((positionX / _this.elements.volumeBarHelper.offsetWidth).toFixed(2));\n    _this.elements.volumeBarActive.style.width = _this.settings.volume * 100 + \"%\";\n\n    _this.clip.setVolume(_this.settings.volume);\n\n    if (_this.settings.volume > 0) {\n      _this.settings.volumeMute = false;\n      var SVG = document.createElement(\"span\");\n      SVG.innerHTML = svg.volumeSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(SVG);\n    } else if (_this.settings.volume === 0) {\n      _this.settings.volumeMute = true;\n\n      var _SVG2 = document.createElement(\"span\");\n\n      _SVG2.innerHTML = svg.volumeMuteSVG;\n\n      _this.elements.volumeBtn.getElementsByTagName(\"svg\")[0].replaceWith(_SVG2);\n    }\n  };\n\n  _this.listeners.onMouseUpVolumeBar = function (e) {\n    volumeDrag = false; // if (pe) {\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.elements.listenerHelper.style.pointerEvents = \"none\";\n    e.preventDefault();\n\n    if (_this.settings.volume > 0) {\n      _this.settings.previousVolume = _this.settings.volume;\n    }\n\n    removeListener(\"mouseup\", _this.listeners.onMouseUpVolumeBar, false);\n    removeListener(\"touchend\", _this.listeners.onMouseUpVolumeBar, false);\n    removeListener(\"mousemove\", _this.listeners.onCursorMoveVolumeBar, false);\n    removeListener(\"touchmove\", _this.listeners.onCursorMoveVolumeBar, false);\n  };\n\n  _this.listeners.onMouseDownVolumeBar = function (e) {\n    volumeDrag = true; // if (!_this.options.pointerEvents) {\n    //   pe = true;\n    //   _this.elements.settingsPointerEvents.click();\n    // }\n\n    _this.elements.listenerHelper.style.pointerEvents = \"auto\";\n    e.preventDefault();\n\n    _this.listeners.onCursorMoveVolumeBar(e);\n\n    addListener(\"mouseup\", _this.listeners.onMouseUpVolumeBar, false);\n    addListener(\"touchend\", _this.listeners.onMouseUpVolumeBar, false);\n    addListener(\"mousemove\", _this.listeners.onCursorMoveVolumeBar, false);\n    addListener(\"touchmove\", _this.listeners.onCursorMoveVolumeBar, false);\n  };\n\n  _this.elements.volumeBarHelper.addEventListener(\"mousedown\", _this.listeners.onMouseDownVolumeBar, false);\n\n  _this.elements.volumeCursor.addEventListener(\"mousedown\", _this.listeners.onMouseDownVolumeBar, false);\n\n  _this.elements.volumeBarHelper.addEventListener(\"touchstart\", _this.listeners.onMouseDownVolumeBar, {\n    passive: false\n  }, false);\n\n  _this.elements.volumeCursor.addEventListener(\"touchstart\", _this.listeners.onMouseDownVolumeBar, {\n    passive: false\n  }, false);\n};\n\nfunction isDescendant(parent, child) {\n  var node = child.parentNode;\n\n  while (node != null) {\n    if (node == parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/listeners/volume.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var MotorCortex = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar TestPluginDefinition = __webpack_require__(/*! ./testPlugin/main */ \"./testPlugin/main.js\");\n\nvar Player = __webpack_require__(/*! ../src/Player */ \"../src/Player.js\");\n\nvar TestPlugin = MotorCortex.loadPlugin(TestPluginDefinition); // Configure clip\n\nvar config = {\n  css: \"\\n    body{\\n      background-color:black;\\n    }\\n    #one {\\n      font-size:40px;\\n      display: table-cell;\\n      vertical-align: middle;\\n      text-align:center;\\n      font-family: \\\"Century Gothic\\\", CenturyGothic, AppleGothic, sans-serif;\\n      color:#4b475f;\\n      \\n    }\\n    .container {\\n      display: table;\\n      height: 100%;\\n      background-color:#292929;\\n      border:2px solid black;\\n    }\\n  \",\n  html: \"<div class=\\\"container\\\">\\n    <div id=\\\"one\\\" class=\\\"element\\\">Motorcortex Player-Test Plugin</div>\\n  </div>\",\n  host: document.getElementById(\"clip\"),\n  containerParams: {\n    width: \"70%\",\n    height: \"100%\"\n  }\n}; // Create clip\n\nvar clip = new MotorCortex.Clip(null, config);\nvar animation_1 = new TestPlugin.TestIncident({\n  animatedAttrs: {\n    left: 800,\n    opacity: 0\n  }\n}, {\n  id: \"animation_1\",\n  selector: \"#one\",\n  duration: 60000\n});\nvar animation_2 = new TestPlugin.TestIncident({\n  animatedAttrs: {\n    left: 800,\n    opacity: 0\n  }\n}, {\n  id: \"animation_2\",\n  selector: \"#one\",\n  duration: 60000\n});\nvar animation_3 = new TestPlugin.TestIncident({\n  animatedAttrs: {\n    left: 800,\n    opacity: 0\n  }\n}, {\n  id: \"animation_3\",\n  selector: \"#one\",\n  duration: 60000\n});\nclip.addIncident(animation_1, 0);\nclip.addIncident(animation_2, 60000);\nclip.addIncident(animation_3, 120000); // Add clip to timer\n\nnew Player({\n  clip: clip,\n  theme: \"transparent\",\n  preview: true,\n  showVolume: false,\n  speedValues: [8, 3, \"d\", -4, -2, -1, \"dd\", -0.5, 0, 0.5, 1, 2, 4, 32, -32, 1.2],\n  buttons: {\n    donkeyclip: false\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2luZGV4LmpzPzQxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTW90b3JDb3J0ZXggPSByZXF1aXJlKFwiQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleFwiKTtcbmNvbnN0IFRlc3RQbHVnaW5EZWZpbml0aW9uID0gcmVxdWlyZShcIi4vdGVzdFBsdWdpbi9tYWluXCIpO1xuY29uc3QgUGxheWVyID0gcmVxdWlyZShcIi4uL3NyYy9QbGF5ZXJcIik7XG5cbmNvbnN0IFRlc3RQbHVnaW4gPSBNb3RvckNvcnRleC5sb2FkUGx1Z2luKFRlc3RQbHVnaW5EZWZpbml0aW9uKTtcblxuLy8gQ29uZmlndXJlIGNsaXBcbmNvbnN0IGNvbmZpZyA9IHtcbiAgY3NzOiBgXG4gICAgYm9keXtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6YmxhY2s7XG4gICAgfVxuICAgICNvbmUge1xuICAgICAgZm9udC1zaXplOjQwcHg7XG4gICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgIHRleHQtYWxpZ246Y2VudGVyO1xuICAgICAgZm9udC1mYW1pbHk6IFwiQ2VudHVyeSBHb3RoaWNcIiwgQ2VudHVyeUdvdGhpYywgQXBwbGVHb3RoaWMsIHNhbnMtc2VyaWY7XG4gICAgICBjb2xvcjojNGI0NzVmO1xuICAgICAgXG4gICAgfVxuICAgIC5jb250YWluZXIge1xuICAgICAgZGlzcGxheTogdGFibGU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiMyOTI5Mjk7XG4gICAgICBib3JkZXI6MnB4IHNvbGlkIGJsYWNrO1xuICAgIH1cbiAgYCxcbiAgaHRtbDogYDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICA8ZGl2IGlkPVwib25lXCIgY2xhc3M9XCJlbGVtZW50XCI+TW90b3Jjb3J0ZXggUGxheWVyLVRlc3QgUGx1Z2luPC9kaXY+XG4gIDwvZGl2PmAsXG4gIGhvc3Q6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpcFwiKSxcbiAgY29udGFpbmVyUGFyYW1zOiB7XG4gICAgd2lkdGg6IFwiNzAlXCIsXG4gICAgaGVpZ2h0OiBcIjEwMCVcIlxuICB9XG59O1xuXG4vLyBDcmVhdGUgY2xpcFxuY29uc3QgY2xpcCA9IG5ldyBNb3RvckNvcnRleC5DbGlwKG51bGwsIGNvbmZpZyk7XG5jb25zdCBhbmltYXRpb25fMSA9IG5ldyBUZXN0UGx1Z2luLlRlc3RJbmNpZGVudChcbiAge1xuICAgIGFuaW1hdGVkQXR0cnM6IHtcbiAgICAgIGxlZnQ6IDgwMCxcbiAgICAgIG9wYWNpdHk6IDBcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBpZDogXCJhbmltYXRpb25fMVwiLFxuICAgIHNlbGVjdG9yOiBcIiNvbmVcIixcbiAgICBkdXJhdGlvbjogNjAwMDBcbiAgfVxuKTtcbmNvbnN0IGFuaW1hdGlvbl8yID0gbmV3IFRlc3RQbHVnaW4uVGVzdEluY2lkZW50KFxuICB7XG4gICAgYW5pbWF0ZWRBdHRyczoge1xuICAgICAgbGVmdDogODAwLFxuICAgICAgb3BhY2l0eTogMFxuICAgIH1cbiAgfSxcbiAge1xuICAgIGlkOiBcImFuaW1hdGlvbl8yXCIsXG4gICAgc2VsZWN0b3I6IFwiI29uZVwiLFxuICAgIGR1cmF0aW9uOiA2MDAwMFxuICB9XG4pO1xuY29uc3QgYW5pbWF0aW9uXzMgPSBuZXcgVGVzdFBsdWdpbi5UZXN0SW5jaWRlbnQoXG4gIHtcbiAgICBhbmltYXRlZEF0dHJzOiB7XG4gICAgICBsZWZ0OiA4MDAsXG4gICAgICBvcGFjaXR5OiAwXG4gICAgfVxuICB9LFxuICB7XG4gICAgaWQ6IFwiYW5pbWF0aW9uXzNcIixcbiAgICBzZWxlY3RvcjogXCIjb25lXCIsXG4gICAgZHVyYXRpb246IDYwMDAwXG4gIH1cbik7XG5cbmNsaXAuYWRkSW5jaWRlbnQoYW5pbWF0aW9uXzEsIDApO1xuY2xpcC5hZGRJbmNpZGVudChhbmltYXRpb25fMiwgNjAwMDApO1xuY2xpcC5hZGRJbmNpZGVudChhbmltYXRpb25fMywgMTIwMDAwKTtcblxuLy8gQWRkIGNsaXAgdG8gdGltZXJcbm5ldyBQbGF5ZXIoe1xuICBjbGlwLFxuICB0aGVtZTogXCJ0cmFuc3BhcmVudFwiLFxuICBwcmV2aWV3OiB0cnVlLFxuICBzaG93Vm9sdW1lOiBmYWxzZSxcbiAgc3BlZWRWYWx1ZXM6IFtcbiAgICA4LFxuICAgIDMsXG4gICAgXCJkXCIsXG4gICAgLTQsXG4gICAgLTIsXG4gICAgLTEsXG4gICAgXCJkZFwiLFxuICAgIC0wLjUsXG4gICAgMCxcbiAgICAwLjUsXG4gICAgMSxcbiAgICAyLFxuICAgIDQsXG4gICAgMzIsXG4gICAgLTMyLFxuICAgIDEuMlxuICBdLFxuICBidXR0b25zOiB7XG4gICAgZG9ua2V5Y2xpcDogZmFsc2VcbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBb0JBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQXpCQTtBQUNBO0FBK0JBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFGQTtBQURBO0FBT0E7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUVBO0FBQ0E7QUFDQTtBQUZBO0FBREE7QUFPQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFEQTtBQU9BO0FBQ0E7QUFDQTtBQUhBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFrQkE7QUFDQTtBQURBO0FBdkJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./testPlugin/TestChannel.js":
/*!***********************************!*\
  !*** ./testPlugin/TestChannel.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nmodule.exports = MC.AttributeChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZXN0UGx1Z2luL1Rlc3RDaGFubmVsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdGVzdFBsdWdpbi9UZXN0Q2hhbm5lbC5qcz81NzYwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1DID0gcmVxdWlyZShcIkBraXNzbXlidXR0b24vbW90b3Jjb3J0ZXhcIik7XG5tb2R1bGUuZXhwb3J0cyA9IE1DLkF0dHJpYnV0ZUNoYW5uZWw7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./testPlugin/TestChannel.js\n");

/***/ }),

/***/ "./testPlugin/TestIncident.js":
/*!************************************!*\
  !*** ./testPlugin/TestIncident.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MC = __webpack_require__(/*! @kissmybutton/motorcortex */ \"../node_modules/@kissmybutton/motorcortex/dist/main.js\");\n\nvar TimedIncident = MC.TimedIncident;\n\nvar TestIncident =\n/*#__PURE__*/\nfunction (_TimedIncident) {\n  _inherits(TestIncident, _TimedIncident);\n\n  function TestIncident() {\n    _classCallCheck(this, TestIncident);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TestIncident).apply(this, arguments));\n  }\n\n  _createClass(TestIncident, [{\n    key: \"onProgress\",\n    value: function onProgress(progress\n    /*, millisecond*/\n    ) {\n      for (var i = 0; i < this.elements.length; i++) {\n        for (var attr in this.attrs.animatedAttrs) {\n          var delta = this.attrs.animatedAttrs[attr] - this.initialValues[attr];\n          var value = this.initialValues[attr] + delta * progress;\n          this.elements[i].setAttribute(attr, value);\n        }\n      }\n    }\n  }, {\n    key: \"getScratchValue\",\n    value: function getScratchValue(mcid, attribute) {\n      // console.log(this.props.mcid)\n      if (this.props.mcid) {\n        return this.attrs[attribute];\n      }\n\n      var element = this.getElementByMCID(mcid);\n\n      if (element === null) {\n        return null;\n      }\n\n      var val = element.getAttribute(attribute);\n\n      if (val === null || val === \"\") {\n        return 0;\n      } else {\n        return parseInt(val);\n      }\n    }\n  }]);\n\n  return TestIncident;\n}(TimedIncident);\n\nmodule.exports = TestIncident;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZXN0UGx1Z2luL1Rlc3RJbmNpZGVudC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Rlc3RQbHVnaW4vVGVzdEluY2lkZW50LmpzP2Q5YzIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTUMgPSByZXF1aXJlKFwiQGtpc3NteWJ1dHRvbi9tb3RvcmNvcnRleFwiKTtcbmNvbnN0IHsgVGltZWRJbmNpZGVudCB9ID0gTUM7XG5cbmNsYXNzIFRlc3RJbmNpZGVudCBleHRlbmRzIFRpbWVkSW5jaWRlbnQge1xuICBvblByb2dyZXNzKHByb2dyZXNzIC8qLCBtaWxsaXNlY29uZCovKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGNvbnN0IGF0dHIgaW4gdGhpcy5hdHRycy5hbmltYXRlZEF0dHJzKSB7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gdGhpcy5hdHRycy5hbmltYXRlZEF0dHJzW2F0dHJdIC0gdGhpcy5pbml0aWFsVmFsdWVzW2F0dHJdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW5pdGlhbFZhbHVlc1thdHRyXSArIGRlbHRhICogcHJvZ3Jlc3M7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRTY3JhdGNoVmFsdWUobWNpZCwgYXR0cmlidXRlKSB7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5wcm9wcy5tY2lkKVxuICAgIGlmICh0aGlzLnByb3BzLm1jaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHJzW2F0dHJpYnV0ZV07XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnRCeU1DSUQobWNpZCk7XG4gICAgaWYgKGVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB2YWwgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdEluY2lkZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQTFCQTtBQUNBO0FBNEJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./testPlugin/TestIncident.js\n");

/***/ }),

/***/ "./testPlugin/main.js":
/*!****************************!*\
  !*** ./testPlugin/main.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var TestChannel = __webpack_require__(/*! ./TestChannel */ \"./testPlugin/TestChannel.js\");\n\nvar TestIncident = __webpack_require__(/*! ./TestIncident */ \"./testPlugin/TestIncident.js\");\n\nmodule.exports = {\n  npm_name: \"@kissmybutton/test-plugin\",\n  incidents: [{\n    exportable: TestIncident,\n    name: \"TestIncident\"\n  }],\n  channel: TestChannel\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZXN0UGx1Z2luL21haW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXN0UGx1Z2luL21haW4uanM/ZDA0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBUZXN0Q2hhbm5lbCA9IHJlcXVpcmUoXCIuL1Rlc3RDaGFubmVsXCIpO1xuY29uc3QgVGVzdEluY2lkZW50ID0gcmVxdWlyZShcIi4vVGVzdEluY2lkZW50XCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbnBtX25hbWU6IFwiQGtpc3NteWJ1dHRvbi90ZXN0LXBsdWdpblwiLFxuICBpbmNpZGVudHM6IFtcbiAgICB7XG4gICAgICBleHBvcnRhYmxlOiBUZXN0SW5jaWRlbnQsXG4gICAgICBuYW1lOiBcIlRlc3RJbmNpZGVudFwiXG4gICAgfVxuICBdLFxuICBjaGFubmVsOiBUZXN0Q2hhbm5lbFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRkE7QUFLQTtBQVJBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./testPlugin/main.js\n");

/***/ })

/******/ });